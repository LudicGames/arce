{"version":3,"sources":["webpack://Ludic/src/utils/vector2.ts","webpack://Ludic/webpack/universalModuleDefinition","webpack://Ludic/webpack/bootstrap","webpack://Ludic/src/asset/asset.ts","webpack://Ludic/src/asset/assetLoader.ts","webpack://Ludic/src/asset/assetManager.ts","webpack://Ludic/src/asset/audioAsset.ts","webpack://Ludic/src/asset/audioAssetLoader.ts","webpack://Ludic/src/asset/imageAsset.ts","webpack://Ludic/src/asset/imageAssetLoader.ts","webpack://Ludic/src/core/app.ts","webpack://Ludic/src/core/camera.ts","webpack://Ludic/src/core/canvas.ts","webpack://Ludic/src/input/gamepad/controller.ts","webpack://Ludic/src/input/gamepad/maps.ts","webpack://Ludic/src/input/keyboard/controller.ts","webpack://Ludic/src/input/manager.ts","webpack://Ludic/src/input/mouse/controller.ts","webpack://Ludic/src/main.ts","webpack://Ludic/src/reactivity/dep.ts","webpack://Ludic/src/reactivity/lambda.ts","webpack://Ludic/src/reactivity/state.ts","webpack://Ludic/src/render/renderer.ts","webpack://Ludic/src/screen/screen.ts","webpack://Ludic/src/screen/screenManager.ts","../src/Component.ts","../src/Bits.ts","../src/ComponentType.ts","../src/ComponentMapper.ts","../src/Family.ts","../src/Signal.ts","../src/Entity.ts","../src/System.ts","../src/ComponentManager.ts","../src/FamilyManager.ts","../src/exceptions.ts","../src/EntityManager.ts","../src/SystemManager.ts","../src/Engine.ts","../../src/helpers/IteratingSystem.ts","../../src/helpers/IntervalSystem.ts","../../src/helpers/SortedIteratingSystem.ts","../src/Ein.ts","src/game/components/GamepadComponent.ts","src/game/components/PositionComponent.ts","src/game/components/PlayerStateComponent.ts","src/game/utils/Color.ts","src/game/components/TileStateComponent.ts","src/game/systems/PlayerMapControlSystem.ts","src/game/components/RenderComponent.ts","src/game/components/MechComponent.ts","src/game/components/CameraComponent.ts","src/game/components/mappers.ts","src/game/systems/PlayerRenderSystem.ts","src/game/systems/TileRenderSystem.ts","src/game/utils/Euclid.ts","src/game/systems/TileActivationSystem.ts","src/game/components/CastleStateComponent.ts","src/game/systems/CastleRenderSystem.ts","src/game/components/EnemyStateComponent.ts","src/game/systems/CastleDamageSystem.ts","src/game/levels/BaseLevel.ts","src/game/components/MovementComponent.ts","src/game/entities/Player.ts","src/game/entities/Tile.ts","src/game/entities/Castle.ts","src/game/utils/Hex.ts","src/game/utils/Map.ts","src/game/levels/MapGenerator.ts","src/game/systems/CameraRenderSystem.ts","src/game/screens/MapGeneratorScreen.ts","src/game/systems/characterSelect/CharacterSelectSystem.ts","src/game/components/FillComponent.ts","src/game/systems/PlayerCreate.ts","src/game/systems/characterSelect/CharacterSelectRenderer.ts","src/game/screens/CharacterSelectScreen.ts","src/game/game.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.d9d9148c.js","sourceRoot":"..","sourcesContent":["export class Vector2 {\n  x: number\n  y: number\n  \n  constructor(x = 0,y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  get_x(){\n    return this.x\n  }\n  get_y(){\n    return this.y\n  }\n  \n  set_x(x: number){\n    this.x = x\n  }\n  set_y(y: number){\n    this.y = y\n  }\n\n  magnitude(){\n    return Math.sqrt(this.x*this.x + this.y*this.y)\n  }\n  normalize(): this {\n    const m = this.magnitude()\n    if(m > 0){\n      this.scale(1/m)\n    }\n    return this\n  }\n  scale(val: number): this {\n    this.x = this.x * val\n    this.y = this.y * val\n    return this\n  }\n}\nexport default Vector2","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ludic\"] = factory();\n\telse\n\t\troot[\"Ludic\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","import { AssetManager } from './assetManager';\n\nexport type OnLoadResolve = (value?: Asset) => void\nexport type OnLoadReject = (reason?: any) => void\n\nabstract class Asset {\n\n  name: string\n  url: string\n  type: string\n  options: object\n  data: any\n  promise: Promise<any>\n  \n  constructor(name: string, url: string, type: string, options: object) {\n    this.name = name\n    this.url = url\n    this.type = type\n    this.options = options || {}\n  }\n\n  /**\n   * Initializes the loading of this assets data.\n   * ie. An ImageAsset would set the image src to kick of the loading.\n   */\n  load(){\n  }\n\n  /**\n   * Used by promise to resolve the asset's data after loading is complete\n   * \n   * @param resolve promise resolve\n   * @param reject promise reject\n   */\n  onload(resolve: OnLoadResolve, reject: OnLoadReject): ()=>void {\n    return () => {\n      resolve(this)\n    }\n  }\n\n  onAssetResolve(manager: AssetManager){\n  }\n\n  onAssetReject(manager: AssetManager){\n\n  }\n\n  destroy(){\n    this.name = null\n    this.url = null\n    this.type = null\n    this.options = null\n    this.data = null\n  }\n}\n\nexport default Asset\n","import Asset from './asset'\n\nexport default interface AssetLoader {\n  load(name: string, url: string, type: string, options: any): Asset\n}\nexport const t = {} // this is a hack to make this file generate a declaration file in dist. (https://github.com/s-panferov/awesome-typescript-loader/issues/432)","// import ImageAsset from './imageAsset'\n// import RubeAsset from './rubeAsset'\n// import RubeImageAsset from './rubeImageAsset'\nimport ImageLoader from './imageAssetLoader'\nimport AudioLoader from './audioAssetLoader'\nimport Asset from './asset'\nimport AssetLoader from './assetLoader'\n\nexport type AssetsLoadedCallback = (manager: AssetManager)=>void\n\nclass AssetManager {\n  assets: {[key: string]: Asset}\n  loadQueue: Asset[]\n  promiseQueue: Promise<any>[]\n  loaders: {[key: string]: AssetLoader}\n  loading: boolean\n  \n  private finalPromise: Promise<any>\n  private onAssetsLoadedCallback: AssetsLoadedCallback\n\n  constructor() {\n    this.assets = {}\n\n    this.loadQueue = []\n    this.promiseQueue = []\n    this.loaders = {}\n\n\n    this.addLoader('image', ImageLoader)\n    this.addLoader('audio', AudioLoader)\n  }\n\n  loadResource(name: string, url: string, type: string, options: any, overwrite: boolean){\n    let promise = null\n    // first check if we have the asset\n    if(!this.assets[name] || overwrite){\n      let asset = this.NewAsset(name, url, type, options)\n      if(asset != null){\n        this.loadQueue.push(asset)\n\n        this.loading = true\n\n        promise = asset.promise.then(this.onAssetResolve.bind(this), this.onAssetReject.bind(this))\n      }\n    }\n    return promise\n  }\n\n  getAsset(name: string){\n    return this.assets[name]\n  }\n\n  getImage(name: string){\n    let asset = this.getAsset(name)\n\n    switch (asset.type) {\n      case 'image':\n      case 'rubeImage':\n        return asset.data\n      default:\n        return null\n    }\n  }\n\n  getData(name: string){\n    return this.getAsset(name).data\n  }\n\n  onAssetResolve(asset: Asset){\n    this.assets[asset.name] = asset\n    asset.onAssetResolve(this)\n    return asset\n  }\n\n  onAssetReject(){\n    console.log('rejected: ',arguments)\n    return Promise.reject({\n      reason: 'onAssetReject'\n    })\n  }\n\n  isLoading(){\n    return this.loading\n  }\n\n  update(){\n    if(this.loadQueue.length==0){\n      if(!this.finalPromise){\n        this.finalPromise = Promise.all(this.promiseQueue).then(()=>{\n          if(this.finalPromise){ // [tries to*] assures that this is not called prematurely if an asset is added late\n            this.assetsLoaded.apply(this, arguments)\n            this.promiseQueue = [] // reset promise queue to free objects\n          }\n        })\n      }\n    } else {\n      this.finalPromise = null\n      let asset = this.loadQueue.shift()\n      this.promiseQueue.push(asset.promise)\n      asset.load()\n    }\n\n  }\n\n  assetsLoaded(){\n    if(this.onAssetsLoadedCallback){\n      this.onAssetsLoadedCallback(this)\n    }\n    this.loading = false\n  }\n\n  setOnAssetsLoadedCallback(callback: AssetsLoadedCallback){\n    this.onAssetsLoadedCallback = callback\n  }\n\n  NewAsset(name: string, url: string, type: string, options: any): Asset | null {\n    type = type || 'image'\n\n    let loader = this.loaders[type]\n\n    if(loader){\n      return loader.load(name, url, type, options)\n    } else {\n      return null\n    }\n  }\n\n  destroyAsset(asset: Asset){\n    delete this.assets[asset.name]\n    asset.destroy()\n  }\n\n  addLoader(fileTypes: string|string[], loader: AssetLoader){\n    if(typeof fileTypes === 'string'){\n      fileTypes = [fileTypes]\n    }\n\n    fileTypes.forEach((type)=>{\n      this.loaders[type] = loader\n    })\n  }\n}\n\nexport { AssetManager }\nexport default new AssetManager()\n","import Asset, { OnLoadResolve, OnLoadReject } from './asset'\n\nclass AudioAsset extends Asset {\n  context: AudioContext\n  request: XMLHttpRequest\n\n  constructor(name: string, url: string, type: string, options: any) {\n    super(name, url, type || 'audio', options)\n    this.context = new AudioContext()\n    this.promise = new Promise((resolve,reject)=>{\n      this.request = new XMLHttpRequest()\n      this.request.open(\"GET\", this.url, true)\n      this.request.responseType = \"arraybuffer\"\n      this.request.onreadystatechange = this.onload(resolve, reject)\n    })\n  }\n\n  load(){\n    this.request.send()\n  }\n\n  onload(resolve: OnLoadResolve, reject: OnLoadReject){\n    return () => {\n      if (this.request.readyState == XMLHttpRequest.DONE) {\n        if(this.request.status == 200){\n          this.context.decodeAudioData(\n            this.request.response,\n            (buffer) => {\n              if (!buffer) {\n                console.error('AudioAsset: Error decoding file data: ' + this.url)\n                reject(this)\n                return\n              }\n              this.data = buffer\n              resolve(this)\n            }, (error) => {\n              console.error('AudioAsset: decodeAudioData error', error)\n              reject(this)\n            }\n          )\n        } else {\n          console.error('AudioAsset: Request failure: ', this.request.status, this.request.statusText, this.request)\n        }\n      }\n    }\n  }\n}\n\nexport default AudioAsset\n","import AudioAsset from './audioAsset'\nimport AssetLoader from './assetLoader'\n\nclass AudioAssetLoader implements AssetLoader {\n\n  load(name: string, url: string, type: string, options: any){\n    return new AudioAsset(name, url, type, options)\n  }\n}\n\nexport default new AudioAssetLoader()\n","import Asset, { OnLoadResolve, OnLoadReject } from './asset'\n\nclass ImageAsset extends Asset {\n\n  constructor(name: string, url: string, type: string, options: any) {\n    super(name, url, type || 'image', options)\n\n    this.data = new Image()\n    this.promise = new Promise((resolve,reject)=>{\n      this.data.onload = this.onload(resolve,reject)\n    })\n  }\n\n  load(){\n    this.data.src = this.url\n  }\n}\n\nexport default ImageAsset\n","import ImageAsset from './imageAsset'\nimport AssetLoader from './assetLoader'\n\nclass ImageAssetLoader implements AssetLoader {\n\n  load(name: string, url: string, type: string, options: any): ImageAsset {\n    return new ImageAsset(name, url, type, options)\n  }\n}\n\nexport default new ImageAssetLoader()\n","import Canvas from './canvas'\nimport InputManager from '../input/manager'\n\nexport interface LudicPlugin {\n  (app: typeof Ludic): void\n}\n\nexport interface LudicOptions {\n  el: string | HTMLCanvasElement\n  plugins?: Array<LudicPlugin>\n}\n\nexport class Ludic {\n  static debug: boolean\n  static $instance: Ludic\n  static canvas: Canvas\n  static input: InputManager = new InputManager()\n  static $running: boolean = false\n\n  private requestAnimationFrame: Window['requestAnimationFrame']\n  private lastRunTime: number\n\n  constructor(opts: LudicOptions){\n    if(Ludic.$instance) return Ludic.$instance\n\n    const {el, plugins = []} = opts\n\n    Ludic.$instance = this\n    Ludic.canvas = new Canvas(el)\n\n    plugins.forEach(p => this.install(p))\n    this.requestAnimationFrame = (()=>{\n      return  window.requestAnimationFrame       ||\n              window.webkitRequestAnimationFrame ||\n              window.mozRequestAnimationFrame    ||\n              window.oRequestAnimationFrame      ||\n              window.msRequestAnimationFrame\n    })().bind(window)\n    this.animate = this.animate.bind(this)\n  }\n\n  public start(): void {\n    Ludic.$running = true\n    this.lastRunTime = performance.now()\n    this.requestAnimationFrame(this.animate)\n  }\n\n  private animate(time: number): void {\n    this.requestAnimationFrame(this.animate)\n    let now = performance.now()\n    let delta = now - this.lastRunTime\n    this.update(time, delta)\n    this.lastRunTime = now\n  }\n\n  update(time: number, delta: number): void {\n    Ludic.input.update(time, delta)\n  }\n\n  install(plugin: LudicPlugin){\n    plugin(Ludic)\n  }\n\n}\n\nexport default Ludic\n","import Canvas from './canvas'\nimport Vector2 from '../utils/vector2'\n\n// PTM: Pixels to Meters ratio\nconst DEFAULT_PTM = 32\n\nconst DEFAULTS: CameraOptions = {\n  inverseY: true,\n  inverseX: false,\n  x: 0,\n  y: 0,\n  pixelsToMeters: DEFAULT_PTM,\n  width: 300,\n  height: 150,\n}\n\nexport interface CameraOptions {\n  inverseY: boolean\n  inverseX: boolean\n  x: number\n  y: number\n  pixelsToMeters: number\n  width: number\n  height: number\n}\n\nexport interface CameraBounds {\n  x: number\n  y: number\n  width: number\n  height: number\n}\nexport interface ViewportBounds {\n  x: number\n  y: number\n  w: number\n  h: number\n}\n\nexport type RenderingContext2D = CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\n\nexport class Camera {\n\n  x: number\n  y: number\n  width: number\n  height: number\n  inverseX: boolean\n  inverseY: boolean\n  pixelsToMeters: number\n\n  viewCenterPixel: Vector2 = new Vector2(0,0)\n  singleWorldPoint: Vector2 = new Vector2(0,0)\n  singlePixelPoint: Vector2 = new Vector2(0,0)\n  offset: Vector2 = new Vector2(0,0)\n  futurePos: Vector2 = new Vector2(0,0)\n\n  /**\n   * `new Camera(options)`\n   * @param {object} [options] - options object\n   * @param {boolean} [options.inverseY=true] - make 'y' axis point up\n   * @param {boolean} [options.inverseX=false] - make 'x' axis point left\n   * @param {number} [options.x=0] - 'x' coordinate to start the camera\n   * @param {number} [options.y=0] - 'y' coordinate to start the camera\n   * @param {number} [options.width=app.canvas.width()] - width of the camera view\n   * @param {number} [options.height=app.canvas.height()] - height of the camera view\n   *\n   * `new Camera({Canvas})`\n   * @param {Canvas} [canvas] - optional canvas to provide dimensions\n   *\n   * `new Camera(ptm)` - assumes fill canvas width/height\n   * @param {number} [ptm] - pixels to meters scaling factor\n   *\n   * `new Camera(width,height)`\n   * @param {number} [width] - width of the camera view\n   * @param {number} [height] - height of the camera view\n   *\n   * `new Camera(x,y,width,height)`\n   * @param {number} [x] - 'x' coordinate to start the camera\n   * @param {number} [y] - 'y' coordinate to start the camera\n   * @param {number} [width] - width of the camera view\n   * @param {number} [height] - height of the camera view\n   */\n  constructor(canvas: Canvas)\n  constructor(pixelsToMeters: number)\n  constructor(width: number, height: number)\n  constructor(x: number, y: number, width: number, height: number)\n  constructor(...args: any[]){\n    let options = Object.assign({},DEFAULTS)\n    if(args.length === 1){\n      const arg0 = args[0]\n      if(typeof arg0 === 'object'){\n        if(arg0 instanceof Canvas){\n          options.width = arg0.element.width\n          options.height = arg0.element.height\n        } else {\n          // options argument\n          options = Object.assign(options, arg0)\n        }\n      } else if(typeof arg0 === 'number'){\n        // arg is ptm\n        options.pixelsToMeters = arg0\n      } else {\n        console.warn(`Camera::Unknown single argument '${typeof arg0}'.`, args)\n      }\n    } else if(args.length === 2) {\n      // width and height\n      let [width, height] = args\n      options.width = width\n      options.height = height\n    } else if(args.length === 4){\n      // x,y,width,height\n      let [x,y,width,height] = args\n      options.x = x\n      options.y = y\n      options.width = width\n      options.height = height\n    } else if(args.length === 0) {\n      console.warn(`Camera::Initialized without any args.`, args)\n    } else if(args.length !== 0) {\n      console.warn(`Camera::Unknown args.`, args)\n    }\n\n    // apply the options\n    this.x = options.x\n    this.y = options.y\n    this.width = options.width\n    this.height = options.height\n    this.inverseX = options.inverseX\n    this.inverseY = options.inverseY\n    this.pixelsToMeters = options.pixelsToMeters\n\n    this.updateEnvironmentVariables()\n  }\n\n  update(ctx: RenderingContext2D){\n    this.setTransform(ctx)\n  }\n\n  drawAxes(ctx: RenderingContext2D) {\n    ctx.save()\n    ctx.lineWidth = 1/this.pixelsToMeters\n    ctx.strokeStyle = 'rgb(192,0,0)'\n    ctx.beginPath()\n    ctx.moveTo(0, 0)\n    ctx.lineTo(1, 0)\n    ctx.stroke()\n    ctx.strokeStyle = 'rgb(0,192,0)'\n    ctx.beginPath()\n    ctx.moveTo(0, 0)\n    ctx.lineTo(0, 1)\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  drawBounds(ctx: RenderingContext2D, color='red'){\n    let br = this.getViewportBounds()\n    ctx.save()\n    ctx.strokeStyle = color\n    ctx.lineWidth = 1/this.pixelsToMeters\n    ctx.strokeRect(br.x, br.y, br.w-br.x, br.h-br.y)\n    ctx.restore()\n  }\n\n  // setChaseEntity(ent,chaseMethod){\n  //   this.chaseEntity = ent\n  //   this.chaseMethod = chaseMethod\n  // }\n\n  // setChaseMethod(chaseMethod){\n  //   this.chaseMethod = chaseMethod\n  // }\n\n  getWorldPointFromPixelPoint(pixelPoint: Vector2) {\n    this.singleWorldPoint.x = this._getWorldPointFromPixelPoint_x(pixelPoint.x)\n    this.singleWorldPoint.y = this._getWorldPointFromPixelPoint_y(pixelPoint.y)\n    return this.singleWorldPoint\n  }\n\n  private _getWorldPointFromPixelPoint_x(x: number){\n    return (this.inverseX ? (this.offset.x - x) : (x - this.offset.x)) / this.pixelsToMeters\n  }\n\n  private _getWorldPointFromPixelPoint_y(y: number){\n    return (this.inverseY ? (y - (this.height - this.offset.y)) : ((this.height - this.offset.y) - y)) / this.pixelsToMeters\n  }\n\n  getPixelPointFromWorldPoint(worldPoint: Vector2){\n    this.singlePixelPoint.x = this._getPixelPointFromWorldPoint_x(worldPoint.x)\n    this.singlePixelPoint.y = this._getPixelPointFromWorldPoint_y(worldPoint.y)\n    return this.singlePixelPoint\n  }\n\n  private _getPixelPointFromWorldPoint_x(x: number){\n    return this.inverseX ? (this.offset.x - (x*this.pixelsToMeters)) : ((x*this.pixelsToMeters) + this.offset.x)\n  }\n\n  private _getPixelPointFromWorldPoint_y(y: number){\n    return this.inverseY ? ((y*this.pixelsToMeters) + (this.height - this.offset.y)) : ((this.height - this.offset.y) - (y*this.pixelsToMeters))\n  }\n\n  setViewCenterWorld(vector2: Vector2, instantaneous: boolean, fraction: number = 0) {\n    let currentViewCenterWorld = this.getViewCenterWorld()\n    let toMove = new Vector2()\n    toMove.x = vector2.get_x() - currentViewCenterWorld.x\n    toMove.y = vector2.get_y() - currentViewCenterWorld.y\n    this.moveCenterBy(toMove, instantaneous, fraction)\n  }\n\n  centerWorldToCamera(){\n    // this.setViewCenterWorld(new Vector2(), true)\n    this.setOffset(this.viewCenterPixel)\n  }\n\n  centerWorldToTopLeft(){\n    this.setViewCenterWorld(new Vector2(), true)\n  }\n\n  getViewCenterWorld(){\n    return this.getWorldPointFromPixelPoint( this.viewCenterPixel )\n  }\n\n  moveCenterBy(toMove: Vector2, instantaneous: boolean, fraction: number){\n    fraction = fraction || (instantaneous ? 1 : 0.25)\n    this.offset.x -= round(fraction * toMove.x * this.pixelsToMeters, 0)\n    this.offset.y += round(fraction * toMove.y * this.pixelsToMeters, 0)\n  }\n\n  updateEnvironmentVariables(){\n    this.viewCenterPixel.set_x(this.width / 2)\n    this.viewCenterPixel.set_y(this.height / 2)\n  }\n\n  getViewCenterPixel(){\n    return this.viewCenterPixel\n  }\n\n  getViewportBounds(): ViewportBounds {\n    let bounds = {\n      x: this._getWorldPointFromPixelPoint_x(this.x),\n      y: this._getWorldPointFromPixelPoint_y(this.y),\n      w: this._getWorldPointFromPixelPoint_x(this.width),\n      h: this._getWorldPointFromPixelPoint_y(this.height),\n    }\n    return bounds\n  }\n\n  setCameraBounds(x: number, y: number, width: number, height: number): CameraBounds\n  setCameraBounds(bounds:  Partial<CameraBounds>): CameraBounds\n  setCameraBounds(...args: any[]): CameraBounds {\n    if(args.length === 1){\n      const {x=this.x, y=this.y, width=this.width, height=this.height} = args[0] as CameraBounds\n      this.x = x\n      this.y = y\n      this.width = width\n      this.height = height\n    } else if (args.length === 4){\n      const [x=this.x, y=this.y, width=this.width, height=this.height] = args\n      this.x = x\n      this.y = y\n      this.width = width\n      this.height = height\n    }\n    return {x: this.x, y: this.y, width: this.width, height: this.height}\n  }\n\n  getOffset(){\n    return this.offset\n  }\n\n  getOffsetX(){\n    return this.offset.x\n  }\n\n  getOffsetY(){\n    return this.offset.y\n  }\n\n  setOffset(vec: Vector2): void\n  setOffset(x: number, y: number): void\n  setOffset(...args: any[]): void {\n    if(args.length === 1){\n      this.offset.x = args[0].x || 0\n      this.offset.y = args[0].y || 0\n    } else if(args.length === 2){\n      this.offset.x = args[0]\n      this.offset.y = args[1]\n    }\n  }\n\n  setTransform(ctx: RenderingContext2D){\n    ctx.translate(this.getOffsetX(), this.getOffsetY())\n    // apply the scaling factor and inverses\n    ctx.scale(this.inverseX ? -this.pixelsToMeters : this.pixelsToMeters, this.inverseY ? -this.pixelsToMeters : this.pixelsToMeters)\n    // ctx.lineWidth /= this.pixelsToMeters\n  }\n\n  resetTransform(ctx: RenderingContext2D){\n    // ctx.scale(1 / this.getPTM(),1 / this.getPTM())\n    ctx.scale(this.inverseX ? (-1 / this.pixelsToMeters) : (1 / this.pixelsToMeters), this.inverseY ? (-1 / this.pixelsToMeters) : (1 / this.pixelsToMeters))\n    // ctx.lineWidth *= this.pixelsToMeters\n    ctx.translate(-this.getOffsetX(), -this.getOffsetY())\n  }\n\n  isPointInBounds(x: number, y: number, ctx: RenderingContext2D){\n    let inBounds = false\n    ctx.save()\n    ctx.resetTransform()\n    this._generateViewportRect(ctx)\n    inBounds = ctx.isPointInPath(x, y)\n    ctx.restore()\n    return inBounds\n  }\n\n  private _generateViewportRect(ctx: RenderingContext2D){\n    let br = this.getViewportBounds()\n    ctx.beginPath()\n    ctx.moveTo(br.x,br.y)\n    ctx.lineTo(br.w,br.y)\n    ctx.lineTo(br.w,br.h)\n    ctx.lineTo(br.x,br.h)\n    ctx.closePath()\n  }\n}\nexport default Camera\n\nfunction round(val: number, places: number = 0): number {\n  let c = 1\n  for (let i = 0; i < places; i++){\n    c *= 10\n  }\n  return Math.round(val*c)/c\n}\n","import { LudicOptions } from './app'\n\nexport interface CanvasDimensions {\n  width: number\n  height: number\n}\n\nexport class Canvas {\n  dimension: string\n  element: HTMLCanvasElement\n  private _context: CanvasRenderingContext2D\n\n  constructor(el: LudicOptions['el'], dimension='2d') {\n    this.dimension = dimension\n\n    if(typeof el === 'string'){\n      this.element = document.querySelector(el)\n    } else if(el instanceof HTMLCanvasElement) {\n      this.element = el\n    }\n    // window.addEventListener('resize', ()=>{\n    //   this.element.width = window.innerWidth\n    //   this.element.height = window.innerHeight\n    // }, false)\n    this.setDimensions()\n  }\n\n  get context(): CanvasRenderingContext2D {\n    return this.getContext()\n  }\n\n  getContext(dimension = this.dimension, options = {alpha: false}){\n    return this._context || (this._context = <CanvasRenderingContext2D>this.element.getContext(dimension, options))\n  }\n\n  setDimensions(width: number = window.innerWidth, height: number = window.innerHeight): CanvasDimensions {\n    this.element.width = width\n    this.element.height = height\n    return {width, height}\n  }\n\n  /**\n   * Helper function to clear the current context at full width-height\n   * @param {String} clearColor - color to clear the screen with\n   */\n  clear(clearColor = 'white', context = this.context){\n    context.fillStyle = clearColor\n    context.clearRect(0, 0, this.element.width, this.element.height)\n    context.fillRect(0, 0, this.element.width, this.element.height)\n  }\n}\n\nexport default Canvas\n","import InputManager, { InputController, InputState } from '../manager'\nimport GamepadMaps, { GamepadMapConfig } from './maps'\n\n// augment our InputManager to include gamepad\ndeclare module '../manager' {\n  interface InputManager {\n    gamepad: InputState<GamepadState>\n  }\n}\n\ndeclare global {\n  interface Gamepad {\n    readonly vibrationActuator?: ChromeGamepadHapticActuator\n  }\n  interface ChromeGamepadHapticActuator {\n    readonly type: GamepadHapticActuatorType | 'dual-rumble'\n    playEffect(type: ChromeGamepadHapticActuator['type'], params: GamepadEffectParameters): Promise<string>\n    reset(): Promise<any>\n  }\n  interface GamepadEffectParameters {\n    duration: number\n    startDelay?: number\n    strongMagnitude?: number\n    weakMagnitude?: number\n  }\n\n}\n\nlet gamepadsAxisDeadZone = 0.08\nlet gamepadsConfig = {}\n\nconst gamepadMappings: {[key: string]: GamepadMapConfig} = {}\n\nconst getGamepadMap = function getGamepadMap(gamepad: Gamepad): GamepadMapConfig {\n  return gamepadMappings[gamepad.index] || ({} as GamepadMapConfig)\n}\n\nexport interface GamepadVibrationParams {\n  duration: number\n  type?: ChromeGamepadHapticActuator['type']\n  value?: number\n  weakMagnitude?: number\n  strongMagnitude?: number\n  startDelay?: number\n}\n\nclass GamepadStateButton implements GamepadButton {\n  pressed: boolean;\n  touched: boolean;\n  value: number;\n  last?: GamepadStateButton\n  id?: string\n  constructor({pressed=false, touched=false, value=0}: GamepadButton = {} as any, last?: GamepadStateButton){\n    this.pressed = pressed\n    this.touched = touched\n    this.value = value\n    this.last = last != null ? new GamepadStateButton(last, null) : null\n  }\n  get toggled(){\n    return this.last && this.last.pressed !== this.pressed\n  }\n  get buttonUp(){\n    return this.toggled && !this.pressed\n  }\n  get buttonDown(){\n    return this.toggled && this.pressed\n  }\n}\n\nexport class GamepadState {\n  gamepad: Gamepad\n  // normalized buttons and axes\n  start: GamepadStateButton\n  select: GamepadStateButton\n  home: GamepadStateButton // ps/xb button\n  left: GamepadStateButton\n  right: GamepadStateButton\n  up: GamepadStateButton\n  down: GamepadStateButton\n  l1: GamepadStateButton\n  l2: GamepadStateButton\n  l3: GamepadStateButton\n  r1: GamepadStateButton\n  r2: GamepadStateButton\n  r3: GamepadStateButton\n  triangle: GamepadStateButton\n  square: GamepadStateButton\n  circle: GamepadStateButton\n  cross: GamepadStateButton\n  extra: GamepadStateButton\n  lx: GamepadStateButton\n  ly: GamepadStateButton\n  rx: GamepadStateButton\n  ry: GamepadStateButton\n  constructor(){\n    this.start = new GamepadStateButton()\n    this.select = new GamepadStateButton()\n    this.home = new GamepadStateButton() // ps/xb button\n    this.left = new GamepadStateButton()\n    this.right = new GamepadStateButton()\n    this.up = new GamepadStateButton()\n    this.down = new GamepadStateButton()\n    this.l1 = new GamepadStateButton()\n    this.l2 = new GamepadStateButton()\n    this.l3 = new GamepadStateButton()\n    this.r1 = new GamepadStateButton()\n    this.r2 = new GamepadStateButton()\n    this.r3 = new GamepadStateButton()\n    this.triangle = new GamepadStateButton()\n    this.square = new GamepadStateButton()\n    this.circle = new GamepadStateButton()\n    this.cross = new GamepadStateButton()\n    this.extra = new GamepadStateButton()\n    this.lx = new GamepadStateButton({value: 0, pressed: false, touched: false})\n    this.ly = new GamepadStateButton({value: 0, pressed: false, touched: false})\n    this.rx = new GamepadStateButton({value: 0, pressed: false, touched: false})\n    this.ry = new GamepadStateButton({value: 0, pressed: false, touched: false})\n  }\n  /**\n   * an abstraction for chrome/spec haptic actuators\n   */\n  vibrate(params: GamepadVibrationParams){\n    // make sure we have a gamepad\n    if(this.gamepad != null){\n      // check for chrome property\n      if(this.gamepad.vibrationActuator != null){\n        const weakMagnitude = params.weakMagnitude != null ? params.weakMagnitude : (params.value != null ? params.value : undefined)\n        const strongMagnitude = params.strongMagnitude != null ? params.strongMagnitude : (params.value != null ? params.value : undefined)\n        const type = params.type != null ? params.type : this.gamepad.vibrationActuator.type\n        return this.gamepad.vibrationActuator.playEffect(type, {\n          duration: params.duration,\n          startDelay: params.startDelay,\n          weakMagnitude: weakMagnitude,\n          strongMagnitude: strongMagnitude\n        })\n      } else if(this.gamepad.hapticActuators != null && this.gamepad.hapticActuators.length){\n        const value = params.value != null ? params.value : (params.weakMagnitude != null ? params.weakMagnitude : params.strongMagnitude)\n        let actuators = this.gamepad.hapticActuators\n        if(params.type != null){\n          actuators = actuators.filter(actuator => actuator.type === params.type)\n        }\n        return Promise.all(actuators.map(actuator => actuator.pulse(value, params.duration)))\n      }\n    }\n  }\n}\n\nexport default class GamepadController implements InputController {\n  state: InputState<GamepadState>\n  constructor() {\n    this.state = new InputState(GamepadState)\n    window.addEventListener(\"gamepadconnected\", ({gamepad, ...e}: GamepadEvent)=>{\n      let gp = navigator.getGamepads()[gamepad.index]\n      console.log(gp)\n      let mapping = this.findMappingForGamepad(gamepad)\n      if(!mapping){\n        // log out an unknown gamepad\n        console.warn(\"No mapping found for gamepad at index %d: %s. %d buttons, %d axes.\",\n          gamepad.index, gamepad.id,\n          gamepad.buttons.length, gamepad.axes.length)\n        console.log(gamepad)\n      } else {\n        console.log(`${mapping.name} connected as controller ${gamepad.index}.`)\n        gamepadMappings[gamepad.index] = mapping\n      }\n    })\n    window.addEventListener(\"gamepaddisconnected\", ({gamepad, ...e}: GamepadEvent)=>{\n      console.log('Gamepad disconnected: ', gamepad)\n    })\n\n    // window.addEventListener('gamepadbuttondown', (e)=>{\n    //   console.log('gamepad button down: ',e)\n    // })\n    //\n    // window.addEventListener('gamepadbuttonup', (e)=>{\n    //   console.log('gamepad button up: ',e)\n    // })\n  }\n\n  install(inputManager: InputManager){\n    inputManager.gamepad = this.state\n  }\n\n  findMappingForGamepad(gamepad: Gamepad){\n    return Object.values(GamepadMaps).find((mapping) => mapping.test(gamepad))\n  }\n\n  get gamepads(){\n    // convert this array-like into an array\n    return Array.from(navigator.getGamepads() || [])\n  }\n\n  _parseGamepadState(gamepad: Gamepad, lastState: GamepadState): GamepadState {\n    const gamepadState = new GamepadState()\n\n    if(gamepad != null) {\n      const gamepadMap = this.findMappingForGamepad(gamepad)\n  \n      // set the raw gamepad onto the gamepad state\n      gamepadState.gamepad = gamepad\n      \n      if(gamepadMap){\n        gamepad.buttons.forEach( (button, buttonIndex)=>{\n          // get the name for this button at this index from the mapping\n          const buttonName = gamepadMap.buttons[buttonIndex]\n          // check if this button is actually a button or axis\n          if(gamepadMap.buttonAxes && buttonName in gamepadMap.buttonAxes){\n            // skip this button because the axis will handle it\n            return\n          }\n          // set it on the state\n          gamepadState[buttonName] = new GamepadStateButton(button, lastState[buttonName])\n        })\n        // do the same thing for each of the axis (analog sticks)\n        // loop through each and poll state\n        gamepad.axes.forEach( (axisValue,axisIndex)=>{\n          // first determine if this axis is for a stick or a button or a dpad\n          // let axis = new GamepadAxis(gamepad, axisIndex, axisValue)\n          const axisName = gamepadMap.axes[axisIndex]\n          const stick = gamepadMap.sticks[axisName]\n          const buttonIndex = gamepadMap.buttonAxes ? gamepadMap.buttonAxes[axisName] : null\n          const buttonName = buttonIndex != null ? gamepadMap.buttons[buttonIndex] : null\n          const dpad = gamepadMap.dpadAxes ? gamepadMap.dpadAxes[axisName] : null\n\n          if(stick != null){\n            // this is an axis for an analog stick\n            gamepadState[axisName] = new GamepadStateButton({pressed: false, touched: false, value: axisValue}, gamepadState[axisName])\n          } else if(buttonIndex != null) {\n            // this is an axis for a button\n            const button = gamepad.buttons[buttonIndex]\n            gamepadState[buttonName] = new GamepadStateButton(button, lastState[buttonName])\n          } else if(dpad != null) {\n            Object.entries(dpad).forEach(([direction, dpadValue]: [string, number]) => {\n              const button = new GamepadStateButton({pressed: false, value: axisValue, touched: false}, lastState[direction])\n              button.id = direction\n              if(dpadValue == axisValue){\n                button.pressed = true\n              }\n              gamepadState[direction] = button\n            })\n          }\n        })\n      }\n    }\n    return gamepadState\n  }\n\n  update(time: number, delta: number){\n    this.gamepads.forEach((gamepad, index) => {\n      this.state.set(index, this._parseGamepadState(gamepad, this.state.get(index)))\n    })\n  }\n\n  // getDeadZone(gamepadIndex){\n  //   if(gamepadsConfig.hasOwnProperty(gamepadIndex) && gamepadsConfig[gamepadIndex].hasOwnProperty(deadZone)){\n  //     return gamepadsConfig[gamepadIndex].deadZone\n  //   }\n  //   return gamepadsAxisDeadZone\n  // }\n\n  // setDeadZone(deadZone,gamepadIndex){\n  //   if(gamepadIndex !== null && gamepadIndex !== undefined){\n  //     if(gamepadsConfig.hasOwnProperty(gamepadIndex)){\n  //       gamepadsConfig[gamepadIndex].deadZone = deadZone\n  //     } else {\n  //       gamepadsConfig[gamepadIndex] = {deadZone: deadZone}\n  //     }\n  //   } else {\n  //     gamepadsAxisDeadZone = deadZone\n  //   }\n  // }\n\n  // getGamepadMap(gamepad){\n  //   return getGamepadMap(gamepad)\n  // }\n}\n","export type GamepadButtonName = 'cross'|'circle'|'square'|'triangle'|'l1'|'r1'|'l2'|'r2'|'extra'|'start'|'l3'|'r3'|'up'|'down'|'left'|'right'|'home'|'select'|'rx'|'ry'\nexport type GamepadAxisName = 'lx'|'ly'|'rx'|'ry'|'l2'|'r2'|'dpadX'|'dpadY'\nexport interface GamepadMapConfig {\n  name: string\n  buttons: GamepadButtonName[]\n  axes: GamepadAxisName[]\n  buttonAxes?: {[key: string]: number}\n  dpadAxes?: {\n    dpadX: {left: number, right: number},\n    dpadY: {up: number, down: number},\n  }\n  sticks: {[key: string]: string}\n  test: (gamepad: Gamepad) => boolean\n}\nexport interface GamepadMap {\n  [key: string]: GamepadMapConfig\n}\n\nconst MAPS: GamepadMap = {\n  'ps4-1': {\n    name: 'PS4 Controller (Chrome;macOS)',\n    buttons: ['cross','circle','square','triangle','l1','r1','l2','r2','extra','start','l3','r3','up','down','left','right','home','select'],\n    axes: ['lx','ly','rx','ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick'\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /54c.*5c4/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Chrome') && ua.includes('Mac OS X')\n    },\n  },\n  'ps4-2': {\n    name: 'PS4 Controller (Firefox;macOS)',\n    buttons: ['square','cross','circle','triangle','l1','r1','l2','r2','extra','start','l3','r3','home','select','up','down','left','right'],\n    // axes: ['lx','ly','rx','l2','r2','ry'],\n    axes: ['dpadX','dpadY','rx','l2','r2','ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick',\n    },\n    buttonAxes: {\n      l2:6,\n      r2:7,\n    },\n    dpadAxes: {\n      dpadX: {\n        left: -1,\n        right: 1,\n      },\n      dpadY: {\n        up: -1,\n        down: 1,\n      },\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /54c.*5c4/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Firefox') && ua.includes('Mac OS X')\n    },\n  },\n  'ps4-3': {\n    name: 'PS4 Controller (Firefox;Ubuntu)',\n    buttons: ['cross','circle','triangle','square','l1','r1','l2','r2','extra','start','home','l3','r3'],\n    axes: ['lx','ly','l2','rx','ry','r2','dpadX','dpadY'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick',\n    },\n    buttonAxes: {\n      l2:6,\n      r2:7,\n    },\n    dpadAxes: {\n      dpadX: {\n        left: -1,\n        right: 1,\n      },\n      dpadY: {\n        up: -1,\n        down: 1,\n      },\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /54c/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Firefox') && ua.includes('Ubuntu')\n    },\n  },\n  'ps4-4': {\n    name: 'PS4 Controller (Chrome;Linux;Wired)',\n    buttons: ['cross','circle','square','triangle','l1','r1','l2','r2','extra','start','l3','r3','up','down','left','right','home'],\n    axes: ['lx','ly','rx','ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick'\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /054c/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Chrome') && ua.includes('Linux')\n    },\n  },\n  'ps4-5': {\n    name: 'PS4 Controller (Chrome;Linux;Wireless)',\n    buttons: ['circle', 'triangle', 'cross', 'square', 'l1','r1','rx','ry','select','start','home','l3', 'up','down','left','right','r3', 'extra'],\n    axes: ['lx','ly','l2','r2'],\n    buttonAxes: {\n      rx:6,\n      ry:7,\n    },\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick'\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /054c/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Chrome') && ua.includes('Linux')\n    },\n  },\n\n}\nexport default MAPS\n","import InputManager, { InputState, InputController } from '../manager'\n\ndeclare module '../manager' {\n  interface InputManager {\n    keyboard: InputState<KeyState>\n  }\n}\n\nexport class KeyState {\n  down: boolean\n  constructor(down: boolean = false){\n    this.down = down\n  }\n}\n\nexport default class KeyboardController implements InputController {\n  state: InputState<KeyState>\n\n  constructor(){\n    this.state = new InputState(KeyState)\n\n    let func = (evt: KeyboardEvent)=>{\n      const {type, key, code} = evt\n\n      let down = type === 'keydown'\n\n      this.state.set(key, { down })\n      // we also want to set the code for this key.\n      // this is a layout independent code.\n      // ie. qwerty: D key -> key='d' -> code='KeyD'\n      //     dvorak: D key -> key='e' -> code='KeyD'\n      this.state.set(code, { down })\n    }\n\n    window.addEventListener('keydown', func, false)\n    window.addEventListener('keyup', func, false)\n  }\n  \n  install(manager: InputManager){\n    manager.keyboard = this.state\n  }\n}","\n// let listeners = []\nlet defaultKeyConfig = {\n  preventDefault: true\n}\nlet ps4Mapping = {\n  buttons: ['cross','circle','square','triangle','l1','r1','l2','r2','extra','start','l3','r3','up','down','left','right','home','select'],\n  axes: ['lx','ly','rx','ry'],\n  sticks: {\n    lx:'leftStick',\n    ly:'leftStick',\n    rx:'rightStick',\n    ry:'rightStick'\n  }\n}\n\nlet gamepadMaps = {\n  'Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 05c4)':ps4Mapping // ps4 controller\n}\n\nlet gamepadsAxisDeadZone = 0.08\nlet gamepadsConfig = {}\n\nlet mousePosPixel = {}\nlet prevMousePosPixel = {}\n// let gamepadTypeMaps = [{id:'054c',type:'ps4'}]\n\n// export class EventState<T> {\n//   event: T\n//   lastEvent: T\n//   set(event: T){\n//     // move current state to last state and set current\n//     this.lastEvent = this.event\n//     this.event = event\n//   }\n// }\n\ninterface IInputState<T> {\n  get(key: string): T\n}\nexport class InputState<T> {\n  state: {[key: string]: T} = {}\n  private _ctor: new ()=>T\n  constructor(ctor: new ()=>T){\n    this._ctor = ctor\n  }\n  get(key: string|number){\n    let val = this.state[key]\n    if(val == null) {\n      val = this.set(key, Reflect.construct(this._ctor, []))\n    }\n    return val\n  }\n  set(key: string|number, val: T): T {\n    return this.state[key] = val\n  }\n}\n\nexport interface InputController {\n  install(inputManager: InputManager): void\n  update?(time: number, delta: number): void\n}\n\nexport class InputManager {\n  inputControllers: InputController[] = []\n\n  constructor(controllers: InputController[] = []) {\n    controllers.forEach(c => this.addController(c))\n  }\n\n  addController(controller: InputController){\n    controller.install(this)\n    this.inputControllers.push(controller)\n  }\n  \n  // initTouch(){\n  //   // touch events\n  //   this.canvas.addEventListener('touchstart', function(evt) {\n  //     this.onMouseEvent('touchStart',this.canvas.el,evt)\n  //   }.bind(this), false)\n  \n  //   this.canvas.addEventListener('touchend', function(evt) {\n  //     this.onMouseEvent('touchEnd',this.canvas.el,evt)\n  //   }.bind(this), false)\n  \n  //   this.canvas.addEventListener('touchmove', function(evt) {\n  //     this.onMouseEvent('touchMove',this.canvas.el,evt)\n  //   }.bind(this), false)\n  \n  //   this.canvas.addEventListener('touchcancel', function(evt) {\n  //     this.onMouseEvent('touchCancel',this.canvas,evt)\n  //   }.bind(this), false)    \n  // }\n\n  update(time: number, delta: number){\n    this.inputControllers.forEach((controller)=>{\n      controller.update && controller.update(time, delta)\n    })\n  }\n\n}\n\nexport default InputManager\n","import InputManager, { InputController, InputState } from '../manager'\n\ndeclare module '../manager' {\n  interface InputManager {\n    mouse: InputState<MouseState>\n  }\n}\n\nexport class MouseState {\n  x: number\n  y: number\n  down: boolean\n  constructor(x: number = 0, y: number = 0, down: boolean = false){\n    this.x = x\n    this.y = y\n    this.down = down\n  }\n}\n\nexport default class MouseController implements InputController {\n  state: InputState<MouseState>\n\n  constructor(){\n    this.state = new InputState(MouseState)\n\n    window.addEventListener('mousemove', (evt: MouseEvent) => {\n      const {which, x, y} = evt\n      this.state.set(which, { x, y, down: false})\n    }, false)\n\n    window.addEventListener('mousedown', (evt: MouseEvent) => {\n      const {which, x, y} = evt\n      this.state.set(which, { x, y, down: true, })\n    }, false)\n    \n    window.addEventListener('mouseup', (evt: MouseEvent) => {\n      const {which, x, y} = evt\n      this.state.set(which, { x, y, down: false, })\n    }, false)\n  }\n\n  install(manager: InputManager){\n    manager.mouse = this.state\n  }\n}\n","declare global {\n  interface Window {\n    mozRequestAnimationFrame: Window['requestAnimationFrame']\n    oRequestAnimationFrame: Window['requestAnimationFrame']\n    msRequestAnimationFrame: Window['requestAnimationFrame']\n  }\n  interface HTMLCanvasElement {\n    transferControlToOffscreen(): OffscreenCanvas;\n  }\n\n  interface OffscreenCanvasRenderingContext2D extends CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath {\n    readonly canvas: OffscreenCanvas;\n  }\n  var OffscreenCanvasRenderingContext2D: {\n    prototype: OffscreenCanvasRenderingContext2D;\n    new(): OffscreenCanvasRenderingContext2D;\n  }\n  interface OffscreenCanvas extends EventTarget {\n    width: number;\n    height: number;\n    getContext(contextId: \"2d\", contextAttributes ? : CanvasRenderingContext2DSettings): OffscreenCanvasRenderingContext2D | null;\n  }\n  var OffscreenCanvas: {\n    prototype: OffscreenCanvas;\n    new(width: number, height: number): OffscreenCanvas;\n  }\n\n  interface Worker {\n    postMessage(message: any, transfer?: Array<Transferable|OffscreenCanvas>): void;\n  }\n}\n\nimport Ludic from './core/app'\n\nexport * from './core/app'\nexport * from './core/camera'\nexport * from './core/canvas'\n\nexport * from './render/renderer'\n\nexport * from './screen/screen'\nexport * from './screen/screenManager'\n\nexport * from './input/manager'\nexport * from './input/keyboard/controller'\nexport { default as KeyboardController } from './input/keyboard/controller'\nexport * from './input/mouse/controller'\nexport { default as MouseController } from './input/mouse/controller'\nexport * from './input/gamepad/controller'\nexport { default as GamepadController } from './input/gamepad/controller'\n\nexport * from './reactivity/dep'\nexport * from './reactivity/lambda'\nexport * from './reactivity/state'\n\nexport * from './asset/asset'\nexport * from './asset/assetLoader'\nexport * from './asset/assetManager'\nexport * from './asset/audioAsset'\nexport * from './asset/audioAssetLoader'\nexport * from './asset/imageAsset'\nexport * from './asset/imageAssetLoader'\n\nexport * from './utils/vector2'\n\nexport default Ludic\n","import Lambda from './lambda'\n\nlet id = 0\nconst stack: Array<Lambda> = []\n\nexport function pushLambda(l: Lambda){\n  stack.push(l)\n  Dep.lambda = l\n}\nexport function popLambda(){\n  stack.pop()\n  Dep.lambda = stack[stack.length - 1]\n}\n\nclass Dep {\n  static lambda: Lambda | null\n  id: number = id++\n  lambdas: Array<Lambda> = []\n\n  addLambda(lambda: Lambda){\n    this.lambdas.push(lambda)\n  }\n\n  removeLambda(lambda: Lambda){\n    const ix = this.lambdas.indexOf(lambda)\n    if(ix > -1){\n      this.lambdas.slice(ix, 1)\n    }\n  }\n\n  depend(){\n    if(Dep.lambda){\n      Dep.lambda.addDep(this)\n    }\n  }\n\n  notify(){\n    this.lambdas.forEach(lambda => lambda.update())\n  }\n}\n\nexport { Dep, Dep as default }","import Dep, { pushLambda, popLambda } from './dep'\n\nexport type LambdaFn<O> = (owner: O)=>any\n\n// export class WeakMapArray<T extends object> extends Array<T> {\n//   private _map = new WeakMap<T, Array<T>>()\n//   constructor(){\n//     super()\n//     return new Proxy(this, {\n//       set(this: WeakMapArray<T>, target, prop, value: T){\n//         if(!isNaN(prop as number)){\n//           if(!this._map.has(value)){\n            \n//           }\n//         }\n//         return Reflect.set(target, prop, value)\n//       }\n//     })\n//   }\n//   has(obj: T){\n//     return this._map.has(obj)\n//   }\n// }\n\nclass Lambda<O=any> {\n  owner: O\n  fn: LambdaFn<O>\n  value: any\n  depIds: Set<number> = new Set()\n  newDepIds: Set<number> = new Set()\n  deps: Array<Dep> = []\n  newDeps: Array<Dep> = []\n  \n  constructor(owner: O, fn: LambdaFn<O>){\n    this.owner = owner\n    this.fn = fn\n\n    this.compute()\n  }\n\n  addDep(dep: Dep){\n    if(!this.newDepIds.has(dep.id)){\n      this.newDepIds.add(dep.id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(dep.id)) {\n        dep.addLambda(this)\n      }\n    }\n  }\n\n  compute(){\n    pushLambda(this)\n    this.value = this.fn.call(this.owner, this.owner)\n    popLambda()\n    this.clean()\n  }\n\n  clean(){\n    this.deps.forEach(dep => {\n      if(!this.newDepIds.has(dep.id)){\n        dep.removeLambda(this)\n      }\n    })\n    // Swap Sets and Arrays and clear out new vars\n    let tmp: any = this.depIds\n    this.depIds = this.newDepIds\n    this.newDepIds = tmp\n    this.newDepIds.clear()\n    tmp = this.deps\n    this.deps = this.newDeps\n    this.newDeps = tmp\n    this.newDeps.length = 0\n  }\n\n  update(){\n    this.compute()\n  }\n\n\n}\n\nexport { Lambda, Lambda as default }","import Dep from './dep'\n\ntype Proxify<T> = {\n  [P in keyof T]: T[P];\n}\n\ninterface StateOptions<T> {\n  exclude?: Array<keyof T>\n  dep?: Dep\n}\n\nconst EXCLUDED_OBJECT_KEYS = Object.getOwnPropertyNames(Object.prototype)\nconst EXCLUDED_ARRAY_KEYS = Object.getOwnPropertyNames(Array.prototype)\n\nconst DEP_MAP = new WeakMap()\n\nclass State<T extends object> {\n\n  static create<T extends object>(value: T, opts: StateOptions<T> = {}): Proxify<T> {\n    if(typeof value !== 'object' || value == null || value.hasOwnProperty('__state__')){\n      return value\n    }\n    return new State(value, opts) as Proxify<T>\n  }\n  static dep<T extends object>(state: State<T>): Dep {\n    return DEP_MAP.get(state)\n  }\n\n  private constructor(value: T, opts: StateOptions<T> = {}) {\n    const depMap = new Map<string|number|symbol, Dep>()\n    const getDep = (prop: string|number|symbol)=>{\n      let dep = depMap.get(prop)\n      if(dep) return dep\n      dep = new Dep()\n      depMap.set(prop, dep)\n      return dep\n    }\n\n    const {\n      exclude = [],\n      dep,\n    } = opts\n    \n    const EXCLUDE_KEYS: Set<string|number|symbol> = new Set(exclude)\n\n    if(Array.isArray(value)){\n      EXCLUDED_ARRAY_KEYS.forEach(k => EXCLUDE_KEYS.add(k))\n      value = ReactiveArray.create(value)\n    } else {\n      EXCLUDED_OBJECT_KEYS.forEach(k => EXCLUDE_KEYS.add(k))\n    }\n\n    if(value != null){\n      Object.defineProperty(value, '__state__', { value: this, enumerable: false, configurable: true, writable: true })\n    }\n\n    let proxy = new Proxy(value, {\n      get(target, prop){\n        const value = Reflect.get(target, prop)\n        if(EXCLUDE_KEYS.has(prop)) return value\n        const dep = getDep(prop)\n        if(Dep.lambda){\n          dep.depend()\n        }\n        return State.create(value, {dep})\n      },\n      set(target, prop, newValue){\n        const value = Reflect.get(target, prop)\n        if(EXCLUDE_KEYS.has(prop)){\n          return Reflect.set(target, prop, newValue)\n        }\n        const dep = getDep(prop)\n        if(value === newValue){\n          return true\n        }\n        const didSet = Reflect.set(target, prop, State.create(newValue, {dep}))\n        dep.notify()\n        return didSet\n      }\n    })\n    if(!DEP_MAP.has(proxy) && dep != null){\n      DEP_MAP.set(proxy, dep)\n    }\n    return proxy\n  }\n}\n\nexport { State, State as default }\n\nclass ReactiveArray<T> extends Array<T> {\n  private constructor(...args: any[]) {\n    super(...args)\n    Object.setPrototypeOf(this, Object.create(ReactiveArray.prototype))\n  }\n  static create<V>(value: V): V {\n    return new ReactiveArray(value) as unknown as V\n  }\n  static notify<T>(arr: ReactiveArray<T>){\n    const dep = State.dep(arr)\n    dep && dep.notify()\n  }\n  // static from(...args: any[]){\n  //   let arr = super.from.apply(super, args)\n    \n  // }\n\n  push(...items: T[]){\n    const res = Array.prototype.push.call(this, ...items)\n    ReactiveArray.notify(this)\n    return res\n  }\n  pop(){\n    const res = super.pop()\n    ReactiveArray.notify(this)\n    return res\n  }\n  shift(){\n    const res = super.shift()\n    ReactiveArray.notify(this)\n    return res\n  }\n  unshift(...items: T[]){\n    const res = super.unshift(...items)\n    ReactiveArray.notify(this)\n    return res\n  }\n  splice(start: number, deleteCount: number, ...items: T[]){\n    const res = super.splice(start, deleteCount, ...items)\n    ReactiveArray.notify(this)\n    return res\n  }\n  sort(compareFn?: (a: T, b: T) => number){\n    const res = super.sort(compareFn)\n    ReactiveArray.notify(this)\n    return res\n  }\n  reverse(){\n    const res = super.reverse()\n    ReactiveArray.notify(this)\n    return res\n  }\n}\n","// We omit 'canvas' because it is not assignable\nexport type OffscreenCanvasRenderingContext2DKeys = keyof Pick<OffscreenCanvasRenderingContext2D, Exclude<keyof OffscreenCanvasRenderingContext2D, 'canvas'>>\nexport interface RenderingContextComponent {\n  name: OffscreenCanvasRenderingContext2DKeys\n}\nexport class RenderingContextFunctionComponent implements RenderingContextComponent {\n  name: OffscreenCanvasRenderingContext2DKeys\n  args: any[]\n  constructor(name: OffscreenCanvasRenderingContext2DKeys, args: any[] = []){\n    this.name = name\n    this.args = args\n  }\n}\nexport class RenderingContextPropertyComponent implements RenderingContextComponent {\n  name: OffscreenCanvasRenderingContext2DKeys\n  value: any\n  constructor(name: OffscreenCanvasRenderingContext2DKeys, value: any){\n    this.name = name\n    this.value = value\n  }\n}\n\nexport class RenderingContext implements OffscreenCanvasRenderingContext2D {\n\n  static render(renderingContext: RenderingContext, ctx: OffscreenCanvasRenderingContext2D){\n    renderingContext.$components.forEach((comp) => {\n      if(this.componentIsFunction(comp)){\n        (ctx[comp.name] as ()=>void).apply(ctx, comp.args)\n      } else if(this.componentIsProperty(comp)){\n        ctx[comp.name] = comp.value\n      }\n    })\n  }\n  static componentIsFunction(comp: RenderingContextComponent): comp is RenderingContextFunctionComponent {\n    return comp.hasOwnProperty('args')\n  }\n  static componentIsProperty(comp: RenderingContextComponent): comp is RenderingContextPropertyComponent {\n    return comp.hasOwnProperty('value')\n  }\n\n  $components: RenderingContextComponent[] = []\n  canvas: HTMLCanvasElement;\n\n  restore(): void {\n    this.$components.push(new RenderingContextFunctionComponent('restore'))\n  }\n  save(): void {\n    this.$components.push(new RenderingContextFunctionComponent('save'))\n  }\n  getTransform(): DOMMatrix {\n    throw new Error('Method not implemented.');\n  }\n  resetTransform(): void {\n    throw new Error('Method not implemented.');\n  }\n  rotate(angle: number): void {\n    throw new Error('Method not implemented.');\n  }\n  scale(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;\n  setTransform(transform?: DOMMatrix2DInit): void;\n  setTransform(a?: any, b?: any, c?: any, d?: any, e?: any, f?: any) {\n    throw new Error('Method not implemented.');\n  }\n  transform(a: number, b: number, c: number, d: number, e: number, f: number): void {\n    throw new Error('Method not implemented.');\n  }\n  translate(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  globalAlpha: number;\n  globalCompositeOperation: string;\n  imageSmoothingEnabled: boolean;\n  imageSmoothingQuality: ImageSmoothingQuality;\n  fillStyle: string | CanvasGradient | CanvasPattern;\n  strokeStyle: string | CanvasGradient | CanvasPattern;\n  createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient {\n    throw new Error('Method not implemented.');\n  }\n  createPattern(image: CanvasImageSource, repetition: string): CanvasPattern {\n    throw new Error('Method not implemented.');\n  }\n  createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient {\n    throw new Error('Method not implemented.');\n  }\n  shadowBlur: number;\n  shadowColor: string;\n  shadowOffsetX: number;\n  shadowOffsetY: number;\n  filter: string;\n  clearRect(x: number, y: number, w: number, h: number): void {\n    throw new Error('Method not implemented.');\n  }\n  fillRect(x: number, y: number, w: number, h: number): void {\n    throw new Error('Method not implemented.');\n  }\n  strokeRect(x: number, y: number, w: number, h: number): void {\n    this.$components.push(new RenderingContextFunctionComponent('strokeRect', [x,y,w,h]))\n  }\n  beginPath(): void {\n    throw new Error('Method not implemented.');\n  }\n  clip(fillRule?: CanvasFillRule): void;\n  clip(path: Path2D, fillRule?: CanvasFillRule): void;\n  clip(path?: any, fillRule?: any) {\n    throw new Error('Method not implemented.');\n  }\n  fill(fillRule?: CanvasFillRule): void;\n  fill(path: Path2D, fillRule?: CanvasFillRule): void;\n  fill(path?: any, fillRule?: any) {\n    throw new Error('Method not implemented.');\n  }\n  // @ts-ignore\n  isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;\n  isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;\n  isPointInPath(path: any, x: any, y?: any, fillRule?: any) {\n    this.$components.push(new RenderingContextFunctionComponent('restore'))\n  }\n  // @ts-ignore\n  isPointInStroke(x: number, y: number): boolean;\n  isPointInStroke(path: Path2D, x: number, y: number): boolean;\n  isPointInStroke(path: any, x: any, y?: any) {\n    throw new Error('Method not implemented.');\n  }\n  stroke(): void;\n  stroke(path: Path2D): void;\n  stroke(path?: any) {\n    throw new Error('Method not implemented.');\n  }\n  drawFocusIfNeeded(element: Element): void;\n  drawFocusIfNeeded(path: Path2D, element: Element): void;\n  drawFocusIfNeeded(path: any, element?: any) {\n    throw new Error('Method not implemented.');\n  }\n  scrollPathIntoView(): void;\n  scrollPathIntoView(path: Path2D): void;\n  scrollPathIntoView(path?: any) {\n    throw new Error('Method not implemented.');\n  }\n  fillText(text: string, x: number, y: number, maxWidth?: number): void {\n    throw new Error('Method not implemented.');\n  }\n  measureText(text: string): TextMetrics {\n    throw new Error('Method not implemented.');\n  }\n  strokeText(text: string, x: number, y: number, maxWidth?: number): void {\n    throw new Error('Method not implemented.');\n  }\n  drawImage(image: CanvasImageSource, dx: number, dy: number): void;\n  drawImage(image: CanvasImageSource, dx: number, dy: number, dw: number, dh: number): void;\n  drawImage(image: CanvasImageSource, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\n  drawImage(image: any, sx: any, sy: any, sw?: any, sh?: any, dx?: any, dy?: any, dw?: any, dh?: any) {\n    throw new Error('Method not implemented.');\n  }\n  // @ts-ignore\n  createImageData(sw: number, sh: number): ImageData;\n  createImageData(imagedata: ImageData): ImageData;\n  createImageData(sw: any, sh?: any) {\n    throw new Error('Method not implemented.');\n  }\n  getImageData(sx: number, sy: number, sw: number, sh: number): ImageData {\n    throw new Error('Method not implemented.');\n  }\n  putImageData(imagedata: ImageData, dx: number, dy: number): void;\n  putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;\n  putImageData(imagedata: any, dx: any, dy: any, dirtyX?: any, dirtyY?: any, dirtyWidth?: any, dirtyHeight?: any) {\n    throw new Error('Method not implemented.');\n  }\n  lineCap: CanvasLineCap;\n  lineDashOffset: number;\n  lineJoin: CanvasLineJoin;\n  // lineWidth: number;\n  set lineWidth(val: number){\n    this.$components.push(new RenderingContextPropertyComponent('lineWidth', val))\n  }\n  miterLimit: number;\n  getLineDash(): number[] {\n    throw new Error('Method not implemented.');\n  }\n  setLineDash(segments: number[]): void {\n    throw new Error('Method not implemented.');\n  }\n  direction: CanvasDirection;\n  font: string;\n  textAlign: CanvasTextAlign;\n  textBaseline: CanvasTextBaseline;\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void {\n    throw new Error('Method not implemented.');\n  }\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  closePath(): void {\n    throw new Error('Method not implemented.');\n  }\n  ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n  lineTo(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  moveTo(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  rect(x: number, y: number, w: number, h: number): void {\n    throw new Error('Method not implemented.');\n  }\n\n\n}\n","import ScreenManager from './screenManager'\n\nexport class Screen {\n  $id!: number\n  $manager!: ScreenManager\n\n  options: any\n\n  _isFinished: boolean\n  _finalData: any\n\n  constructor(options: any = {}) {\n    this.options = options\n  }\n\n  // _step(delta,...rest){\n  //   if(!this._isFinished){\n  //     this.update.apply(this,arguments)\n  //   }\n  // }\n\n  // override\n  update(delta: any, ...args: any[]){}\n\n  finish(data: any){\n    if(!this._isFinished){\n      this.onDestroy()\n      this._finalData = data || {}\n      this._isFinished = true\n    }\n  }\n\n  onDestroy(){}\n  /**\n   * \n   * @param manager ScreenManager that called this.\n   * @param finalData the final data from the previous screen\n   */\n  onAddedToManager(manager: ScreenManager, finalData?: any){}\n  onRemovedFromManager(manager: ScreenManager){}\n\n  // $mapMethods(component, mapping){\n  //   for(let key in mapping){\n  //     component.$on[mapping[key]] = this[key].bind(this)\n  //   }\n  //   return component\n  // }\n}\n\nexport default Screen","import Screen from './screen'\n\nlet idIncrementer = 1\n\nexport interface ScreenManagerListener {\n  onScreenFinished(screen: Screen, manager: ScreenManager, finalData: Screen['_finalData']): void\n  onScreenAdded(screen: Screen, manager: ScreenManager, replace: boolean): void\n  onScreensRemoved(screens: Screen[], manager: ScreenManager): void\n  onWarnPopScreen(stack: Screen[], manager: ScreenManager): void\n}\nconst LISTENER_METHODS: Array<string> = ['onScreenAdded', 'onScreenFinished', 'onScreensRemoved', 'onWarnPopScreen']\n\nfunction isListenerMethod(prop: string): prop is keyof ScreenManagerListener {\n  return LISTENER_METHODS.includes(prop)\n}\n\nexport class ScreenManager {\n  \n  private _stack: Screen[]\n  private _listeners: ScreenManagerListener[] & ScreenManagerListener\n\n\n  constructor() {\n    // this.$app = app\n\n    // define private properties\n    this._listeners = new Proxy([],{\n      get(target: Array<ScreenManagerListener>, prop: string){\n        if(isListenerMethod(prop)){\n          return (...args: any[])=>{\n            // only call prop if it exists\n            //  this allows for the 'listener' to not be a 'ScreenEventListener' but any object that defines its properties\n            target.forEach((e: ScreenManagerListener) => {\n              e[prop] != null ? e[prop].call(e,...args) : undefined\n            })\n          }\n        }\n        return target[prop as any]\n      }\n    }) as ScreenManagerListener[] & ScreenManagerListener\n    this._stack = []\n  }\n\n  private getNewId(){\n    return idIncrementer++\n  }\n\n  update(delta: number){\n    let stack = this._stack\n    if(stack.length > 0){\n      let screen = stack[stack.length-1]\n\n      if(screen._isFinished){\n        this._listeners.onScreenFinished(screen, this, screen._finalData)\n      } else {\n        screen.update.apply(screen, arguments)\n      }\n    }\n  }\n\n  addScreen(screen: Screen, replace: boolean = false, finalData?: any){\n    let stack = this._stack\n    // give the screen a ref to the manager and the app\n    screen.$manager = this\n    // screen.$app = this.$app\n    // give the screen an id\n    screen.$id = this.getNewId()\n    if(replace){\n      const [rm] = this.popScreen()\n      if(rm != null){\n        finalData = rm._finalData\n      }\n    }\n    stack.push(screen)\n    // call screen's callback\n    screen.onAddedToManager(this, finalData)\n    // call listener methods\n    this._listeners.onScreenAdded(screen, this, replace)\n  }\n\n  popScreen(){\n    let stack = this._stack\n    if(stack.length > 0){\n      let screen = stack.pop()\n      // call screen's callback\n      screen.onRemovedFromManager(this)\n      // call listener methods\n      this._listeners.onScreensRemoved([screen], this)\n      return [screen]\n    } else {\n      // cannot pop the last screen, only replace.\n      this._listeners.onWarnPopScreen(stack, this)\n      return []\n    }\n  }\n\n  popToScreen(screen: Screen){\n    let stack = this._stack\n    if(!screen.hasOwnProperty('$id')){\n      return false\n    }\n    let index = stack.findIndex((s)=>{\n      return s.$id === screen.$id\n    })\n    if(index === -1){\n      return false\n    } else {\n      let screensRemoved = stack.splice(index)\n      // call screen callback method\n      screensRemoved.slice().reverse().forEach(screen => screen.onRemovedFromManager(this))\n      // call listener method\n      this._listeners.onScreensRemoved(screensRemoved, this)\n      return screensRemoved\n    }\n  }\n\n  addScreenEventListener(listener: ScreenManagerListener){\n    this._listeners.push(listener)\n  }\n\n  // getNewScreenEventListener(alsoAdd){\n  //   let listener = new ScreenEventListener()\n  //   if(alsoAdd){\n  //     this.addScreenEventListener(listener)\n  //   }\n  //   return listener\n  // }\n}\n\n// ScreenManager.ScreenEventListener = ScreenEventListener\n\nexport default ScreenManager","/**\n * Interface for all Components. A Component is intended as a data holder and provides data to be processed in an\n * [[System]]. But do as you wish.\n * [[System]]s have no state and [[Component]]s have no behavior!!!!!\n */\nexport const ComponentSymbol = Symbol.for('Component')\nexport default abstract class Component {\n  protected [ComponentSymbol] = true\n}","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\n// https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/utils/Bits.java\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_(Zero-fill_right_shift)\nexport default class Bits {\n  bits: Uint8Array\n\n  constructor(length?: number){\n    if(length){\n      this.bits = new Uint8Array(length)\n    } else {\n      this.bits = new Uint8Array()\n    }\n  }\n\n  /** @param index the index of the bit\n\t * @return whether the bit is set\n\t * @throws ArrayIndexOutOfBoundsException if index < 0 */\n\tpublic get(index: number): boolean {\n\t\t// const word: number = index >>> 6\n\t\t// if (word >= this.bits.length) return false\n\t\t// return (this.bits[word] & (1 << (index & 0x3F))) != 0\n    return !!this.bits[index]\n  }\n\n  /** @param index the index of the bit to set\n\t * @throws ArrayIndexOutOfBoundsException if index < 0 */\n\tpublic set(index: number): void {\n\t\t// const word: number = index >>> 6\n\t\tthis.checkCapacity(index)\n\t\t// this.bits[word] |= 1 << (index & 0x3F)\n    // TODO not being set, because length is 0\n    this.bits[index] = 1\n\t}\n\n  private checkCapacity(len: number): void {\n\t\tif (len >= this.bits.length) {\n\t\t\tconst newBits: Uint8Array = new Uint8Array(len + 1)\n\t\t\tnewBits.set(this.bits)\n\t\t\tthis.bits = newBits\n\t\t}\n\t}\n\n  /** @param index the index of the bit to clear\n\t * @throws ArrayIndexOutOfBoundsException if index < 0 */\n\tpublic clear(index: number): void {\n\t\tif(index >= this.bits.length) return\n\t\tthis.bits[index] = 0\n    let last = this.bits.lastIndexOf(1)\n    this.bits = this.bits.slice(0, last + 1)\n\t}\n\n  /** Returns the \"logical size\" of this bitset: the index of the highest set bit in the bitset plus one. Returns zero if the\n\t * bitset contains no set bits.\n\t *\n\t * @return the logical size of this bitset */\n\tpublic length(): number {\n    return this.bits.length\n    // TODO\n\t\t// let bits: Uint8Array = this.bits\n\t  // for(let word: number = bits.length - 1; word >= 0; --word) {\n\t\t//   let bitsAtWord = bits[word]\n\t\t//   if (bitsAtWord != 0) {\n\t\t// \t  for (let bit = 63; bit >= 0; --bit) {\n\t\t// \t\t  if ((bitsAtWord & (1 << (bit & 0x3F))) != 0) {\n\t\t// \t\t\t  return (word << 6) + bit + 1\n\t\t// \t\t  }\n\t\t// \t  }\n\t\t//   }\n\t  // }\n\t  // return 0\n  }\n\n\n  /** @return true if this bitset contains no bits that are set to true */\n\tpublic isEmpty(): boolean{\n\t\tconst length: number = this.bits.length\n\t\tfor(let i=0; i<length; i++) {\n\t\t\tif (this.bits[i] != 0) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n  }\n\n\n  /** Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit\n\t * exists then -1 is returned. */\n\tpublic nextSetBit(fromIndex: number = 0): number {\n    return this.bits.indexOf(1, fromIndex)\n  }\n\n  /** Performs a logical <b>AND</b> of this target bit set with the argument bit set. This bit set is modified so that each bit in\n\t * it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument\n\t * also had the value true.\n\t * @param other a bit set */\n\tpublic and(other: Bits): void {\n\t\tlet commonWords: number = Math.min(this.bits.length, other.bits.length);\n\t\tfor (let i = 0; commonWords > i; i++) {\n\t\t\tthis.bits[i] &= other.bits[i];\n\t\t}\n\n\t\tif (this.bits.length > commonWords) {\n\t\t\tfor (let i = commonWords, s = this.bits.length; s > i; i++) {\n\t\t\t\tthis.bits[i] = 0\n\t\t\t}\n\t\t}\n  }\n\n  /** Clears all of the bits in this bit set whose corresponding bit is set in the specified bit set.\n\t *\n\t * @param other a bit set */\n\tpublic andNot(other: Bits): void {\n\t\tfor (let i = 0, j = this.bits.length, k = other.bits.length; i < j && i < k; i++) {\n\t\t\tthis.bits[i] &= ~other.bits[i]\n\t\t}\n  }\n\n  /** Performs a logical <b>OR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the\n\t * value true if and only if it either already had the value true or the corresponding bit in the bit set argument has the\n\t * value true.\n\t * @param other a bit set */\n\tpublic or(other: Bits): void {\n\t\tlet commonWords: number = Math.min(this.bits.length, other.bits.length);\n\t\tfor (let i=0; commonWords > i; i++) {\n\t\t\tthis.bits[i] |= other.bits[i];\n\t\t}\n\n\t\tif(commonWords < other.bits.length) {\n\t\t\tthis.checkCapacity(other.bits.length);\n\t\t\tfor (let  i = commonWords, s = other.bits.length; s > i; i++) {\n\t\t\t\tthis.bits[i] = other.bits[i];\n\t\t\t}\n\t\t}\n  }\n\n\t/** Performs a logical <b>XOR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has\n\t * the value true if and only if one of the following statements holds:\n\t * <ul>\n\t * <li>The bit initially has the value true, and the corresponding bit in the argument has the value false.</li>\n\t * <li>The bit initially has the value false, and the corresponding bit in the argument has the value true.</li>\n\t * </ul>\n\t * @param other */\n\tpublic xor(other: Bits): void {\n\t\tlet commonWords = Math.min(this.bits.length, other.bits.length);\n\n\t\tfor (let i = 0; commonWords > i; i++) {\n\t\t\tthis.bits[i] ^= other.bits[i];\n\t\t}\n\n\t\tif (commonWords < other.bits.length) {\n\t\t\tthis.checkCapacity(other.bits.length);\n\t\t\tfor(let i = commonWords, s = other.bits.length; s > i; i++) {\n\t\t\t\tthis.bits[i] = other.bits[i];\n\t\t\t}\n\t\t}\n\t}\n\n  /** Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.\n\t *\n\t * @param other a bit set\n\t * @return boolean indicating whether this bit set intersects the specified bit set */\n\tpublic intersects(other: Bits): boolean {\n\t\tlet bits = this.bits\n\t  let otherBits = other.bits\n\t  for (let i=Math.min(bits.length, otherBits.length) - 1; i >= 0; i--) {\n\t\t  if ((bits[i] & otherBits[i]) != 0) {\n\t\t\t  return true\n\t\t  }\n\t  }\n\t  return false\n  }\n\n  /** Returns true if this bit set is a super set of the specified set, i.e. it has all bits set to true that are also set to true\n\t * in the specified BitSet.\n\t *\n\t * @param other a bit set\n\t * @return boolean indicating whether this bit set is a super set of the specified set */\n\tpublic containsAll(other: Bits): boolean {\n\t\tconst bits = this.bits\n\t\tconst otherBits = other.bits\n\t  const otherBitsLength: number = otherBits.length\n\t  const bitsLength: number = bits.length\n\n\t  for (let i=bitsLength; i<otherBitsLength; i++) {\n\t\t  if(otherBits[i] != 0){\n\t\t\t  return false\n\t\t  }\n\t  }\n\t  for (let i=Math.min(bitsLength, otherBitsLength) - 1; i>=0; i--) {\n\t\t  if ((bits[i] & otherBits[i]) != otherBits[i]) {\n\t\t\t  return false\n\t\t  }\n\t  }\n\t  return true\n  }\n\n  public hashCode(): number {\n\t\tconst word: number = this.length() >>> 6\n\t\tlet hash: number = 0\n\t\tfor(let i = 0; word >= i; i++) {\n\t\t\thash = 127 * hash + (this.bits[i] ^ (this.bits[i] >>> 32))\n\t\t}\n\t\treturn hash;\n  }\n\n  public equals(obj: any): boolean {\n\t\tif(this == obj)\n\t\t\treturn true\n\t\tif(obj == null)\n\t\t\treturn false\n\n\t\tlet other: Bits = <Bits>obj\n\t\tlet otherBits = other.bits\n\n\t\tlet commonWords = Math.min(this.bits.length, otherBits.length);\n\t\tfor(let i = 0; commonWords > i; i++) {\n\t\t\tif(this.bits[i] != otherBits[i])\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (this.bits.length == otherBits.length)\n\t\t\treturn true;\n\n\t\treturn this.length() == other.length()\n  }\n}\n","import Component from './Component'\nimport Bits from './Bits'\nimport Klass from './Klass'\n\n/**\n * Uniquely identifies a {@link Component} sub-class. It assigns them an index which is used internally for fast comparison and\n * retrieval. See {@link Family} and {@link Entity}. ComponentType is a package protected class. You cannot instantiate a\n * ComponentType. They can only be accessed via {@link #getIndexFor(Class<? extends Component>)}. Each component class will always\n * return the same instance of ComponentType.\n * @author Stefan Bachmann\n */\nexport default class ComponentType {\n  private static classMap = new WeakMap<Klass<any>, ComponentType>()\n  private static typeIndex: number = 0\n\tprivate index: number\n\n\tconstructor(){\n\t\tthis.index = ComponentType.typeIndex++\n\t}\n\n\t/** @return This ComponentType's unique index */\n\tpublic getIndex(): number {\n\t\treturn this.index\n\t}\n\n\tpublic static reset(): void {\n\t\tthis.typeIndex = 0\n\t}\n\n\t/**\n\t * @param componentType The {@link Component} class\n\t * @return A ComponentType matching the Component Class\n\t */\n\tpublic static getFor<T>(componentClass: Klass<T>): ComponentType {\n\t\tlet componentType: ComponentType | undefined = ComponentType.classMap.get(componentClass)\n\t\tif(!componentType){\n\t\t\tcomponentType = new ComponentType()\n      ComponentType.classMap.set(componentClass, componentType)\n\t\t}\n\n\t\treturn componentType\n\t}\n\n\t/**\n\t * Quick helper method. The same could be done via {@link ComponentType.getFor(Class<? extends Component>)}.\n\t * @param componentType The {@link Component} class\n\t * @return The index for the specified {@link Component} Class\n\t */\n\tpublic static getIndexFor<T>(componentClass: Klass<T>): number {\n\t\treturn this.getFor(componentClass).getIndex()\n\t}\n\n\t/**\n\t * @param componentTypes list of {@link Component} classes\n\t * @return Bits representing the collection of components for quick comparison and matching. See\n\t *         {@link Family#getFor(Bits, Bits, Bits)}.\n\t */\n\tpublic static getBitsFor<T extends Component>(componentClasses: Array<Klass<T>>): Bits {\n\t  let bits: Bits = new Bits()\n\n\t\tconst typesLength: number = componentClasses.length\n\t\tfor(let i=0; i<typesLength; i++){\n\t\t\tbits.set(ComponentType.getIndexFor(componentClasses[i]))\n\t\t}\n\n\t\treturn bits\n\t}\n\n\n\tpublic hashCode(): number {\n\t\treturn this.index\n\t}\n\n\tpublic equals(obj: Object): boolean {\n\t\tif(this == obj) return true\n\t\tif(obj == null) return false\n\t\tif(this.constructor.prototype != obj.constructor.prototype) return false\n\t\tlet other: ComponentType = obj as ComponentType\n\t\treturn this.index == other.index;\n\t}\n}\n","import Component from './Component'\nimport ComponentType from './ComponentType'\nimport Entity from './Entity'\nimport Klass from './Klass'\n\n/**\n * Provides super fast {@link Component} retrieval from {@Link Entity} objects.\n * @param <T> the class type of the {@link Component}.\n * @author David Saltares\n */\nexport default class ComponentMapper<T extends Component> {\n\tprivate componentType: ComponentType\n\n  constructor(componentClass: Klass<T>){\n\t\tthis.componentType = ComponentType.getFor(componentClass)\n  }\n\n\t/**\n\t * @param componentClass Component class to be retrieved by the mapper.\n\t * @return New instance that provides fast access to the {@link Component} of the specified class.\n\t */\n\tpublic static getFor<T extends Component>(componentClass: Klass<T>): ComponentMapper<T> {\n\t\treturn new ComponentMapper<T>(componentClass)\n\t}\n\n\t/** @return The {@link Component} of the specified class belonging to entity. */\n\tpublic get(entity: Entity): T | undefined {\n\t\treturn entity.getComponent<T>(this.componentType)\n\t}\n\n\t/** @return Whether or not entity has the component of the specified class. */\n\tpublic has(entity: Entity): boolean {\n\t\treturn entity.hasComponent(this.componentType)\n\t}\n}\n","// https://github.com/libgdx/ashley/blob/master/ashley/src/com/badlogic/ashley/core/Family.java\n\nimport Bits from './Bits'\nimport Component from './Component'\nimport ComponentType from './ComponentType'\nimport Entity from './Entity'\nimport Klass from './Klass'\n\n/**\n * Represents a group of [[Component]]s. It is used to describe what [[Entity]] objects a [[System]] should\n * process. Example: {@code Family.all(PositionComponent.class, VelocityComponent.class).get()} Families can't be instantiated\n * directly but must be accessed via a builder ( start with {@code Family.all()}, {@code Family.one()} or {@code Family.exclude()}\n * ), this is to avoid duplicate families that describe the same components.\n */\nconst ZERO_BITS = new Bits()\n\nexport default class Family {\n  static Builder = class {\n\t  allBits: Bits = ZERO_BITS\n\t  oneBits: Bits = ZERO_BITS\n\t  excludeBits: Bits = ZERO_BITS\n\n\n\t  /**\n\t   * Resets the builder instance\n\t   * @return A Builder singleton instance to get a family\n\t   */\n\t  public reset() {\n\t\t  this.allBits = ZERO_BITS\n\t\t  this.oneBits = ZERO_BITS\n\t\t  this.excludeBits = ZERO_BITS\n\t\t  return this\n\t  }\n\n\t  /**\n\t   * @param componentTypes entities will have to contain all of the specified components.\n\t   * @return A Builder singleton instance to get a family\n\t   */\n\t  public all(componentClasses: Array<Klass<any>>) {\n\t\t  this.allBits = ComponentType.getBitsFor(componentClasses)\n\t\t  return this\n\t  }\n\n\t  /**\n\t   * @param componentTypes entities will have to contain at least one of the specified components.\n\t   * @return A Builder singleton instance to get a family\n\t   */\n\t  public one(componentClasses: Array<Klass<any>>) {\n\t\t  this.oneBits = ComponentType.getBitsFor(componentClasses)\n\t\t  return this\n\t  }\n\n\t  /**\n\t   * @param componentTypes entities cannot contain any of the specified components.\n\t   * @return A Builder singleton instance to get a family\n\t   */\n\t  public exclude(componentClasses: Array<Klass<any>>) {\n\t\t  this.excludeBits = ComponentType.getBitsFor(componentClasses)\n\t\t  return this\n\t  }\n\n\t  /** @return A family for the configured component types */\n\t  public get(): Family {\n\t  \tlet hash: string = Family.getFamilyHash(this.allBits, this.oneBits, this.excludeBits)\n\t  \tlet family = Family.families.get(hash)\n\t  \tif(!family){\n\t  \t\tfamily = new Family(this.allBits, this.oneBits, this.excludeBits)\n\t  \t\tFamily.families.set(hash, family)\n\t  \t}\n\t  \treturn family\n\t  }\n  }\n\n  private static families: Map<String, Family> = new Map<String, Family>()\n\tprivate static familyIndex: number = 0\n\tprivate static readonly builder = new Family.Builder()\n\tprivate static readonly zeroBits: Bits = new Bits()\n\n\tprivate allBits: Bits\n\tprivate oneBits: Bits\n\tprivate excludeBits: Bits\n\tprivate index: number\n\n\t/** Private constructor, use static method Family.getFamilyFor() */\n\tconstructor(allBits: Bits, anyBits: Bits, excludeBits: Bits) {\n\t\tthis.allBits = allBits\n\t\tthis.oneBits = anyBits\n\t\tthis.excludeBits = excludeBits\n\t\tthis.index = Family.familyIndex++\n\t}\n\n\t/** @return This family's unique index */\n\tpublic getIndex(): number {\n\t\treturn this.index\n\t}\n\n\t/** @return Whether the entity matches the family requirements or not */\n\tpublic matches(entity: Entity): boolean {\n\t\tconst entityComponentBits: Bits = entity.getComponentBits()\n\n\t\tif (!entityComponentBits.containsAll(this.allBits)) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (!this.oneBits.isEmpty() && !this.oneBits.intersects(entityComponentBits)) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (!this.excludeBits.isEmpty() && this.excludeBits.intersects(entityComponentBits)) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn true\n\t}\n\n\t/**\n\t * @param componentTypes entities will have to contain all of the specified components.\n\t * @return A Builder singleton instance to get a family\n\t */\n\tpublic static all(componentClasses: Array<Klass<any>>) {\n\t\treturn this.builder.reset().all(componentClasses)\n\t}\n\n\t/**\n\t * @param componentTypes entities will have to contain at least one of the specified components.\n\t * @return A Builder singleton instance to get a family\n\t */\n\tpublic static one(componentClasses: Array<Klass<any>>) {\n\t\treturn this.builder.reset().one(componentClasses)\n\t}\n\n\t/**\n\t * @param componentTypes entities cannot contain any of the specified components.\n\t * @return A Builder singleton instance to get a family\n\t */\n\tpublic static exclude(componentClasses: Array<Klass<any>>) {\n\t\treturn this.builder.reset().exclude(componentClasses)\n\t}\n\n\tpublic hashCode(): number {\n\t\treturn this.index\n\t}\n\n\tpublic equals(family: Family): boolean {\n\t\treturn this == family\n\t}\n\n\tprivate static getFamilyHash(allBits: Bits, oneBits: Bits, excludeBits: Bits): string {\n\t\tlet hash = \"\"\n\t\tif (!allBits.isEmpty()) {\n\t\t\thash = hash + \"{all:\" + this.getBitsString(allBits) + \"}\"\n\t  }\n\t\tif (!oneBits.isEmpty()) {\n      hash = hash + \"{one:\" + this.getBitsString(oneBits) + \"}\"\n\t\t}\n\t\tif (!excludeBits.isEmpty()) {\n      hash = hash + \"{exclude:\" + this.getBitsString(excludeBits) + \"}\"\n\t\t}\n\t\treturn hash\n\t}\n\n\tprivate static getBitsString(bits: Bits): string {\n    let bitString = \"\"\n\t\tconst numBits: number = bits.length()\n\t\tfor (let i=0; i<numBits; ++i) {\n      bitString += bits.get(i) ? \"1\" : \"0\"\n\t\t}\n\t\treturn bitString\n  }\n\n}\n\n\n// export class Builder {\n// \tprivate allBits: Bits = ZERO_BITS\n// \tprivate oneBits: Bits = ZERO_BITS\n// \tprivate excludeBits: Bits = ZERO_BITS\n\n// \tconstructor(){}\n\n// \t/**\n// \t * Resets the builder instance\n// \t * @return A Builder singleton instance to get a family\n// \t */\n// \tpublic reset(): Builder {\n// \t\tthis.allBits = ZERO_BITS\n// \t\tthis.oneBits = ZERO_BITS\n// \t\tthis.excludeBits = ZERO_BITS\n// \t\treturn this\n// \t}\n\n// \t/**\n// \t * @param componentTypes entities will have to contain all of the specified components.\n// \t * @return A Builder singleton instance to get a family\n// \t */\n// \tpublic all(componentClasses: Array<Klass<any>>): Builder {\n// \t\tthis.allBits = ComponentType.getBitsFor(componentClasses)\n// \t\treturn this\n// \t}\n\n// \t/**\n// \t * @param componentTypes entities will have to contain at least one of the specified components.\n// \t * @return A Builder singleton instance to get a family\n// \t */\n// \tpublic one(componentClasses: Array<Klass<any>>): Builder {\n// \t\tthis.oneBits = ComponentType.getBitsFor(componentClasses)\n// \t\treturn this\n// \t}\n\n// \t/**\n// \t * @param componentTypes entities cannot contain any of the specified components.\n// \t * @return A Builder singleton instance to get a family\n// \t */\n// \tpublic exclude(componentClasses: Array<Klass<any>>): Builder {\n// \t\tthis.excludeBits = ComponentType.getBitsFor(componentClasses)\n// \t\treturn this\n// \t}\n\n// \t/** @return A family for the configured component types */\n// \t// public get(): Family {\n// \t// \tString hash = getFamilyHash(allBits, one, exclude);\n// \t// \tFamily family = families.get(hash, null);\n// \t// \tif (family == null) {\n// \t// \t\tfamily = new Family(allBits, one, exclude);\n// \t// \t\tfamilies.put(hash, family);\n// \t// \t}\n// \t// \treturn family;\n// \t// }\n// }\n","import Listener from './Listener'\n\nexport default class Signal<T> {\n  private listeners: Listener<T>[]\n\n  constructor(){\n    this.listeners = []\n  }\n\n\t/**\n\t * Add a Listener to this Signal\n\t * @param listener The Listener to be added\n\t */\n\tpublic add(listener: Listener<T>): void {\n\t\tthis.listeners.push(listener)\n\t}\n\n\t/**\n\t * Remove a listener from this Signal\n\t * @param listener The Listener to remove\n\t */\n\tpublic remove(listener: Listener<T>): void {\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1)\n\t}\n\n\t/** Removes all listeners attached to this {@link Signal}. */\n\tpublic removeAllListeners(): void {\n\t\tthis.listeners = []\n\t}\n\n\t/**\n\t * Dispatches an event to all Listeners registered to this Signal\n\t * @param data The object to send off\n\t */\n\tpublic dispatch(data: T): void {\n    this.listeners.forEach((listener: Listener<T>) => {\n      listener.receive(this, data)\n    })\n\t}\n}\n","import Bits from './Bits'\nimport Signal from './Signal'\nimport Listener from './Listener'\nimport Component from './Component'\nimport ComponentType from './ComponentType'\nimport Klass from './Klass'\n\n/**\n * Simple containers of [[Component]]s that give them \"data\". The component's data is then processed by the [[System]]s.\n */\nexport default class Entity {\n  // A flag that can be used to bit mask this entity. Up to the user to manage.\n  public flags: number\n  public removing: boolean = false\n\t// Will dispatch an event when a component is added.\n\tpublic componentAdded: Signal<Entity>\n\t// Will dispatch an event when a component is removed.\n  public componentRemoved: Signal<Entity>\n\n  // ComponentType.index  -> Component\n  private componentMap = new Map<ComponentType['index'], Component>()\n  private components: Component[] = []\n\n  private componentBits: Bits\n  private familyBits: Bits\n  constructor(){\n    this.componentBits = new Bits()\n\t\tthis.familyBits = new Bits()\n    this.flags = 0\n\n    this.componentAdded = new Signal<Entity>()\n    this.componentRemoved = new Signal<Entity>()\n  }\n\n  /**\n\t * Adds a [[Component]] to this Entity.\n\t * @return The Entity for easy chaining\n\t */\n\tpublic add<T extends Component>(component: T): Entity {\n    if(this.addInternal(component)){\n      this.notifyComponentAdded()\n\t\t}\n\t  return this\n\t}\n\n  /**\n\t * Adds a {@link Component} to this Entity. If a {@link Component} of the same type already exists, it'll be replaced.\n\t * @return The Component for direct component manipulation (e.g. PooledComponent)\n\t */\n\tpublic addAndReturn<T extends Component>(component: T): T {\n\t  this.add(component)\n\t\treturn component\n  }\n\n\t/**\n\t * Removes the [[Component]] of the specified type. Since there is only ever one component of one type, we don't need an\n\t * instance reference.\n\t * @return The removed [[Component]], or null if the Entity did no contain such a component.\n\t */\n  public remove<T extends Component>(componentClass: Klass<T>): T | undefined {\n\t\tconst componentType: ComponentType = ComponentType.getFor(componentClass)\n\t\tconst componentTypeIndex: number = componentType.getIndex()\n\t\tconst removeComponent = this.componentMap.get(componentTypeIndex) as T | undefined\n\n\t\tif(removeComponent != null && this.removeInternal(componentClass) != null) {\n\t\t\tthis.notifyComponentRemoved()\n\t\t}\n\t\treturn removeComponent\n  }\n\n\t/** Removes all the [[Components]] from the Entity. */\n  public removeAll(): void {\n    while(this.components.length){\n      this.remove(this.components[0].constructor.prototype)\n    }\n  }\n\n  /**\n   * Retrieve a component from this {@link Entity} by class. <em>Note:</em> the preferred way of retrieving {@link Component}s is\n   * using {@link ComponentMapper}s. This method is provided for convenience; using a ComponentMapper provides O(1) access to\n   * components while this method provides only O(logn).\n   * @param componentClass the class of the component to be retrieved.\n   * @return the instance of the specified {@link Component} attached to this {@link Entity}, or null if no such\n   *         {@link Component} exists.\n   */\n  public getComponent<T extends Component>(componentClassOrType: ComponentType | Klass<T>): T | undefined {\n    if(componentClassOrType instanceof ComponentType){\n      return this.componentMap.get(componentClassOrType.getIndex()) as T | undefined\n    } else {\n      return this.getComponent(ComponentType.getFor(componentClassOrType))\n    }\n  }\n\n  public getComponents(): Component[] {\n    return this.components\n  }\n\n  // @return Whether or not the Entity has a {@link Component} for the specified class.\n  public hasComponent(componentType: ComponentType): boolean {\n    return this.componentBits.get(componentType.getIndex())\n    // return this.componentMap.has(componentType.getIndex())\n  }\n\n  /**\n\t * @return This Entity's component bits, describing all the {@link Component}s it contains.\n\t */\n\tgetComponentBits(): Bits {\n\t\treturn this.componentBits\n\t}\n\n\t/** @return This Entity's {@link Family} bits, describing all the {@link EntitySystem}s it currently is being processed by. */\n\tgetFamilyBits(): Bits {\n\t\treturn this.familyBits\n  }\n\n  notifyComponentAdded(): void {\n    this.componentAdded.dispatch(this)\n  }\n\n  notifyComponentRemoved(): void {\n    this.componentRemoved.dispatch(this)\n  }\n\n\n  /**\n   * @param component\n   * @return whether or not the component was added.\n   */\n  addInternal<T>(component: Component): boolean {\n\t  const componentClass = component.constructor.prototype\n\t  const oldComponent = this.getComponent(componentClass.constructor)\n\n\t  if(component == oldComponent){\n\t\t  return false\n\t  }\n\n\t  if(oldComponent != null){\n\t  \tthis.removeInternal(componentClass.constructor)\n\t  }\n\n\t  const componentTypeIndex: number = ComponentType.getIndexFor(componentClass.constructor)\n\t  this.componentMap.set(componentTypeIndex, component)\n\t  this.components.push(component)\n\t  this.componentBits.set(componentTypeIndex)\n\n\t  return true\n  }\n\n  /**\n   * @param componentClass\n   * @return the component if the specified class was found and removed. Otherwise, null\n   */\n  removeInternal<T>(componentClass: Klass<T>): Component | undefined {\n\t  const componentType: ComponentType = ComponentType.getFor(componentClass)\n\t  const componentTypeIndex: number = componentType.getIndex();\n\t  const removeComponent = this.componentMap.get(componentTypeIndex)\n\n\t  if(removeComponent != null){\n\n      // TODO Ashley sets this to null, instead of removing\n\t\t  this.componentMap.delete(componentTypeIndex)\n\n      // TODO -> Is the componentTypeIndex the same here?\n\t\t  this.components.splice(this.components.indexOf(removeComponent), 1)\n\t\t  this.componentBits.clear(componentTypeIndex)\n\n\t\t  return removeComponent\n\t  }\n\n\t  return undefined\n  }\n}\n","import Engine from './Engine'\n\n/**\n * Abstract class for processing sets of [[Entity]] objects.\n */\nexport default abstract class System {\n\t// Use this to set the priority of the system. Lower means it'll get executed first.\n\tpublic priority: number\n\n  private processing: boolean\n  private sleeping: boolean\n  private sleepTime: number = 0\n  public engine: Engine | null\n  \n\n\t/**\n\t * Initialises the System with the priority specified.\n\t * @param priority The priority to execute this system with (lower means higher priority).\n\t */\n\tconstructor(priority: number = 0){\n\t\tthis.priority = priority\n\t\tthis.processing = true\n\t}\n\n\t/**\n\t * Called when this System is added to an [[Engine]].\n\t * @param engine The [[Engine]] this system was added to.\n\t */\n\tpublic addedToEngine(engine: Engine): void {}\n\n\t/**\n\t * Called when this EntitySystem is removed from an [[Engine]].\n\t * @param engine The [[Engine]] the system was removed from.\n\t */\n\tpublic removedFromEngine(engine: Engine): void {}\n\n\t/**\n\t * The update method called every tick.\n\t * @param deltaTime The time passed since last frame in seconds.\n\t */\n\tpublic update(deltaTime: number): void {}\n\n\t/** @return Whether or not the system should be processed. */\n\tpublic checkProcessing(deltaTime: number): boolean {\n    return this.processing || this.dream(deltaTime)\n\t}\n\n\t/** Sets whether or not the system should be processed by the [[Engine]]. */\n\tpublic setProcessing(processing: boolean): void {\n    this.processing = processing\n    // reset the sleep time if manually re-enabled\n    if(this.processing){\n      this.wake()\n    }\n  }\n  \n  /**\n   * Sets this system to not processing for a set time\n   * @param ms milliseconds to sleep\n   */\n  public sleep(ms: number): void {\n    this.sleeping = true\n    this.sleepTime = ms\n    this.processing = false\n  }\n  /**\n   * Wakes this system, resetting all variables.\n   */\n  public wake(): void {\n    this.sleepTime = 0\n    this.sleeping = false\n    this.processing = true\n  }\n  /**\n   * Reduce the sleep time by a delta time\n   * @param deltaTime amount of time to dream\n   */\n  private dream(deltaTime: number): boolean {\n    this.sleepTime -= deltaTime\n    if(this.sleepTime <= 0){\n      this.wake()\n    }\n    return false\n  }\n\n\tpublic getEngine(): Engine | null {\n\t\treturn this.engine\n\t}\n\n\tpublic addedToEngineInternal(engine: Engine): void {\n\t\tthis.engine = engine\n\t\tthis.addedToEngine(engine)\n\t}\n\n\tpublic removedFromEngineInternal(engine: Engine): void {\n\t\tthis.engine = null\n\t\tthis.removedFromEngine(engine)\n\t}\n}\n","import Entity from './Entity'\n\n/**\n * Does things when you add / remove [[Components]] from [[Entities]]\n */\nexport default class ComponentManager {\n  constructor(){}\n\n  public add(entity: Entity): void {\n\t\tentity.notifyComponentAdded()\n  }\n\n  public remove(entity: Entity): void {\n\t\tentity.notifyComponentRemoved()\n  }\n}\n","import Bits from './Bits'\nimport Component from './Component'\nimport Family from './Family'\nimport Entity from './Entity'\nimport EntityListener from './EntityListener'\n\nexport default class FamilyManager {\n  entities: Entity[]\n  familyToEntitesMap: WeakMap<Family, Entity[]> = new WeakMap<Family, Entity[]>()\n  entityListenerMasks: Map<Family, Bits> = new Map<Family, Bits>()\n  // componentsToFamilyMap: WeakMap<Component[], Family>= new WeakMap<Component[], Family>()\n  // entityToFamilyMap: WeakMap<Entity, Family> = new WeakMap<Entity, Family>()\n  families: Family[] = []\n  entityListeners: EntityListenerData[] = []\n  notifying: boolean = false\n\n  constructor(entities: Entity[]){\n    this.entities = entities\n  }\n\n  public getEntitiesFor(family: Family): Entity[] {\n\t\treturn this.registerFamily(family)\n  }\n\n  public addEntityListener(listener: EntityListener, priority: number = 0, family?: Family): void {\n    if(family) this.registerFamily(family)\n\t\tlet insertionIndex: number = 0\n\t\twhile(insertionIndex < this.entityListeners.length) {\n\t\t\tif(this.entityListeners[insertionIndex].priority <= priority) {\n\t\t\t\tinsertionIndex++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n    // TODO, Bits.length might not work\n\t\t// Shift up bitmasks by one step\n    for(let mask of this.entityListenerMasks.values()) {\n\t\t  for(let k: number = mask.length(); k > insertionIndex; k--) {\n\t\t  \tif (mask.get(k - 1)) {\n\t\t  \t\tmask.set(k)\n\t\t  \t} else {\n\t\t  \t\tmask.clear(k)\n\t\t  \t}\n\t\t  }\n\t\t  mask.clear(insertionIndex)\n    }\n\n\t\tif(family){\n      let mask: Bits | undefined = this.entityListenerMasks.get(family)\n      if(mask) mask.set(insertionIndex)\n    }\n\n\t\tconst entityListenerData: EntityListenerData = new EntityListenerData()\n\t\tentityListenerData.listener = listener\n\t\tentityListenerData.priority = priority\n\t\tthis.entityListeners.splice(insertionIndex, 0, entityListenerData)\n  }\n\n\n  public removeEntityListener(listener: EntityListener): void {\n\t\tfor (let i=0; i < this.entityListeners.length; i++) {\n\t\t\tlet entityListenerData: EntityListenerData = this.entityListeners[i]\n\t\t\tif (entityListenerData.listener == listener) {\n\t\t\t\t// Shift down bitmasks by one step\n        for(let mask of this.entityListenerMasks.values()) {\n\t\t\t\t  for(let k = i, n = mask.length(); k < n; k++) {\n\t\t\t\t\t\tif (mask.get(k + 1)) {\n\t\t\t\t\t\t\tmask.set(k);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmask.clear(k)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.entityListeners.splice(this.entityListeners.indexOf(entityListenerData), 1)\n\t\t\t}\n\t\t}\n  }\n\n  public updateFamilyMembership(entity: Entity): void {\n    // Find families that the entity was added to/removed from, and fill\n\t\t// the bitmasks with corresponding listener bits.\n\t\tlet addListenerBits: Bits =  new Bits()\n\t\tlet removeListenerBits: Bits = new Bits()\n\n    this.entityListenerMasks.forEach((bits: Bits, family: Family, map) => {\n\t\t\tconst familyIndex: number = family.getIndex()\n      const entityFamilyBits: Bits = entity.getFamilyBits()\n\n\t\t\tlet belongsToFamily: boolean = entityFamilyBits.get(familyIndex)\n\t\t\tlet matches: boolean = family.matches(entity) && !entity.removing\n\n\t\t\tif (belongsToFamily != matches) {\n\t\t\t\tconst listenersMask = this.entityListenerMasks.get(family)\n\t\t\t\tconst familyEntities = this.familyToEntitesMap.get(family)\n\t\t\t\tif(matches) {\n          if(listenersMask) addListenerBits.or(listenersMask)\n          if(familyEntities) familyEntities.push(entity)\n\t\t\t\t\tentityFamilyBits.set(familyIndex)\n\t\t\t\t} else {\n          if(listenersMask) removeListenerBits.or(listenersMask)\n\t\t\t\t\tif(familyEntities){\n            familyEntities.splice(familyEntities.indexOf(entity), 1)\n            // TODO do i need this^\n            this.familyToEntitesMap.set(family, familyEntities)\n          }\n\t\t\t\t\tentityFamilyBits.clear(familyIndex)\n\t\t\t\t}\n\t\t\t}\n    })\n\n    this.notifying = true\n\t\ttry {\n\t\t\tfor (let i = removeListenerBits.nextSetBit(0); i >= 0; i = removeListenerBits.nextSetBit(i + 1)) {\n\t\t\t\tthis.entityListeners[i].listener.entityRemoved(entity)\n\t\t\t}\n\n\t\t\tfor (let i = addListenerBits.nextSetBit(0); i >= 0; i = addListenerBits.nextSetBit(i + 1)) {\n        this.entityListeners[i].listener.entityAdded(entity)\n\t\t\t}\n\t\t}\n    finally {\n      this.notifying = false\n    }\n  }\n\n  private registerFamily(family: Family): Entity[] {\n\t\tconst entitiesInFamily: Entity[] | undefined = this.familyToEntitesMap.get(family)\n\t  if(!entitiesInFamily) {\n\t    this.familyToEntitesMap.set(family, [])\n\t    this.entityListenerMasks.set(family, new Bits())\n      const entities = this.familyToEntitesMap.get(family)\n      this.entities.forEach((entity: Entity) => {\n\t  \t  this.updateFamilyMembership(entity)\n      })\n      this.families.push(family)\n\t  }\n\n    return entitiesInFamily ? entitiesInFamily : []\n\t}\n}\n\n\nexport class EntityListenerData {\n\tpublic listener: EntityListener\n\tpublic priority: number\n}\n","export class EinException extends Error {\n  name: string = \"EinException\"\n\n  constructor(message: string){\n    super(message)\n  }\n}\n\nexport class IllegalStateException extends EinException{\n  name: string = \"IllegalStateException\"\n\n  constructor(message: string){\n    super(message)\n  }\n}\n","import Entity from './Entity'\nimport EntityListener from './EntityListener'\nimport { IllegalStateException } from './exceptions'\n\n// Manages the addition / removal of entity\nexport default class EntityManager {\n\tprivate listener: EntityListener\n  private entities: Entity[] = []\n  private singletonEntity: Entity\n\n\tconstructor(listener: EntityListener) {\n    this.listener = listener\n\t}\n\n\tpublic addEntity(entity: Entity): void {\n    if(this.entities.indexOf(entity) > -1){\n      throw new IllegalStateException(\"Entity has already been added \\n\" + entity)\n    }\n\t\tthis.entities.push(entity)\n\t\tthis.listener.entityAdded(entity)\n\t}\n\n\tpublic removeEntity(entity: Entity): void {\n    const i = this.entities.indexOf(entity)\n    if(i > -1){\n\t\t  this.entities.splice(i, 1)\n      this.listener.entityRemoved(entity)\n    }\n  }\n\n  public getSingleton(): Entity {\n    if(this.singletonEntity == null){\n      this.singletonEntity = new Entity()\n      this.addEntity(this.singletonEntity)\n    }\n    return this.singletonEntity\n  }\n\n\tpublic removeAllEntities(entities?: Entity[]): void {\n    if(entities){\n      while(entities.length){\n        this.removeEntity(entities[0])\n        entities.splice(0, 1)\n      }\n    } else {\n      while(this.entities.length){\n        this.removeEntity(this.entities[0])\n      }\n    }\n\t}\n\n  public getEntities(): Entity[] {\n    return this.entities\n  }\n}\n","import System from './System'\nimport SystemListener from './SystemListener'\nimport { Klass } from './Klass'\n\nexport default class SystemManager {\n\tprivate systems: System[] = []\n\tprivate systemMap = new WeakMap()\n  private listener: SystemListener\n\n  constructor(listener: SystemListener) {\n\t  this.listener = listener\n  }\n\n  public addSystem(system: System): void{\n    if(this.systemMap.get(system.constructor)){\n      this.removeSystem(system)\n    }\n    this.systemMap.set(system.constructor, system)\n\t  this.systems.push(system)\n\t  this.systems.sort(this.systemComparator)\n\t  this.listener.systemAdded(system)\n  }\n\n  public removeSystem(system: System): void {\n    for(let i=0; i < this.systems.length; i++){\n      let s: System = this.systems[i]\n      if(s.constructor.prototype == system.constructor.prototype){\n        this.systems.splice(i, 1)\n      }\n    }\n    this.systemMap.delete(system.constructor)\n\t  this.listener.systemRemoved(system)\n  }\n\n  public removeAllSystems(): void {\n    while(this.systems.length){\n      this.removeSystem(this.systems[0])\n    }\n  }\n\n  public getSystem<T extends System>(systemClass: Klass<T>): T {\n    return this.systemMap.get(systemClass)\n  }\n\n  public getSystems(): System[] {\n\t  return this.systems\n  }\n\n  private systemComparator(a: System, b: System): number {\n    return a.priority > b.priority ? 1 : (a.priority == b.priority) ? 0 : -1\n  }\n\n}\n","import Signal from './Signal'\nimport Listener from './Listener'\n\nimport Component from './Component'\nimport ComponentManager from './ComponentManager'\n\nimport Family from './Family'\nimport FamilyManager from './FamilyManager'\n\nimport Entity from './Entity'\nimport EntityListener  from './EntityListener'\nimport EntityManager  from './EntityManager'\n\nimport System from './System'\nimport SystemListener from './SystemListener'\nimport SystemManager from './SystemManager'\n\nimport { IllegalStateException } from './exceptions'\nimport Klass from './Klass'\nimport ComponentType from './ComponentType';\nimport ComponentMapper from './ComponentMapper';\n\n/**\n * [[System]]s have no state and [[Component]]s have no behavior!!!!!\n\n\n * The heart of the Entity framework. It is responsible for keeping track of[[Entity]] and\n * managing [[System]] objects. The Engine should be updated every tick via the {@link #update(float)} method.\n *\n * With the Engine you can:\n *\n * <ul>\n * <li>Add/Remove[[Entity]] objects</li>\n * <li>Add/Remove [[System]]s</li>\n * <li>Obtain a list of entities for a specific [[Family]]</li>\n * <li>Update the main loop</li>\n * <li>Register/unregister [[EntityListener]] objects</li>\n * </ul>\n *\n */\nexport default class Engine {\n  // private static Family empty = Family.all().get();\n\n  private componentAdded: Listener<Entity>  = new ComponentListener(this)\n  private componentRemoved:  Listener<Entity>  = new ComponentListener(this)\n\n  private systemManager = new SystemManager(new EngineSystemListener(this))\n  private entityManager: EntityManager = new EntityManager(new EngineEntityListener(this))\n  public familyManager: FamilyManager = new FamilyManager(this.entityManager.getEntities())\n  private componentManager: ComponentManager = new ComponentManager()\n\n  private updating: boolean\n\n  constructor(){}\n\n  /**\n   * Creates a new Entity object.\n   * @return [[Entity]]\n   */\n  public createEntity(): Entity {\n  \treturn new Entity()\n  }\n\n  /**\n   * Adds an [[Entity]] to the Engine.\n   * This will throw an IllegalArgumentException if the given entity\n   * was already registered with an engine.\n   */\n  public addEntity(entity: Entity): void {\n  \tthis.entityManager.addEntity(entity)\n  }\n\n  public getSingleton(): Entity {\n    return this.entityManager.getSingleton()\n  }\n\n  public addSingletonComponent<T extends Component>(component: T): T {\n    return this.getSingleton().addAndReturn(component)\n  }\n\n  public getSingletonComponent<T extends Component>(arg: ComponentType | Klass<T> | ComponentMapper<T>): T | undefined {\n    if(arg instanceof ComponentMapper){\n      return arg.get(this.getSingleton())\n    } else {\n      return this.getSingleton().getComponent(arg)\n    }\n  }\n\n  /**\n   * Removes an [[Entity]] from the Engine.\n   */\n  public removeEntity(entity: Entity): void{\n  \tthis.entityManager.removeEntity(entity)\n  }\n\n  /**\n   * Removes all [[Entity]]s of the given [[Family]]\n   */\n  public removeAllEntities(family?: Family): void {\n    if(family){\n  \t  this.entityManager.removeAllEntities(this.getEntitiesFor(family))\n    } else {\n  \t  this.entityManager.removeAllEntities()\n    }\n  }\n\n\n  /**\n   * Get all [[Entity]]s\n   */\n  public getEntities(): Entity[] {\n  \treturn this.entityManager.getEntities()\n  }\n\n  /**\n   * Adds the [[System]] to the Engine.\n   * If the Engine already had a system of the same class,\n   * the new one will replace the old one.\n   */\n  public addSystem<T extends System>(system: T): void {\n  \tthis.systemManager.addSystem(system)\n  }\n\n  /**\n   * Removes a [[System]] from the Engine.\n   */\n  public removeSystem<T extends System>(system: T): void {\n  \tthis.systemManager.removeSystem(system)\n  }\n\n  /**\n   * Removes all [[System]]s from this Engine.\n   */\n  public removeAllSystems(): void {\n  \tthis.systemManager.removeAllSystems()\n  }\n\n  /**\n   * Get a [[System]] by Class.\n   */\n  public getSystem<T extends System>(systemClass: Klass<T>): T {\n  \treturn this.systemManager.getSystem(systemClass)\n  }\n\n  /**\n   * @return array of all [[System]]s managed by the [[Engine]]\n   */\n  public getSystems(): System[] {\n  \treturn this.systemManager.getSystems()\n  }\n\n  /**\n   * Returns collection of entities for the specified [[Family]].\n   */\n  public getEntitiesFor(family: Family): Entity[] {\n  \treturn this.familyManager.getEntitiesFor(family)\n  }\n\n\n  /**\n   * Adds an [[EntityListener]] for a specific [[Family]]. The listener will be notified every time an entity is\n   * added/removed to/from the given family. The priority determines in which order the entity listeners will be called. Lower\n   * value means it will get executed first.\n   */\n  public addEntityListener(listener: EntityListener, priority: number = 0, family?: Family): void {\n    this.familyManager.addEntityListener(listener, priority, family)\n  }\n\n  /**\n   * Removes an [[EntityListener]]\n   */\n  public removeEntityListener(listener: EntityListener): void {\n  \tthis.familyManager.removeEntityListener(listener)\n  }\n\n  /**\n   * Updates all the [[System]] in this Engine.\n   * @param deltaTime The time passed since the last frame.\n   */\n  public update(deltaTime: number): void{\n  \tif(this.updating){\n  \t\tthrow new IllegalStateException(\"Cannot call update() on an Engine that is already updating.\")\n  \t}\n\n  \tthis.updating = true\n  \tconst systems: System[] = this.systemManager.getSystems()\n\n  \ttry {\n      systems.forEach((system: System) => {\n  \t\t\tif(system.checkProcessing(deltaTime)) {\n  \t\t\t\tsystem.update(deltaTime)\n  \t\t\t}\n      })\n  \t}\n  \tfinally {\n  \t\tthis.updating = false\n  \t}\n  }\n\n  // TODO these used to be protected, js doesnt have nested classes -> at bottom\n  public addEntityInternal(entity: Entity): void {\n  \tentity.componentAdded.add(this.componentAdded)\n  \tentity.componentRemoved.add(this.componentRemoved)\n\n  \tthis.familyManager.updateFamilyMembership(entity)\n  }\n\n  public removeEntityInternal(entity: Entity): void {\n  \tthis.familyManager.updateFamilyMembership(entity)\n  \tentity.componentAdded.remove(this.componentAdded)\n  \tentity.componentRemoved.remove(this.componentRemoved)\n  }\n}\n\n\nclass EngineSystemListener implements SystemListener {\n  engine: Engine\n  constructor(engine: Engine){\n    this.engine = engine\n  }\n\tpublic systemAdded(system: System): void {\n\t\tsystem.addedToEngineInternal(this.engine)\n\t}\n\n\tpublic systemRemoved(system: System): void {\n\t\tsystem.removedFromEngineInternal(this.engine)\n\t}\n}\n\nclass EngineEntityListener implements EntityListener {\n  engine: Engine\n  constructor(engine: Engine){\n    this.engine = engine\n  }\n\n\tpublic entityAdded(entity: Entity): void {\n\t\tthis.engine.addEntityInternal(entity)\n\t}\n\n\tpublic entityRemoved(entity: Entity): void {\n\t\tthis.engine.removeEntityInternal(entity)\n\t}\n}\n\n\nclass ComponentListener implements Listener<Entity> {\n  engine: Engine\n  constructor(engine: Engine){\n    this.engine = engine\n  }\n\n\tpublic receive(signal: Signal<Entity>, entity: Entity): void {\n\t\tthis.engine.familyManager.updateFamilyMembership(entity)\n\t}\n}\n","import Family from '../Family'\nimport Entity from '../Entity'\nimport System from '../System'\nimport Engine from '../Engine'\n\n/**\n * A simple EntitySystem that iterates over each entity and calls processEntity() for each entity every time the System is\n * updated. This is really just a convenience class as most systems iterate over a list of entities.\n */\nexport default abstract class IteratingSystem extends System {\n  private family: Family\n  private entities: Entity[]\n\n  constructor(family: Family, priority: number = 0){\n    super(priority)\n    this.family = family\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    if(this.engine)  this.entities = this.engine.getEntitiesFor(this.family)\n    this.entities.forEach((entity: Entity) => {\n      this.processEntity(entity, deltaTime)\n    })\n  }\n\n  protected abstract processEntity(entity: Entity, deltaTime: number): void\n}\n","import System from '../System'\n\n/**\n * A simple [[System]] that does not run its update logic every call to {@link EntitySystem#update(float)}, but after a\n * given interval. The actual logic should be placed in {@link IntervalSystem#updateInterval()}.\n */\nexport default abstract class IteratingSystem extends System {\n  private interval: number\n  private accumulator: number\n\n  constructor(interval: number, priority: number = 0){\n    super(priority)\n    this.interval = interval\n    this.accumulator = 0\n  }\n\n\n  public update(deltaTime: number): void {\n    this.accumulator += deltaTime\n\t\twhile(this.accumulator >= this.interval) {\n\t\t\tthis.accumulator -= this.interval\n\t\t\tthis.updateInterval()\n    }\n  }\n\n  protected abstract updateInterval(): void\n}\n","import Family from '../Family'\nimport Entity from '../Entity'\nimport System from '../System'\nimport Engine from '../Engine'\n\n/**\n * A simple EntitySystem that processes each entity of a given family in the order specified by a comparator and calls\n * processEntity() for each entity every time the EntitySystem is updated. This is really just a convenience class as rendering\n * systems tend to iterate over a list of entities in a sorted manner. Adding entities will cause the entity list to be resorted.\n * Call forceSort() if you changed your sorting criteria.\n * @author Santo Pfingsten\n */\nexport default abstract class SortedIteratingSystem extends System {\n  private family: Family\n  private entities: Entity[]\n\tprivate comparator: (a: Entity, b: Entity) => number\n\n  constructor(family: Family, comparator: (a: Entity, b: Entity) => number, priority: number = 0){\n    super(priority)\n    this.family = family\n    this.comparator = comparator\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    if(this.engine){\n      // If entities are the same, don't run sort\n      if(this.entities == this.engine.getEntitiesFor(this.family)){\n        this.entities.forEach((entity: Entity) => {\n          this.proccessEntity(entity, deltaTime)\n        })\n      } else {\n        this.entities = this.engine.getEntitiesFor(this.family).sort(this.comparator)\n        this.entities.forEach((entity: Entity) => {\n          this.proccessEntity(entity, deltaTime)\n        })\n      }\n    }\n  }\n\n  protected abstract proccessEntity(entity: Entity, deltaTime: number): void\n}\n","export {default as Component} from './Component'\nexport {default as ComponentType} from './ComponentType'\nexport {default as ComponentMapper} from './ComponentMapper'\nexport {default as Family} from './Family'\nexport {default as Entity} from './Entity'\nexport {default as EntityListener} from './EntityListener'\nexport {default as System} from './System'\nexport {default as SystemListener} from './SystemListener'\nexport {default as Engine} from './Engine'\nexport {default as Klass} from './Klass'\nexport {default as IteratingSystem} from './helpers/IteratingSystem'\nexport {default as IntervalSystem} from './helpers/IntervalSystem'\nexport {default as SortedIteratingSystem} from './helpers/SortedIteratingSystem'\n\n","import { Component } from '@ludic/ein'\n\nexport default class GamepadComponent extends Component {\n  index: number\n  constructor(index: number){\n    super()\n    this.index = index\n  }\n}","import { Component } from '@ludic/ein'\n\nexport default class PositionComponent extends Component {\n\tpublic x: number\n\tpublic y: number\n\n  constructor(x: number, y: number){\n    super()\n    this.x = x\n    this.y = y\n  }\n}\n","import { Component } from '@ludic/ein'\nimport Tile from '../entities/Tile'\n\nexport default class PlayerStateComponent extends Component {\n  size: number\n  vibrating: boolean\n  playerType: string\n  color: string\n  currentTile: Tile\n  boosting: boolean\n  boostMultiplier = 1.2\n  building: boolean = false\n\n  private _speed = 0.5\n\n  constructor(size: number = 1, playerType: string = 'type1'){\n    super()\n\n    this.size = size\n    this.vibrating = false\n    this.playerType = playerType\n\n    if(this.playerType == 'type1'){\n      this.color = 'rgba(192, 57, 43,1.0)'\n    } else {\n      this.color = 'orange'\n    }\n  }\n\n  get speed(): number {\n    return this.boosting ? this._speed * this.boostMultiplier : this._speed\n  }\n}\n","export default class RGBA {\n  r: number\n  g: number\n  b: number\n  a: number\n\n  constructor(r: number, g: number, b: number, a: number){\n    this.r = r\n    this.g = g\n    this.b = b\n    this.a = a\n  }\n\n  toString(): string {\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`\n  }\n}\n","import { Component } from '@ludic/ein'\nimport Player from '../entities/Player'\nimport Hex from '../utils/Hex'\nimport Color from '../utils/Color'\n\nconst TILE_COLORS = {\n  '1': {r:46,  g:204, b:113, a:0},\n  '2': {r:52,  g:152, b:219, a:0},\n  '3': {r:155, g: 89, b:182, a:0},\n  '4': {r:241, g:196, b:15,  a:0},\n  '5': {r:231, g:76,  b:60,  a:0}\n}\n\nexport type TileType =  \"1\" | \"2\" | \"3\" | \"4\" | \"5\"\n\nexport default class TileStateComponent extends Component {\n  hex: Hex\n  active: boolean\n  tileType: string\n  playersOn: Player[]\n  building: boolean = false\n\n  private _color: string\n  private _fill: string\n\n  constructor(hex: Hex, tileType: TileType = '1', active: boolean = false){\n    super()\n    this.hex = hex\n    this.active = active\n    this.tileType = tileType\n    this.playersOn = []\n  }\n\n  get color(): string {\n    return this.building ? 'green' : 'rgba(230, 126, 34, 0.2)'\n  }\n\n  get fill(): string {\n    let tc = TILE_COLORS[this.tileType]\n    let baseColor: Color = new Color(tc.r, tc.g, tc.b, tc.a)\n    if(this.active){\n      baseColor.a = .4\n    } else {\n      baseColor.a = .1\n    }\n\n    return baseColor.toString()\n  }\n}\n","import Ludic, { Vector2 } from '@ludic/ludic'\nimport { Engine, System, Family, Entity, ComponentMapper, IteratingSystem } from '@ludic/ein'\n\nimport GamepadComponent from '../components/GamepadComponent'\nimport PositionComponent from '../components/PositionComponent'\nimport PlayerStateComponent from '../components/PlayerStateComponent'\nimport TileStateComponent from '../components/TileStateComponent'\n\nimport Tile from '../entities/Tile'\n\nimport { Map, MapTile } from '../utils/Map'\nimport Hex, { OffsetCoordinate, CubeCoordinate } from '../utils/Hex'\n/**\n * This system is in charge of translating gamepad inputs into\n * player movement.\n */\nexport default class PlayerMapControlSystem extends IteratingSystem {\n\n  pm = new ComponentMapper(PositionComponent)\n  gm = new ComponentMapper(GamepadComponent)\n  psm = new ComponentMapper(PlayerStateComponent)\n  tm = new ComponentMapper(TileStateComponent)\n\n  engine: Engine\n\n  gamepadDeadzone = 0.3\n\n  constructor(engine: Engine){\n    super(Family.all([GamepadComponent, PositionComponent, PlayerStateComponent]).get())\n    this.engine = engine\n  }\n\n  exportMap(){\n    let tiles: Tile[] = this.engine.getEntitiesFor(Family.all([TileStateComponent]).get())\n\n    let mapTiles: MapTile[] = tiles.map((t: Tile) => {\n      let s = this.tm.get(t)\n      return {\n        pos: {\n          x: s.hex.x,\n          y: s.hex.y,\n          z: s.hex.z,\n        },\n        tileType: s.tileType\n      }\n    })\n\n    let map: Map = {\n      tiles: mapTiles,\n      castles: [{x:2,  y: 0, z: -2}],\n      playerSpawnPoints: [\n        {x:1, y: 1, z: -2},\n        {x:3, y: -1, z: 2},\n      ]\n    }\n\n    console.log(JSON.stringify(map))\n    // fs.writeFile(\"newMapConfig.json\", JSON.stringify(map), ()=>{})\n  }\n\n  processEntity(ent: Entity, deltaTime: number) {\n    const p = this.pm.get(ent)\n    const g = this.gm.get(ent)\n    const state = this.psm.get(ent)\n    const gamepad = Ludic.input.gamepad.get(g.index)\n\n    if(p){\n      const playerVector = new Vector2(0,0)\n      // Update the position based on gamepad actions\n      if(gamepad.lx.value >= this.gamepadDeadzone) {\n        playerVector.x = gamepad.lx.value\n      } else if(gamepad.lx.value <= -this.gamepadDeadzone) {\n        playerVector.x = gamepad.lx.value\n      }\n      if(gamepad.ly.value >= this.gamepadDeadzone) {\n        playerVector.y = -gamepad.ly\n      } else if(gamepad.ly.value <= -this.gamepadDeadzone) {\n        playerVector.y = -gamepad.ly\n      }\n\n      // speed boost\n      if(gamepad.circle.buttonDown){\n        state.boosting = true\n      } else if(gamepad.circle.buttonUp){\n        state.boosting = false\n      }\n\n      // normalize the player vector and apply speed multiplier\n      playerVector.scale(state.speed)\n      p.x += playerVector.x\n      p.y += playerVector.y\n\n\n      if(state.currentTile != null){\n\n        let tileState = state.currentTile.getComponent(TileStateComponent)\n        let x = gamepad.rx.value\n        let y = gamepad.ry.value\n        console.log(y)\n        if(x > 0 && y > 0){\n          tileState.tileType = \"1\"\n        }\n        if(x < 0 && y > 0){\n          tileState.tileType = \"2\"\n        }\n        if(x > 0 && y < 0){\n          tileState.tileType = \"3\"\n        }\n        if(x < 0 && y < 0){\n          tileState.tileType = \"4\"\n        }\n\n        if(gamepad.home.buttonUp){\n          this.exportMap()\n        }\n      }\n    }\n  }\n}\n","\nimport { Component } from '@ludic/ein'\n\nexport type RenderFn = (ctx: CanvasRenderingContext2D, ...args: any[]) => void\n\nexport default class RenderComponent extends Component {\n\tpublic renderFn: RenderFn\n\n  constructor(renderFn: RenderFn){\n    super()\n    this.renderFn = renderFn\n  }\n}","import { Component } from '@ludic/ein'\n\nexport default class MechComponent extends Component {\n  type: string\n\n  constructor(type: string) {\n    super()\n    this.type = type\n  }\n}\n","import { Component } from '@ludic/ein'\nimport { Camera } from '@ludic/ludic'\n\nexport default class CameraComponent extends Component {\n  camera: Camera\n  constructor(camera: Camera) {\n    super()\n    this.camera = camera\n  }\n}","import { ComponentMapper } from '@ludic/ein'\nimport MechComponent from './MechComponent'\nimport PositionComponent from './PositionComponent'\nimport GamepadComponent from './GamepadComponent'\nimport CameraComponent from './CameraComponent'\n\nexport const MechComponentMapper = new ComponentMapper(MechComponent)\nexport const PositionComponentMapper = new ComponentMapper(PositionComponent)\nexport const GamepadComponentMapper = new ComponentMapper(GamepadComponent)\nexport const CameraComponentMapper = new ComponentMapper(CameraComponent)","import {ComponentMapper, Family, Entity, System, Engine} from '@ludic/ein'\nimport PositionComponent from '../components/PositionComponent'\nimport RenderComponent from '../components/RenderComponent'\nimport PlayerStateComponent from '../components/PlayerStateComponent'\nimport Ludic, { Camera } from '@ludic/ludic'\nimport { MechComponentMapper, CameraComponentMapper } from '../components/mappers';\nimport Player from '../entities/Player';\n\nexport default class PlayerRenderSystem extends System {\n  private rm: ComponentMapper<RenderComponent> = ComponentMapper.getFor(RenderComponent)\n  private pm: ComponentMapper<PositionComponent> = ComponentMapper.getFor(PositionComponent)\n  private sm: ComponentMapper<PlayerStateComponent> = ComponentMapper.getFor(PlayerStateComponent)\n\n  public entities: Entity[]\n  public components = [PlayerStateComponent]\n  public family: Family\n\n  constructor(){\n    super()\n    this.family = Family.all(this.components).get()\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(engine: Engine): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    if(this.engine) {\n      this.entities = this.engine.getEntitiesFor(this.family)\n    }\n    ctx.save()\n    const {camera} = this.engine.getSingletonComponent(CameraComponentMapper)\n    camera.drawAxes(ctx)\n    this.entities.forEach((entity: Entity) => {\n      ctx.save()\n      this.renderPlayer(ctx, entity)\n      ctx.restore()\n    })\n    ctx.restore()\n  }\n\n  renderPlayer(ctx: CanvasRenderingContext2D, player: Player){\n    const r = this.rm.get(player)\n    const pos = this.pm.get(player)\n    const state = this.sm.get(player)\n    const mechComp = MechComponentMapper.get(player)\n\n    ctx.fillStyle = mechComp.type\n    ctx.beginPath()\n    ctx.arc(pos.x + (state.size / 2), pos.y + (state.size / 2), state.size, 0, Math.PI * 2)\n    ctx.fill()\n  }\n}\n","import {ComponentMapper, Family, Entity, System, Engine} from '@ludic/ein'\nimport PositionComponent from '../components/PositionComponent'\nimport TileStateComponent from '../components/TileStateComponent'\nimport Ludic from '@ludic/ludic'\n\nexport default class TileRenderSystem extends System {\n  private pm: ComponentMapper<PositionComponent> = ComponentMapper.getFor(PositionComponent)\n  private tm: ComponentMapper<TileStateComponent> = ComponentMapper.getFor(TileStateComponent)\n\n  public entities: Entity[]\n  public components = [TileStateComponent]\n  public family: Family\n\n  constructor(){\n    super()\n    this.family = Family.all(this.components).get()\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(engine: Engine): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    if(this.engine) {\n      this.entities = this.engine.getEntitiesFor(this.family)\n    }\n    ctx.save()\n    this.entities.forEach((entity: Entity) => {\n      ctx.save()\n\n      const pos: PositionComponent = this.pm.get(entity)\n      const state: TileStateComponent = this.tm.get(entity)\n\n      const x = pos.x\n      const y = pos.y\n      ctx.strokeStyle = state.color\n\n      ctx.fillStyle = state.fill\n      ctx.lineWidth = .1\n\n      ctx.beginPath()\n      ctx.moveTo(x + state.hex.sideLength * Math.cos(0), y + state.hex.sideLength * Math.sin(0))\n      for(let side = 0; side < 7; side++) {\n        ctx.lineTo(x + state.hex.sideLength * Math.cos(side * 2 * Math.PI / 6), y + state.hex.sideLength * Math.sin(side * 2 * Math.PI / 6))\n      }\n      ctx.fill()\n      ctx.stroke()\n\n      if(Ludic.debug){\n        ctx.save()\n        ctx.font = '1px serif'\n        ctx.fillStyle = 'black'\n        ctx.scale(1, -1)\n        ctx.fillText(`${state.hex.x}  ${state.hex.y}  ${state.hex.z}`, x - 1.5, -y)\n        // ctx.fillText(`q: ${state.hex.q} r:${state.hex.r}`, x - 1.5, -y)\n        ctx.restore()\n      }\n\n      ctx.restore()\n    })\n    ctx.restore()\n  }\n}\n","import { Vector2 } from '@ludic/ludic'\n\nexport const Vector2Distance = function(p1: Vector2, p2: Vector2): number {\n  return Math.sqrt((Math.pow((p2.x - p1.x), 2) + Math.pow((p2.y - p1.y), 2)))\n}\n\nexport const Vector2Normalize = function(vec: Vector2): Vector2 {\n  const length = Math.sqrt(vec.x * vec.x + vec.y * vec.y)\n  return new Vector2(vec.x / length, vec.y / length)\n}\n","import Ludic, { Camera, Vector2 } from '@ludic/ludic'\nimport {ComponentMapper, Family, Entity, System, Engine} from '@ludic/ein'\n\nimport PositionComponent from '../components/PositionComponent'\nimport TileStateComponent from '../components/TileStateComponent'\nimport PlayerStateComponent from '../components/PlayerStateComponent'\n\nimport { Vector2Distance } from '../utils/Euclid'\n\nexport default class TileActivationSystem extends System {\n  private pm: ComponentMapper<PositionComponent> = ComponentMapper.getFor(PositionComponent)\n  private psm: ComponentMapper<PlayerStateComponent> = ComponentMapper.getFor(PlayerStateComponent)\n  private tsm: ComponentMapper<TileStateComponent> = ComponentMapper.getFor(TileStateComponent)\n\n  public entities: Entity[]\n  public components = [PositionComponent]\n  public family: Family\n\n  camera: Camera\n\n  constructor(){\n    super()\n    this.family = Family.all(this.components).get()\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(engine: Engine): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    if(this.engine) {\n      this.entities = this.engine.getEntitiesFor(this.family)\n    }\n\n    // Player entities\n    const players =  this.entities.filter(entity => !!this.psm.get(entity))\n    const tiles   =  this.entities.filter(entity => !!this.tsm.get(entity))\n\n    if(players.length){\n      let playerInfo = players.map(player => {\n        const playerPos = this.pm.get(player)\n        const playerState = this.psm.get(player)\n        const centerPointX = playerPos.x + (playerState.size / 2)\n        const centerPointY = playerPos.y + (playerState.size / 2)\n        return {\n          player: player,\n          closestTile: null,\n          closestTileDistance: null,\n          cX: centerPointX,\n          cY: centerPointY,\n        }\n      })\n\n      tiles.forEach((tile: Entity) => {\n        let tileState: TileStateComponent = this.tsm.get(tile)\n        let tilePos: PositionComponent = this.pm.get(tile)\n        let x = tilePos.x\n        let y = tilePos.y\n\n        playerInfo.forEach(p => {\n          // Calc distance from current Tile\n          const p1 = new Vector2(p.cX, p.cY)\n          const p2 = new Vector2(x, y)\n          const distance = Vector2Distance(p1, p2)\n          if(p.closestTileDistance == null || p.closestTileDistance > distance){\n            p.closestTileDistance = distance\n            p.closestTile = tile\n          }\n        })\n      })\n\n      // Set active tile if either player is closest\n      tiles.forEach(tile => {\n        let tileState: TileStateComponent = this.tsm.get(tile)\n        tileState.playersOn = []\n        tileState.active = false\n\n        playerInfo.forEach(p => {\n          if(p.closestTile == tile){\n            tileState.active = true\n            tileState.playersOn.push(p.player)\n          }\n        })\n      })\n\n      // Set the players active tile\n      playerInfo.forEach(p => {\n        const playerState = this.psm.get(p.player)\n        playerState.currentTile = p.closestTile\n      })\n    }\n  }\n}\n","import { Component } from '@ludic/ein'\nimport Hex from '../utils/Hex'\n\nexport default class CastleStateComponent extends Component {\n  hex: Hex\n  health: number\n  size: number\n\n  constructor(hex: Hex, health: number = 10, size: number = 2){\n    super()\n\n    this.hex = hex\n    this.health = health\n    this.size = size\n  }\n}\n","import Ludic, { Camera } from '@ludic/ludic'\nimport {ComponentMapper, Family, Entity, System, Engine} from '@ludic/ein'\n\nimport CastleStateComponent from '../components/CastleStateComponent'\n\nexport default class CastleRenderSystem extends System {\n  private tm: ComponentMapper<CastleStateComponent> = ComponentMapper.getFor(CastleStateComponent)\n\n  public entities: Entity[]\n  public components = [CastleStateComponent]\n  public family: Family\n\n  constructor(){\n    super()\n    this.family = Family.all(this.components).get()\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(engine: Engine): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    this.entities = this.engine.getEntitiesFor(this.family)\n\n    ctx.save()\n    this.entities.forEach((entity: Entity) => {\n      const state: CastleStateComponent = this.tm.get(entity)\n      const pos = state.hex.position\n\n      ctx.save()\n      ctx.fillStyle = \"lightgreen\"\n\n      ctx.beginPath();\n      ctx.moveTo(pos.x - (state.size / 2), pos.y - (state.size / 2))\n      ctx.lineTo(pos.x, pos.y + (state.size / 2))\n      ctx.lineTo(pos.x + (state.size / 2), pos.y - (state.size / 2))\n      ctx.fill()\n\n      // ctx.fillRect(pos.x - (state.size / 2), pos.y - (state.size / 2), state.size, state.size)\n      ctx.restore()\n    })\n    ctx.restore()\n  }\n}\n","import { Component } from '@ludic/ein'\nimport { EnemyWave, EnemyGroup } from '../utils/Waves'\n\nimport Hex from '../utils/Hex'\n\nexport default class EnemyStateComponent extends Component {\n  currentHex: Hex\n  previousHex: Hex\n  health: number\n  speed: number\n  color: string\n  size: number\n  type: string\n  wave: EnemyWave\n  group: EnemyGroup\n\n  constructor(hex: Hex, wave: EnemyWave, group: EnemyGroup, type: string = \"1\", speed: number = .1, health: number = 10, size: number = 1){\n    super()\n\n    this.currentHex = hex\n    this.previousHex = null\n    this.wave = wave\n    this.group = group\n    this.type = type\n    this.speed = speed\n    this.health = health\n    this.color = 'red'\n    this.size = size\n  }\n}\n","import Ludic, { Camera } from '@ludic/ludic'\nimport {ComponentMapper, Family, Entity, System, Engine} from '@ludic/ein'\n\nimport CastleStateComponent from '../components/CastleStateComponent'\nimport EnemyStateComponent from '../components/EnemyStateComponent'\nimport PositionComponent from '../components/PositionComponent'\n\nimport Player from '../entities/Player'\nimport Enemy from '../entities/Enemy'\nimport Tile from '../entities/Tile'\nimport Castle from '../entities/Castle'\n\nimport { Vector2Normalize } from '../utils/Euclid'\nimport Hex, { CubeCoordinate, OffsetCoordinate } from '../utils/Hex'\n\nexport default class CastleDamageSystem extends System {\n  private csm: ComponentMapper<CastleStateComponent> = ComponentMapper.getFor(CastleStateComponent)\n  private esm: ComponentMapper<EnemyStateComponent> = ComponentMapper.getFor(EnemyStateComponent)\n  private pm: ComponentMapper<PositionComponent> = ComponentMapper.getFor(PositionComponent)\n\n  public entities: Entity[]\n  public components = [CastleStateComponent, EnemyStateComponent]\n  public family: Family\n\n  constructor(){\n    super()\n    this.family = Family.one(this.components).get()\n  }\n\n  public addedToEngine(engine: Engine): void {\n    this.entities = engine.getEntitiesFor(this.family)\n    this.engine = engine\n  }\n\n  public removedFromEngine(engine: Engine): void {\n    this.entities = []\n  }\n\n  public update(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    this.entities = this.engine.getEntitiesFor(this.family)\n\n    const castles: Castle[] = this.entities.filter(entity => !!this.csm.get(entity))\n    const enemies: Enemy[]  = this.entities.filter(entity => !!this.esm.get(entity))\n\n    if(castles.length){\n      let cPos = this.pm.get(castles[0])\n      let cState = this.csm.get(castles[0])\n\n      enemies.forEach(enemy => {\n        let ePos = this.pm.get(enemy)\n\n        // If an enemy touches (aprox) the castle\n        if(Math.abs(cPos.x - ePos.x) < .05 && Math.abs(cPos.y - ePos.y) < .05){\n\n          // Reduce castle health\n          cState.health -= 1\n\n          // Remove the enemy entity\n          enemy.removing = true\n          this.engine.removeEntity(enemy)\n        }\n      })\n    }\n  }\n}\n","\n\nexport default abstract class BaseLevel {\n\n  abstract init(options?: any): void\n}","import { Component } from '@ludic/ein'\nimport { Vector2 } from '@ludic/ludic'\n\nexport default class MovementComponent extends Component {\n\tpublic velocity: Vector2 = new Vector2()\n\tpublic accel: Vector2 = new Vector2()\n}\n","import { Entity } from '@ludic/ein'\n\nimport MovementComponent from '../components/MovementComponent'\nimport PositionComponent from '../components/PositionComponent'\nimport PlayerStateComponent from '../components/PlayerStateComponent'\n\nimport Hex from '../utils/Hex'\n\nexport default class Player extends Entity {\n\n  constructor(hex: Hex){\n    super()\n\n    this.add(new PositionComponent(hex.position.x, hex.position.y))\n    this.add(new MovementComponent())\n    this.add(new PlayerStateComponent())\n  }\n}\n","import { Vector2 } from '@ludic/ludic'\nimport { Entity } from '@ludic/ein'\n\nimport PositionComponent from '../components/PositionComponent'\nimport TileStateComponent, { TileType } from '../components/TileStateComponent'\n\nimport Hex from '../utils/Hex'\n\nexport default class Tile extends Entity {\n  constructor(hex: Hex, tileType: TileType = '1', active: boolean = false){\n    super()\n    this.add(new PositionComponent(hex.position.x, hex.position.y))\n    this.add(new TileStateComponent(hex, tileType, active))\n  }\n}\n","import { Entity } from '@ludic/ein'\nimport Hex from '../utils/Hex'\n\nimport CastleStateComponent from '../components/CastleStateComponent'\nimport PositionComponent from '../components/PositionComponent'\n\nexport default class Castle extends Entity {\n  constructor(hex: Hex){\n    super()\n    this.add(new PositionComponent(hex.position.x, hex.position.y))\n    this.add(new CastleStateComponent(hex))\n  }\n}\n","import { Vector2 } from '@ludic/ludic'\n\nexport interface OffsetCoordinate {\n  q: number\n  r: number\n}\n\nexport interface AxialCoordinate {\n  q: number\n  r: number\n  s: number\n}\n\nexport interface CubeCoordinate {\n  x: number\n  y: number\n  z: number\n}\n\n\nexport default class Hex {\n  q: number\n  r: number\n  s: number\n  x: number\n  y: number\n  z: number\n  sideLength: number\n\n  constructor(x: number, y: number, z: number, sideLength: number){\n    // if((x + y + z) !== 0){ throw \"x + y + z needs to = 0\"}\n    this.x = x\n    this.y = y\n    this.z = z\n    this.q = x\n    this.r = z\n    this.sideLength = sideLength\n  }\n\n  get position(): Vector2 {\n    return Hex.cubeCoordinateToVector2({x: this.x, y: this.y, z: this.z}, this.sideLength)\n  }\n\n  static add(a: Hex, b:Hex): Hex {\n    return new Hex(a.x + b.x, a.y + b.y, a.z + b.z, a.sideLength + b.sideLength)\n  }\n\n  static subtract(a: Hex, b: Hex): Hex {\n    return new Hex(a.x - b.x, a.y - b.y, a.z - b.z, a.sideLength - b.sideLength)\n  }\n\n  static equal(a: Hex, b: Hex): boolean {\n    if(a.x == b.x && a.y == b.y && a.z == b.z){\n      return true\n    } else {\n      return false\n    }\n  }\n\n  static scale(hex: Hex, k:number): Hex {\n    return new Hex(hex.x * k, hex.y * k, hex.z * k, hex.sideLength * k)\n  }\n\n  static rotateLeft(hex: Hex): Hex {\n    return new Hex(-hex.x, -hex.y, -hex.z, hex.sideLength)\n  }\n\n  static rotateRight(hex: Hex): Hex {\n    return new Hex(-hex.x, -hex.y, -hex.z, hex.sideLength)\n  }\n\n  public static cubeDirections: CubeCoordinate[] = [\n    {x:  1,  y: -1,  z:  0},\n    {x:  1,  y:  0,  z: -1},\n    {x:  0,  y:  1,  z: -1},\n    {x:  0,  y: -1,  z:  1},\n    {x: -1,  y:  1,  z:  0},\n    {x: -1,  y:  0,  z:  1},\n  ]\n\n  static direction(direction: number): CubeCoordinate {\n    return Hex.cubeDirections[direction]\n  }\n\n  // static neighbor(a: Hex, direction: number): Hex {\n  //   let b: Hex = new Hex()\n  //   return Hex.add(a, b)\n  // }\n\n  static allNeighbors(hex: Hex): Hex[] {\n    return Hex.cubeDirections.map((d: CubeCoordinate) => {\n      return Hex.add(hex, new Hex(d.x, d.y, d.z, 0))\n    })\n  }\n\n  public static diagonals:Hex[] = [\n    new Hex(2, -1, -1, 0),\n    new Hex(1, -2, 1, 0),\n    new Hex(-1, -1, 2, 0),\n    new Hex(-2, 1, 1, 0),\n    new Hex(-1, 2, -1, 0),\n    new Hex(1, 1, -2, 0),\n  ]\n\n  static diagonalNeighbor(hex: Hex, direction: number): Hex {\n    return Hex.add(hex, Hex.diagonals[direction])\n  }\n\n  static len(hex: Hex): number {\n    return (Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2\n  }\n\n  static distance(a: Hex, b:Hex): number {\n    return Hex.len(Hex.subtract(a, b))\n  }\n\n  static areaFromSideLength(sideLength: number): number {\n    return ((3 * Math.sqrt(3)) / 2) * Math.pow(sideLength, 2)\n  }\n\n  static sideLengthFromArea(area: number): number {\n    return Math.sqrt((area / ((3 * Math.sqrt(3)) / 2)))\n  }\n\n  static offsetToCube(offsetCoordinate: OffsetCoordinate){\n    var x = offsetCoordinate.q\n    var z = offsetCoordinate.r - (offsetCoordinate.q - (offsetCoordinate.q&1)) / 2\n    var y = -x-z\n    return {x, y, z}\n  }\n\n  static cubeCoordinateToVector2(coordinate: CubeCoordinate, size: number): Vector2 {\n    var x = size * (3/2 * coordinate.x)\n    var y = size * (Math.sqrt(3)/2 * coordinate.x  +  Math.sqrt(3) * coordinate.y)\n\n    return new Vector2(x, y)\n  }\n\n  // static getCubeNeighbors(coordinate: CubeCoordinate): CubeCoordinate[] {\n  //   const cubeDirections = [\n  //     {x:  1,  y: -1,  z:  0},\n  //     {x:  1,  y:  0,  z: -1},\n  //     {x:  0,  y:  1,  z: -1},\n  //     {x:  0,  y: -1,  z:  1},\n  //     {x: -1,  y:  1,  z:  0},\n  //     {x: -1,  y:  0,  z:  1},\n  //   ]\n  //   return cubeDirections.map(direction => {\n  //     return Hex.sumCubeCoordinates(coordinate, direction)\n  //   })\n  // }\n\n  // static sumCubeCoordinates(c1: CubeCoordinate, c2: CubeCoordinate): CubeCoordinate {\n  //   return {\n  //     x: c1.x + c2.x,\n  //     y: c1.y + c2.y,\n  //     z: c1.z + c2.z\n  //   }\n  // }\n\n  static cubeToAxial(x: number, y: number, z: number): AxialCoordinate {\n    return {\n      q: x,\n      r: y,\n      s: -x - y\n    }\n  }\n\n  static axialToCube(q: number, r: number): CubeCoordinate {\n    return {\n      x: q,\n      y: r,\n      z: -q - r\n    }\n  }\n}\n","import Ludic, {Screen, Camera, Vector2 } from '@ludic/ludic'\nimport { Engine } from '@ludic/ein'\n\nimport Player from '../entities/Player'\nimport Tile from '../entities/Tile'\nimport Castle from '../entities/Castle'\n\nimport GamepadComponent from '../components/GamepadComponent'\nimport MechComponent from '../components/MechComponent'\n\nimport Hex, { OffsetCoordinate, CubeCoordinate } from './Hex'\n\nexport interface MapTile {\n  pos: CubeCoordinate\n  tileType?: string\n}\n\nexport interface Map {\n  tiles: MapTile[]\n  castles: CubeCoordinate[]\n  playerSpawnPoints: CubeCoordinate[]\n}\n\n// TODO consolidate this\ninterface LevelOptions {\n  playerMap: {[key: string]: string}\n}\n\n\nexport const generateMap = function(camera: Camera, engine: Engine, mapConfig: Map, playerMap: LevelOptions['playerMap']): void {\n  const ptm = camera.pixelsToMeters\n\n  const mapH = Math.ceil(camera.height / ptm)\n  const mapW = Math.ceil(camera.width / ptm)\n  const mapArea = mapH * mapW\n\n  const totalXTiles = 16\n  const totalYTiles = 9\n  const totalTiles =  totalXTiles * totalYTiles // 144\n\n  const w = totalXTiles * 1.5\n  const hexSideLength = mapW / w\n\n\n  // Tiles\n  let tiles: Tile[] = []\n  for(let q=0; q <= 16; q++){\n    for(let r=0; r >= -9; r--){\n\n      let cube = Hex.offsetToCube({q, r})\n      let hex = new Hex(cube.x, cube.y, cube.z, hexSideLength)\n\n      let tileType = '1'\n      let tileConfig = mapConfig.tiles.find(tile => {\n        let tileHex: Hex = new Hex(tile.pos.x, tile.pos.y, tile.pos.z, hexSideLength)\n        return Hex.equal(hex, tileHex)\n      })\n\n      tileType = tileConfig ? tileConfig.tileType : '1'\n\n      let tile = new Tile(hex, tileType)\n      engine.addEntity(tile)\n      tiles.push(tile)\n    }\n  }\n\n  // Castles\n  mapConfig.castles.forEach(c => {\n    let hex = new Hex(c.x, c.y, c.z, hexSideLength)\n    let castle = new Castle(hex)\n    engine.addEntity(castle)\n  })\n\n  // Players\n  Object.entries(playerMap).forEach(([index, type]) => {\n    let spawnPoint = mapConfig.playerSpawnPoints[parseInt(index)]\n    let hex = new Hex(spawnPoint.x, spawnPoint.y, spawnPoint.z, hexSideLength)\n    const player = new Player(hex)\n    player.add(new GamepadComponent(parseInt(index)))\n    player.add(new MechComponent(type))\n    engine.addEntity(player)\n  })\n\n}\n","import Ludic, {Screen, Camera} from '@ludic/ludic'\nimport {Engine, Entity, Component} from '@ludic/ein'\n\n// Systems\nimport PlayerMapControlSystem from '../systems/PlayerMapControlSystem'\nimport PlayerRenderSystem from '../systems/PlayerRenderSystem'\n\nimport TileRenderSystem from '../systems/TileRenderSystem'\nimport TileActivationSystem from '../systems/TileActivationSystem'\n\nimport CastleRenderSystem from '../systems/CastleRenderSystem'\nimport CastleDamageSystem from '../systems/CastleDamageSystem'\n\nimport EnemyRenderSystem from '../systems/EnemyRenderSystem'\nimport EnemyMovementSystem from '../systems/EnemyMovementSystem'\nimport EnemySpawnSystem from '../systems/EnemySpawnSystem'\n\n\n// Entities\nimport Player from '../entities/Player'\nimport Tile from '../entities/Tile'\nimport Castle from '../entities/Castle'\nimport Enemy from '../entities/Enemy'\n\nimport BaseLevel from './BaseLevel'\nimport GamepadComponent from '../components/GamepadComponent'\nimport MechComponent from '../components/MechComponent'\nimport { CameraComponentMapper } from '../components/mappers'\n\n// Map and Waves\nimport { generateMap, Map } from '../utils/Map'\n\ninterface LevelOptions {\n  playerMap: {[key: string]: string}\n}\n\nexport default class Level2 extends BaseLevel {\n  engine: Engine\n  tiles: Tile[]\n  enemies: Enemy[]\n  map: any\n  waves: any\n\n  constructor(engine: Engine){\n    super()\n    this.engine = engine\n    this.tiles = []\n    this.enemies = []\n\n    // Hack for now\n    Ludic.debug = true\n  }\n\n  init(options: LevelOptions){\n    this.initSystems()\n    const mapConfig: Map = {\n      tiles: [],\n      castles:[],\n      playerSpawnPoints: [\n        {x:1, y: 1, z: -2},\n        {x:3, y: -1, z: 2},\n      ]\n    }\n    generateMap(CameraComponentMapper.get(this.engine.getSingleton()).camera, this.engine, mapConfig, options.playerMap)\n  }\n\n  initSystems(){\n    this.engine.addSystem(new PlayerMapControlSystem(this.engine))\n    this.engine.addSystem(new TileRenderSystem())\n    this.engine.addSystem(new CastleRenderSystem())\n    this.engine.addSystem(new PlayerRenderSystem())\n    this.engine.addSystem(new TileActivationSystem())\n    this.engine.addSystem(new CastleDamageSystem())\n  }\n}\n","import { System } from '@ludic/ein'\nimport Ludic from '@ludic/ludic';\nimport { CameraComponentMapper } from '../components/mappers'\n\nexport default class CameraRenderSystem extends System {\n\n  update(){\n    const {camera} = this.engine.getSingletonComponent(CameraComponentMapper)\n    camera.update(Ludic.canvas.context)\n  }\n}","import Ludic, {Screen, Camera, ScreenManager, Vector2} from '@ludic/ludic'\nimport {Engine, Entity} from '@ludic/ein'\n\nimport MapGenerator from '../levels/MapGenerator'\nimport Player from '../entities/Player'\nimport BaseLevel from '../levels/BaseLevel'\nimport CameraComponent from '../components/CameraComponent'\nimport CameraRenderSystem from '../systems/CameraRenderSystem'\n\nexport default class GameScreen extends Screen {\n  engine: Engine\n  player: Player\n  level: BaseLevel\n\n  constructor() {\n    super()\n    this.engine = new Engine()\n    // this.camera = new Camera(Ludic.canvas)\n\n    // this.camera.centerWorldToCamera()\n    this.createCamera()\n    this.level = new MapGenerator(this.engine)\n  }\n\n  createCamera(){\n    const camera = new Camera(Ludic.canvas)\n    camera.offset = new Vector2(0, camera.height)\n    camera.pixelsToMeters = 20\n    // camera.centerWorldToCamera();\n    this.engine.addSingletonComponent(new CameraComponent(camera))\n    this.engine.addSystem(new CameraRenderSystem(0))\n  }\n\n  public onAddedToManager(manager: ScreenManager, finalData?: {[key: number]: string}) {\n    this.level.init({\n      playerMap: finalData\n    })\n  }\n\n  update(delta: number){\n    Ludic.canvas.context.save()\n    Ludic.canvas.clear()\n    this.engine.update(delta)\n    Ludic.canvas.context.restore()\n  }\n}\n","import { System, Family, EntityListener, Entity, ComponentMapper } from '@ludic/ein'\nimport Ludic from '@ludic/ludic'\nimport Player from '/src/game/entities/Player'\nimport GamepadComponent from '/src/game/components/GamepadComponent'\nimport PlayerStateComponent from '/src/game/components/PlayerStateComponent'\nimport MechComponent from '/src/game/components/MechComponent'\nimport PositionComponent from '/src/game/components/PositionComponent'\nimport Signal from '@ludic/ein/lib/Signal'\nimport Listener from '@ludic/ein/lib/Listener'\nimport { MechComponentMapper, GamepadComponentMapper } from '/src/game/components/mappers'\n\nexport default class CharacterSelectSystem extends System implements EntityListener {\n\n  private players = new Map<string, any>()\n  private family: Family\n  private mechFamily: Family\n\n  private playerMechMap = new WeakMap<object, Player>()\n  private playerState = new WeakMap<Player, PlayerSelectState>()\n\n  private positionMapper = new ComponentMapper(PositionComponent)\n  private gamepadMapper = new ComponentMapper(GamepadComponent)\n\n  private readySignal = new Signal<{[key: number]: string}>()\n\n  constructor(){\n    super()\n    this.family = Family.all([GamepadComponent, PlayerStateComponent]).get()\n    this.mechFamily = Family.all([MechComponent, PositionComponent]).exclude([GamepadComponent]).get()\n  }\n\n  addedToEngine(){\n    this.engine.addEntityListener(this, 1, this.family)\n  }\n\n  entityAdded(player: Player){\n    // player added, attach to first empty mech\n    const mech = this.getNextEmptyMech()\n    this.playerMechMap.set(mech, player)\n    this.playerState.set(player, {moving: false, toggling: false})\n  }\n  entityRemoved(entity: Entity){\n\n  }\n\n  public listenForReady(cb: Listener<{[key: number]: string}>['receive']){\n    this.readySignal.add({receive: cb})\n  }\n\n  private getMechs(){\n    // sorted left to right\n    return this.engine.getEntitiesFor(this.mechFamily).slice().sort((mechA, mechB) => {\n      const posA = this.positionMapper.get(mechA)\n      const posB = this.positionMapper.get(mechB)\n      return posA.x - posB.x\n    })\n  }\n\n  private getPlayers(){\n    return this.engine.getEntitiesFor(this.family)\n  }\n\n  public update(){\n    this.getMechs().forEach((mech, ix) => {\n      // get the player for this mech and set its pos to the mech's\n      const player = this.playerMechMap.get(mech)\n      const mechPos = this.positionMapper.get(mech)\n      if(player != null){\n        const pos = this.positionMapper.get(player)\n        pos.x = mechPos.x + 1.2\n        pos.y = mechPos.y - 3\n\n        const gp = this.gamepadMapper.get(player)\n        const gamepad = Ludic.input.gamepad.get(gp.index)\n        const playerSelectState = this.playerState.get(player)\n        const playerSelectedMech = MechComponentMapper.get(player)\n\n        const leftOrRight = gamepad.left.pressed || gamepad.right.pressed\n\n        // move the gamepad indicator using the dpad\n        if(!playerSelectState.moving && playerSelectedMech == null){\n          if(gamepad.right.pressed) {\n            playerSelectState.moving = true\n            // find the next available mech for this player to move to\n            const nextMech = this.getNextEmptyMech(ix)\n            // swap this player and mech mapping\n            this.playerMechMap.delete(mech)\n            this.playerMechMap.set(nextMech, player)\n          } else if(gamepad.left.pressed) {\n            playerSelectState.moving = true\n            // find the next available mech for this player to move to\n            const nextMech = this.getNextEmptyMech(ix, true)\n            // swap this player and mech mapping\n            this.playerMechMap.delete(mech)\n            this.playerMechMap.set(nextMech, player)\n          }\n        }\n        // reset moving when not using dpad\n        if(!leftOrRight && playerSelectState.moving){\n          playerSelectState.moving = false\n        }\n\n        // check for character select\n        if(gamepad.cross.buttonUp){\n          playerSelectState.toggling = true\n          const mechComponent = MechComponentMapper.get(mech)\n          // toggle the mech component on the player entity\n          if(playerSelectedMech != null){\n            player.remove(MechComponent)\n          } else {\n            player.add(new MechComponent(mechComponent.type))\n          }\n        }\n\n        if(gamepad.start.buttonUp){\n          this.ready()\n        }\n      }\n    })\n  }\n\n  private getNextEmptyMech(after?: number, last: boolean = false){\n    let mechs = this.getMechs().slice()\n    if(last){\n      mechs.reverse() // in-place\n    }\n    // if we have after value, cycle the mechs array\n    if(after != null){\n      const end = last ? mechs.length - after : after\n      const rmItems = mechs.splice(0, end)\n      mechs.push(...rmItems)\n    }\n    return mechs.find((mech) => !this.playerMechMap.has(mech))\n  }\n\n  private ready(){\n    this.setProcessing(false)\n    // create a data packet of player gamepad indexes to player mech data\n    const data = this.getPlayers().map(player => [GamepadComponentMapper.get(player).index, MechComponentMapper.get(player).type])\n      .reduce((data, [index, type]: [number, string])=> ({...data, [index]: type}), {})\n    this.readySignal.dispatch(data)\n  }\n\n}\n\ninterface PlayerSelectState {\n  moving: boolean\n  toggling: boolean\n}","import { Component } from '@ludic/ein'\n\nexport default class FillComponent extends Component {\n  fillStyle: string | CanvasGradient | CanvasPattern\n  constructor(fillStyle: FillComponent['fillStyle']){\n    super()\n    this.fillStyle = fillStyle\n  }\n}","import { System } from '@ludic/ein'\nimport Ludic from '@ludic/ludic'\nimport Player from '../entities/Player'\nimport GamepadComponent from '../components/GamepadComponent'\nimport FillComponent from '../components/FillComponent'\nimport PlayerStateComponent from '../components/PlayerStateComponent'\n\nimport Hex from '../utils/Hex'\n\nexport default class PlayerCreate extends System {\n\n  players = new Map<string, Player>()\n  playerColors: {[index: number]: string} = {\n    0: 'blue',\n    1: 'orange',\n    2: 'green',\n    3: 'purple',\n  }\n  time: number = Date.now()\n\n  constructor(){\n    super(100)\n  }\n\n  update(){\n    // Loop over gamepads until we find a new one, then create a player for it\n    Object.entries(Ludic.input.gamepad.state).forEach(([indexKey, gamepad]) => {\n      // console.log(indexKey, gamepad.gamepad)\n      // check if gamepad exists\n      if(gamepad.gamepad != null){\n        // check if we already have a player for this index\n        if(!this.players.has(indexKey)){\n          // create a player\n          const player = this.createPlayer(gamepad.gamepad)\n          // set the player onto the map and add to engine\n          this.players.set(indexKey, player)\n          this.engine.addEntity(player)\n        }\n      }\n    })\n    // We do not need to process this system too often so we\n    // time it out for 500ms\n    this.sleep(500)\n  }\n\n  createPlayer(gamepad: Gamepad){\n    const player = new Player(new Hex({q: 1, r: 1}, 1))\n    player.add(new FillComponent(this.playerColors[gamepad.index]))\n    player.add(new GamepadComponent(gamepad.index))\n    player.add(new PlayerStateComponent())\n    return player\n  }\n}\n","import { System, Family, Entity, ComponentMapper } from '@ludic/ein'\nimport GamepadComponent from '../../components/GamepadComponent';\nimport Ludic, { Camera } from '@ludic/ludic';\nimport PositionComponent from '../../components/PositionComponent';\nimport MechComponent from '../../components/MechComponent';\n\nexport default class CharacterSelectRenderer extends System {\n\n  family: Family\n  mechFamily: Family\n  camera: Camera\n\n  positionMapper = new ComponentMapper(PositionComponent)\n  gamepadMapper = new ComponentMapper(GamepadComponent)\n  mechMapper = new ComponentMapper(MechComponent)\n\n  constructor(camera: Camera){\n    super()\n    this.family = Family.all([GamepadComponent]).get()\n    this.mechFamily = Family.all([MechComponent, PositionComponent]).exclude([GamepadComponent]).get()\n    this.camera = camera\n  }\n\n  getEntities(){\n    return this.engine.getEntitiesFor(this.family)\n  }\n  getMechs(){\n    return this.engine.getEntitiesFor(this.mechFamily)\n  }\n\n  update(){\n    const ctx = Ludic.canvas.context\n\n    ctx.save()\n    Ludic.canvas.clear()\n    this.camera.update(ctx)\n    this.camera.drawAxes(ctx)\n\n    // render the mechs in a row\n    this.getMechs().forEach((mech) => {\n      ctx.save()\n\n      const pos = this.positionMapper.get(mech)\n      const mechComp = this.mechMapper.get(mech)\n      ctx.fillStyle = mechComp.type\n      ctx.fillRect(pos.x, pos.y, 3, 3)\n\n      ctx.restore()\n    })\n    // render the player indicator\n    this.getEntities().forEach((entity: Entity) => {\n      ctx.save()\n    \n      const pos = this.positionMapper.get(entity)\n      const gamepad = this.gamepadMapper.get(entity)\n      const mechComp = this.mechMapper.get(entity)\n\n      // draw the text\n      ctx.fillStyle = mechComp != null ? mechComp.type : 'black'\n      ctx.scale(1, -1)\n      ctx.font = '1px sans-serif'\n      ctx.fillText(''+(gamepad.index+1), pos.x, pos.y)\n\n      ctx.restore()\n    })\n    ctx.restore()\n  }\n}","import Ludic, { Screen, Camera } from '@ludic/ludic'\nimport { Engine } from '@ludic/ein';\nimport CharacterSelectSystem from '../systems/characterSelect/CharacterSelectSystem';\nimport PlayerCreate from '../systems/PlayerCreate';\nimport CharacterSelectRenderer from '../systems/characterSelect/CharacterSelectRenderer';\nimport PositionComponent from '../components/PositionComponent';\nimport MechComponent from '../components/MechComponent';\n\nexport default class CharacterSelectScreen extends Screen {\n  engine: Engine\n  camera: Camera\n  selectSystem = new CharacterSelectSystem()\n\n  constructor(){\n    super()\n    this.engine = new Engine()\n    this.camera = new Camera(Ludic.canvas)\n    this.camera.centerWorldToCamera()\n    // this.camera.pixelsToMeters = 20\n  }\n\n  onAddedToManager(){\n    this.engine.addSystem(new PlayerCreate())\n    this.engine.addSystem(this.selectSystem)\n    this.selectSystem.listenForReady(this.onSelectReady.bind(this))\n    this.engine.addSystem(new CharacterSelectRenderer(this.camera))\n    // init the class entities\n    this.initMechClasses()\n  }\n\n  onSelectReady(signal: any, data: {[key: number]: string}){\n    this.finish(data)\n  }\n\n  initMechClasses(){\n    const mech1 = this.engine.createEntity()\n    mech1.add(new PositionComponent(-10, 2))\n    mech1.add(new MechComponent('red'))\n    this.engine.addEntity(mech1)\n    \n    const mech2 = this.engine.createEntity()\n    mech2.add(new PositionComponent(-4, 2))\n    mech2.add(new MechComponent('green'))\n    this.engine.addEntity(mech2)\n    \n    const mech3 = this.engine.createEntity()\n    mech3.add(new PositionComponent(2, 2))\n    mech3.add(new MechComponent('blue'))\n    this.engine.addEntity(mech3)\n    \n    const mech4 = this.engine.createEntity()\n    mech4.add(new PositionComponent(8, 2))\n    mech4.add(new MechComponent('orange'))\n    this.engine.addEntity(mech4)\n  }\n\n  update(delta: number){\n    this.engine.update(delta)\n  }\n}","import Ludic, { LudicOptions, ScreenManager, ScreenManagerListener, Screen, GamepadController } from '@ludic/ludic'\nimport GameScreen from './screens/GameScreen'\nimport MapGeneratorScreen from './screens/MapGeneratorScreen'\nimport CharacterSelectScreen from './screens/CharacterSelectScreen'\n\nexport default class Arce extends Ludic implements ScreenManagerListener {\n  public screenManager: ScreenManager\n\n  constructor(opts: LudicOptions){\n    super(opts)\n\n    Ludic.input.addController(new GamepadController())\n\n    this.screenManager = new ScreenManager()\n    this.screenManager.addScreenEventListener(this)\n    // this.screenManager.addScreen(new GameScreen())\n    this.screenManager.addScreen(new CharacterSelectScreen())\n  }\n\n  onScreenFinished(screen: Screen, manager: ScreenManager, finalData: Screen['_finalData']): void {\n    if(screen instanceof CharacterSelectScreen){\n      // replace this screen with a game screen\n      // this.screenManager.addScreen(new GameScreen(), true)\n      this.screenManager.addScreen(new MapGeneratorScreen(), true)\n    }\n  }\n  onScreenAdded(screen: Screen, manager: ScreenManager, replace: boolean): void {\n\n  }\n  onScreensRemoved(screens: Screen[], manager: ScreenManager): void {\n\n  }\n\n  onWarnPopScreen(stack: Screen[], manager: ScreenManager): void {\n\n  }\n\n  update(time: number, delta: number){\n    super.update(time, delta)\n    this.screenManager.update(delta)\n  }\n}\n","import Game from '/src/game/game'\n\nnew Game({\n  el: '#game',\n}).start()\n"]}