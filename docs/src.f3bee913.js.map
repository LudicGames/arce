{"version":3,"sources":["webpack://Ludic/src/utils/vector2.ts","webpack://Ludic/webpack/universalModuleDefinition","webpack://Ludic/webpack/bootstrap","webpack://Ludic/src/asset/asset.ts","webpack://Ludic/src/asset/assetLoader.ts","webpack://Ludic/src/asset/assetManager.ts","webpack://Ludic/src/asset/audioAsset.ts","webpack://Ludic/src/asset/audioAssetLoader.ts","webpack://Ludic/src/asset/imageAsset.ts","webpack://Ludic/src/asset/imageAssetLoader.ts","webpack://Ludic/src/core/app.ts","webpack://Ludic/src/core/camera.ts","webpack://Ludic/src/core/canvas.ts","webpack://Ludic/src/input/gamepad/controller.ts","webpack://Ludic/src/input/gamepad/maps.ts","webpack://Ludic/src/input/keyboard/controller.ts","webpack://Ludic/src/input/manager.ts","webpack://Ludic/src/input/mouse/controller.ts","webpack://Ludic/src/main.ts","webpack://Ludic/src/reactivity/dep.ts","webpack://Ludic/src/reactivity/lambda.ts","webpack://Ludic/src/reactivity/state.ts","webpack://Ludic/src/render/renderer.ts","webpack://Ludic/src/screen/screen.ts","webpack://Ludic/src/screen/screenManager.ts","node_modules/ecsy/build/ecsy.module.js","src/game/components.ts","src/game/utils/Hex.ts","src/game/systems/PlayerInitSystem.ts","src/game/systems/PlayerRenderSystem.ts","src/game/systems/PlayerControlSystem.ts","src/game/systems/CastleInitSystem.ts","src/game/systems/CastleRenderSystem.ts","src/game/systems/EnemySpawnSystem.ts","src/game/systems/EnemyRenderSystem.ts","src/game/utils/Euclid.ts","src/game/systems/EnemyMovementSystem.ts","src/game/systems/TileInitSystem.ts","src/game/systems/TileRenderSystem.ts","src/game/systems/TileActivationSystem.ts","../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","../src/directives/style-map.ts","../src/directives/class-map.ts","src/game/systems/TowerMenuRenderSystem.ts","src/game/systems/index.ts","src/game/systems/TowerMenuControlSystem.ts","src/game/levels/level1/wavesConfig.ts","src/game/levels/level1/mapConfig.json","src/game/levels/level1/level.ts","src/game/systems/CameraRenderSystem.ts","src/game/screens/GameScreen.ts","src/game/game.ts","src/index.ts"],"names":["SystemManager","constructor","world","_systems","_executeSystems","registerSystem","System","attributes","system","init","order","length","push","execute","sortSystems","sort","a","b","priority","getSystem","find","s","getSystems","removeSystem","index","indexOf","splice","delta","time","forEach","enabled","initialized","canExecute","startTime","performance","now","executeTime","clearEvents","stats","numSystems","systems","i","systemStats","name","queries","ctx","EventDispatcher","_listeners","fired","handled","addEventListener","eventName","listener","listeners","undefined","hasEventListener","removeEventListener","listenerArray","dispatchEvent","entity","component","array","slice","call","resetCounters","getName","Component","componentPropertyName","charAt","toLowerCase","queryKey","Components","names","n","T","operator","map","x","join","Query","manager","NotComponents","Error","entities","eventDispatcher","reactive","key","_entities","match","addEntity","prototype","ENTITY_ADDED","removeEntity","ENTITY_REMOVED","hasAllComponents","hasAnyComponents","numComponents","numEntities","COMPONENT_CHANGED","nextId","Entity","_world","id","_ComponentTypes","_components","_componentsToRemove","_ComponentTypesToRemove","alive","getComponent","getRemovedComponent","getComponents","getComponentsToRemove","getComponentTypes","getMutableComponent","query","addComponent","values","entityAddComponent","removeComponent","forceRemove","entityRemoveComponent","hasComponent","hasRemovedComponent","removeAllComponents","entityRemoveAllComponents","reset","remove","ObjectPool","initialSize","freeList","count","extraArgs","arguments","Array","shift","createElement","expand","aquire","item","Math","round","pop","release","totalSize","totalFree","totalUsed","QueryManager","_queries","onEntityRemoved","queryName","onEntityComponentAdded","onEntityComponentRemoved","getQuery","SystemStateComponent","EntityManager","componentsManager","_queryManager","_entityPool","entitiesWithComponentsToRemove","entitiesToRemove","numStateComponents","createEntity","ENTITY_CREATED","__proto__","componentPool","getComponentsPool","copy","componentAddedToEntity","COMPONENT_ADDED","immediately","COMPONENT_REMOVE","_entityRemoveComponentSync","componentName","propName","_componentPool","componentRemovedFromEntity","j","_releaseEntity","removeAllEntities","processDeferredRemoval","queryComponents","numQueries","Object","keys","numComponentPool","cname","pool","used","size","DummyObjectPool","Infinity","ComponentManager","registerComponent","console","warn","World","entityManager","systemManager","eventQueues","CustomEvent","event","detail","window","SystemClass","stop","play","log","JSON","stringify","_mandatoryQueries","queryConfig","components","mandatory","results","eventMapping","added","removed","changed","listen","eventList","isArray","changedComponent","toJSON","json","Not","TagComponent","createType","typeDefinition","mandatoryFunctions","undefinedFunctions","filter","f","isType","Types","Number","baseType","isSimpleType","create","defaultValue","src","clear","Boolean","String","dst","standardTypes","number","boolean","string","inferType","value","createComponentClass","schema","type","default","attr","defineProperty","knownTypes","module","exports","tiles","coords","y","z","tileType","castles","playerSpawnPoints"],"mappings":"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","file":"src.f3bee913.js","sourceRoot":"..","sourcesContent":["export class Vector2 {\n  x: number\n  y: number\n  \n  constructor(x = 0,y = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  get_x(){\n    return this.x\n  }\n  get_y(){\n    return this.y\n  }\n  \n  set_x(x: number){\n    this.x = x\n  }\n  set_y(y: number){\n    this.y = y\n  }\n\n  magnitude(){\n    return Math.sqrt(this.x*this.x + this.y*this.y)\n  }\n  normalize(): this {\n    const m = this.magnitude()\n    if(m > 0){\n      this.scale(1/m)\n    }\n    return this\n  }\n  scale(val: number): this {\n    this.x = this.x * val\n    this.y = this.y * val\n    return this\n  }\n}\nexport default Vector2","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ludic\"] = factory();\n\telse\n\t\troot[\"Ludic\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","import { AssetManager } from './assetManager';\n\nexport type OnLoadResolve = (value?: Asset) => void\nexport type OnLoadReject = (reason?: any) => void\n\nabstract class Asset {\n\n  name: string\n  url: string\n  type: string\n  options: object\n  data: any\n  promise: Promise<any>\n  \n  constructor(name: string, url: string, type: string, options: object) {\n    this.name = name\n    this.url = url\n    this.type = type\n    this.options = options || {}\n  }\n\n  /**\n   * Initializes the loading of this assets data.\n   * ie. An ImageAsset would set the image src to kick of the loading.\n   */\n  load(){\n  }\n\n  /**\n   * Used by promise to resolve the asset's data after loading is complete\n   * \n   * @param resolve promise resolve\n   * @param reject promise reject\n   */\n  onload(resolve: OnLoadResolve, reject: OnLoadReject): ()=>void {\n    return () => {\n      resolve(this)\n    }\n  }\n\n  onAssetResolve(manager: AssetManager){\n  }\n\n  onAssetReject(manager: AssetManager){\n\n  }\n\n  destroy(){\n    this.name = null\n    this.url = null\n    this.type = null\n    this.options = null\n    this.data = null\n  }\n}\n\nexport default Asset\n","import Asset from './asset'\n\nexport default interface AssetLoader {\n  load(name: string, url: string, type: string, options: any): Asset\n}\nexport const t = {} // this is a hack to make this file generate a declaration file in dist. (https://github.com/s-panferov/awesome-typescript-loader/issues/432)","// import ImageAsset from './imageAsset'\n// import RubeAsset from './rubeAsset'\n// import RubeImageAsset from './rubeImageAsset'\nimport ImageLoader from './imageAssetLoader'\nimport AudioLoader from './audioAssetLoader'\nimport Asset from './asset'\nimport AssetLoader from './assetLoader'\n\nexport type AssetsLoadedCallback = (manager: AssetManager)=>void\n\nclass AssetManager {\n  assets: {[key: string]: Asset}\n  loadQueue: Asset[]\n  promiseQueue: Promise<any>[]\n  loaders: {[key: string]: AssetLoader}\n  loading: boolean\n  \n  private finalPromise: Promise<any>\n  private onAssetsLoadedCallback: AssetsLoadedCallback\n\n  constructor() {\n    this.assets = {}\n\n    this.loadQueue = []\n    this.promiseQueue = []\n    this.loaders = {}\n\n\n    this.addLoader('image', ImageLoader)\n    this.addLoader('audio', AudioLoader)\n  }\n\n  loadResource(name: string, url: string, type: string, options: any, overwrite: boolean){\n    let promise = null\n    // first check if we have the asset\n    if(!this.assets[name] || overwrite){\n      let asset = this.NewAsset(name, url, type, options)\n      if(asset != null){\n        this.loadQueue.push(asset)\n\n        this.loading = true\n\n        promise = asset.promise.then(this.onAssetResolve.bind(this), this.onAssetReject.bind(this))\n      }\n    }\n    return promise\n  }\n\n  getAsset(name: string){\n    return this.assets[name]\n  }\n\n  getImage(name: string){\n    let asset = this.getAsset(name)\n\n    switch (asset.type) {\n      case 'image':\n      case 'rubeImage':\n        return asset.data\n      default:\n        return null\n    }\n  }\n\n  getData(name: string){\n    return this.getAsset(name).data\n  }\n\n  onAssetResolve(asset: Asset){\n    this.assets[asset.name] = asset\n    asset.onAssetResolve(this)\n    return asset\n  }\n\n  onAssetReject(){\n    console.log('rejected: ',arguments)\n    return Promise.reject({\n      reason: 'onAssetReject'\n    })\n  }\n\n  isLoading(){\n    return this.loading\n  }\n\n  update(){\n    if(this.loadQueue.length==0){\n      if(!this.finalPromise){\n        this.finalPromise = Promise.all(this.promiseQueue).then(()=>{\n          if(this.finalPromise){ // [tries to*] assures that this is not called prematurely if an asset is added late\n            this.assetsLoaded.apply(this, arguments)\n            this.promiseQueue = [] // reset promise queue to free objects\n          }\n        })\n      }\n    } else {\n      this.finalPromise = null\n      let asset = this.loadQueue.shift()\n      this.promiseQueue.push(asset.promise)\n      asset.load()\n    }\n\n  }\n\n  assetsLoaded(){\n    if(this.onAssetsLoadedCallback){\n      this.onAssetsLoadedCallback(this)\n    }\n    this.loading = false\n  }\n\n  setOnAssetsLoadedCallback(callback: AssetsLoadedCallback){\n    this.onAssetsLoadedCallback = callback\n  }\n\n  NewAsset(name: string, url: string, type: string, options: any): Asset | null {\n    type = type || 'image'\n\n    let loader = this.loaders[type]\n\n    if(loader){\n      return loader.load(name, url, type, options)\n    } else {\n      return null\n    }\n  }\n\n  destroyAsset(asset: Asset){\n    delete this.assets[asset.name]\n    asset.destroy()\n  }\n\n  addLoader(fileTypes: string|string[], loader: AssetLoader){\n    if(typeof fileTypes === 'string'){\n      fileTypes = [fileTypes]\n    }\n\n    fileTypes.forEach((type)=>{\n      this.loaders[type] = loader\n    })\n  }\n}\n\nexport { AssetManager }\nexport default new AssetManager()\n","import Asset, { OnLoadResolve, OnLoadReject } from './asset'\n\nclass AudioAsset extends Asset {\n  context: AudioContext\n  request: XMLHttpRequest\n\n  constructor(name: string, url: string, type: string, options: any) {\n    super(name, url, type || 'audio', options)\n    this.context = new AudioContext()\n    this.promise = new Promise((resolve,reject)=>{\n      this.request = new XMLHttpRequest()\n      this.request.open(\"GET\", this.url, true)\n      this.request.responseType = \"arraybuffer\"\n      this.request.onreadystatechange = this.onload(resolve, reject)\n    })\n  }\n\n  load(){\n    this.request.send()\n  }\n\n  onload(resolve: OnLoadResolve, reject: OnLoadReject){\n    return () => {\n      if (this.request.readyState == XMLHttpRequest.DONE) {\n        if(this.request.status == 200){\n          this.context.decodeAudioData(\n            this.request.response,\n            (buffer) => {\n              if (!buffer) {\n                console.error('AudioAsset: Error decoding file data: ' + this.url)\n                reject(this)\n                return\n              }\n              this.data = buffer\n              resolve(this)\n            }, (error) => {\n              console.error('AudioAsset: decodeAudioData error', error)\n              reject(this)\n            }\n          )\n        } else {\n          console.error('AudioAsset: Request failure: ', this.request.status, this.request.statusText, this.request)\n        }\n      }\n    }\n  }\n}\n\nexport default AudioAsset\n","import AudioAsset from './audioAsset'\nimport AssetLoader from './assetLoader'\n\nclass AudioAssetLoader implements AssetLoader {\n\n  load(name: string, url: string, type: string, options: any){\n    return new AudioAsset(name, url, type, options)\n  }\n}\n\nexport default new AudioAssetLoader()\n","import Asset, { OnLoadResolve, OnLoadReject } from './asset'\n\nclass ImageAsset extends Asset {\n\n  constructor(name: string, url: string, type: string, options: any) {\n    super(name, url, type || 'image', options)\n\n    this.data = new Image()\n    this.promise = new Promise((resolve,reject)=>{\n      this.data.onload = this.onload(resolve,reject)\n    })\n  }\n\n  load(){\n    this.data.src = this.url\n  }\n}\n\nexport default ImageAsset\n","import ImageAsset from './imageAsset'\nimport AssetLoader from './assetLoader'\n\nclass ImageAssetLoader implements AssetLoader {\n\n  load(name: string, url: string, type: string, options: any): ImageAsset {\n    return new ImageAsset(name, url, type, options)\n  }\n}\n\nexport default new ImageAssetLoader()\n","import Canvas from './canvas'\nimport InputManager from '../input/manager'\n\nexport interface LudicPlugin {\n  (app: any, opts?: any): void\n}\nexport interface UpdateFunction {\n  (time?: number, delta?: number): void\n}\n\nexport interface LudicOptions {\n  el: string | HTMLCanvasElement\n  plugins?: Array<LudicPlugin>\n}\n\nexport interface LudicConstructor {\n  $instance: LudicInstance\n  debug: boolean\n  canvas: Canvas\n  input: InputManager\n  $running: boolean\n  new (opts: LudicOptions): LudicInstance\n  registerUpdateFunction(fn: UpdateFunction): void\n}\n\nclass LudicInstance {\n  static debug: boolean\n  static $instance: LudicInstance\n  static canvas: Canvas\n  static input: InputManager = new InputManager()\n  static $running: boolean = false\n\n  private requestAnimationFrame: Window['requestAnimationFrame']\n  private lastRunTime: number\n  private updateFunctions: UpdateFunction[] = []\n\n  static registerUpdateFunction(fn: UpdateFunction){\n    this.$instance.updateFunctions.push(fn)\n  }\n\n  constructor(opts: LudicOptions){\n    if(Ludic.$instance) return Ludic.$instance\n\n    const {el, plugins = []} = opts\n\n    Ludic.$instance = this\n    Ludic.canvas = new Canvas(el)\n\n    Ludic.registerUpdateFunction((time, delta) => Ludic.input.update(time, delta))\n\n    plugins.forEach(p => this.install(p))\n    this.requestAnimationFrame = (()=>{\n      return  window.requestAnimationFrame       ||\n              window.webkitRequestAnimationFrame ||\n              window.mozRequestAnimationFrame    ||\n              window.oRequestAnimationFrame      ||\n              window.msRequestAnimationFrame\n    })().bind(window)\n    this.animate = this.animate.bind(this)\n  }\n\n  public start(): void {\n    Ludic.$running = true\n    this.lastRunTime = performance.now()\n    this.requestAnimationFrame(this.animate)\n  }\n\n  private animate(time: number): void {\n    this.requestAnimationFrame(this.animate)\n    let now = performance.now()\n    let delta = now - this.lastRunTime\n    this.updateFunctions.forEach(fn => fn(time, delta))\n    this.update(time, delta)\n    this.lastRunTime = now\n  }\n\n  update(time: number, delta: number): void { }\n\n  install(plugin: LudicPlugin){\n    plugin(Ludic)\n  }\n\n}\n\nexport const Ludic: LudicConstructor = LudicInstance\n\nexport default Ludic\n","import Canvas from './canvas'\nimport Vector2 from '../utils/vector2'\n\n// PTM: Pixels to Meters ratio\nconst DEFAULT_PTM = 32\n\nconst DEFAULTS: CameraOptions = {\n  inverseY: true,\n  inverseX: false,\n  x: 0,\n  y: 0,\n  pixelsToMeters: DEFAULT_PTM,\n  width: 300,\n  height: 150,\n}\n\nexport interface CameraOptions {\n  inverseY: boolean\n  inverseX: boolean\n  x: number\n  y: number\n  pixelsToMeters: number\n  width: number\n  height: number\n}\n\nexport interface CameraBounds {\n  x: number\n  y: number\n  width: number\n  height: number\n}\nexport interface ViewportBounds {\n  x: number\n  y: number\n  w: number\n  h: number\n}\n\nexport type RenderingContext2D = CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\n\nexport class Camera {\n\n  x: number\n  y: number\n  width: number\n  height: number\n  inverseX: boolean\n  inverseY: boolean\n  pixelsToMeters: number\n\n  viewCenterPixel: Vector2 = new Vector2(0,0)\n  singleWorldPoint: Vector2 = new Vector2(0,0)\n  singlePixelPoint: Vector2 = new Vector2(0,0)\n  offset: Vector2 = new Vector2(0,0)\n  futurePos: Vector2 = new Vector2(0,0)\n\n  /**\n   * `new Camera(options)`\n   * @param {object} [options] - options object\n   * @param {boolean} [options.inverseY=true] - make 'y' axis point up\n   * @param {boolean} [options.inverseX=false] - make 'x' axis point left\n   * @param {number} [options.x=0] - 'x' coordinate to start the camera\n   * @param {number} [options.y=0] - 'y' coordinate to start the camera\n   * @param {number} [options.width=app.canvas.width()] - width of the camera view\n   * @param {number} [options.height=app.canvas.height()] - height of the camera view\n   *\n   * `new Camera({Canvas})`\n   * @param {Canvas} [canvas] - optional canvas to provide dimensions\n   *\n   * `new Camera(ptm)` - assumes fill canvas width/height\n   * @param {number} [ptm] - pixels to meters scaling factor\n   *\n   * `new Camera(width,height)`\n   * @param {number} [width] - width of the camera view\n   * @param {number} [height] - height of the camera view\n   *\n   * `new Camera(x,y,width,height)`\n   * @param {number} [x] - 'x' coordinate to start the camera\n   * @param {number} [y] - 'y' coordinate to start the camera\n   * @param {number} [width] - width of the camera view\n   * @param {number} [height] - height of the camera view\n   */\n  constructor(canvas: Canvas)\n  constructor(pixelsToMeters: number)\n  constructor(width: number, height: number)\n  constructor(x: number, y: number, width: number, height: number)\n  constructor(...args: any[]){\n    let options = Object.assign({},DEFAULTS)\n    if(args.length === 1){\n      const arg0 = args[0]\n      if(typeof arg0 === 'object'){\n        if(arg0 instanceof Canvas){\n          options.width = arg0.element.width\n          options.height = arg0.element.height\n        } else {\n          // options argument\n          options = Object.assign(options, arg0)\n        }\n      } else if(typeof arg0 === 'number'){\n        // arg is ptm\n        options.pixelsToMeters = arg0\n      } else {\n        console.warn(`Camera::Unknown single argument '${typeof arg0}'.`, args)\n      }\n    } else if(args.length === 2) {\n      // width and height\n      let [width, height] = args\n      options.width = width\n      options.height = height\n    } else if(args.length === 4){\n      // x,y,width,height\n      let [x,y,width,height] = args\n      options.x = x\n      options.y = y\n      options.width = width\n      options.height = height\n    } else if(args.length === 0) {\n      console.warn(`Camera::Initialized without any args.`, args)\n    } else if(args.length !== 0) {\n      console.warn(`Camera::Unknown args.`, args)\n    }\n\n    // apply the options\n    this.x = options.x\n    this.y = options.y\n    this.width = options.width\n    this.height = options.height\n    this.inverseX = options.inverseX\n    this.inverseY = options.inverseY\n    this.pixelsToMeters = options.pixelsToMeters\n\n    this.updateEnvironmentVariables()\n  }\n\n  update(ctx: RenderingContext2D){\n    this.setTransform(ctx)\n  }\n\n  drawAxes(ctx: RenderingContext2D) {\n    ctx.save()\n    ctx.lineWidth = 1/this.pixelsToMeters\n    ctx.strokeStyle = 'rgb(192,0,0)'\n    ctx.beginPath()\n    ctx.moveTo(0, 0)\n    ctx.lineTo(1, 0)\n    ctx.stroke()\n    ctx.strokeStyle = 'rgb(0,192,0)'\n    ctx.beginPath()\n    ctx.moveTo(0, 0)\n    ctx.lineTo(0, 1)\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  drawBounds(ctx: RenderingContext2D, color='red'){\n    let br = this.getViewportBounds()\n    ctx.save()\n    ctx.strokeStyle = color\n    ctx.lineWidth = 1/this.pixelsToMeters\n    ctx.strokeRect(br.x, br.y, br.w-br.x, br.h-br.y)\n    ctx.restore()\n  }\n\n  // setChaseEntity(ent,chaseMethod){\n  //   this.chaseEntity = ent\n  //   this.chaseMethod = chaseMethod\n  // }\n\n  // setChaseMethod(chaseMethod){\n  //   this.chaseMethod = chaseMethod\n  // }\n\n  getWorldPointFromPixelPoint(pixelPoint: Vector2) {\n    this.singleWorldPoint.x = this._getWorldPointFromPixelPoint_x(pixelPoint.x)\n    this.singleWorldPoint.y = this._getWorldPointFromPixelPoint_y(pixelPoint.y)\n    return this.singleWorldPoint\n  }\n\n  private _getWorldPointFromPixelPoint_x(x: number){\n    return (this.inverseX ? (this.offset.x - x) : (x - this.offset.x)) / this.pixelsToMeters\n  }\n\n  private _getWorldPointFromPixelPoint_y(y: number){\n    return (this.inverseY ? (y - (this.height - this.offset.y)) : ((this.height - this.offset.y) - y)) / this.pixelsToMeters\n  }\n\n  getPixelPointFromWorldPoint(worldPoint: Vector2){\n    this.singlePixelPoint.x = this._getPixelPointFromWorldPoint_x(worldPoint.x)\n    this.singlePixelPoint.y = this._getPixelPointFromWorldPoint_y(worldPoint.y)\n    return this.singlePixelPoint\n  }\n\n  private _getPixelPointFromWorldPoint_x(x: number){\n    return this.inverseX ? (this.offset.x - (x*this.pixelsToMeters)) : ((x*this.pixelsToMeters) + this.offset.x)\n  }\n\n  private _getPixelPointFromWorldPoint_y(y: number){\n    return this.inverseY\n      ? this.height - ((y*this.pixelsToMeters) + (this.height - this.offset.y))\n      : this.height - ((this.height - this.offset.y) - (y*this.pixelsToMeters))\n  }\n\n  setViewCenterWorld(vector2: Vector2, instantaneous: boolean, fraction: number = 0) {\n    let currentViewCenterWorld = this.getViewCenterWorld()\n    let toMove = new Vector2()\n    toMove.x = vector2.get_x() - currentViewCenterWorld.x\n    toMove.y = vector2.get_y() - currentViewCenterWorld.y\n    this.moveCenterBy(toMove, instantaneous, fraction)\n  }\n\n  centerWorldToCamera(){\n    // this.setViewCenterWorld(new Vector2(), true)\n    this.setOffset(this.viewCenterPixel)\n  }\n\n  centerWorldToTopLeft(){\n    this.setViewCenterWorld(new Vector2(), true)\n  }\n\n  getViewCenterWorld(){\n    return this.getWorldPointFromPixelPoint( this.viewCenterPixel )\n  }\n\n  moveCenterBy(toMove: Vector2, instantaneous: boolean, fraction: number){\n    fraction = fraction || (instantaneous ? 1 : 0.25)\n    this.offset.x -= round(fraction * toMove.x * this.pixelsToMeters, 0)\n    this.offset.y += round(fraction * toMove.y * this.pixelsToMeters, 0)\n  }\n\n  updateEnvironmentVariables(){\n    this.viewCenterPixel.set_x(this.width / 2)\n    this.viewCenterPixel.set_y(this.height / 2)\n  }\n\n  getViewCenterPixel(){\n    return this.viewCenterPixel\n  }\n\n  getViewportBounds(): ViewportBounds {\n    let bounds = {\n      x: this._getWorldPointFromPixelPoint_x(this.x),\n      y: this._getWorldPointFromPixelPoint_y(this.y),\n      w: this._getWorldPointFromPixelPoint_x(this.width),\n      h: this._getWorldPointFromPixelPoint_y(this.height),\n    }\n    return bounds\n  }\n\n  setCameraBounds(x: number, y: number, width: number, height: number): CameraBounds\n  setCameraBounds(bounds:  Partial<CameraBounds>): CameraBounds\n  setCameraBounds(...args: any[]): CameraBounds {\n    if(args.length === 1){\n      const {x=this.x, y=this.y, width=this.width, height=this.height} = args[0] as CameraBounds\n      this.x = x\n      this.y = y\n      this.width = width\n      this.height = height\n    } else if (args.length === 4){\n      const [x=this.x, y=this.y, width=this.width, height=this.height] = args\n      this.x = x\n      this.y = y\n      this.width = width\n      this.height = height\n    }\n    return {x: this.x, y: this.y, width: this.width, height: this.height}\n  }\n\n  getOffset(){\n    return this.offset\n  }\n\n  getOffsetX(){\n    return this.offset.x\n  }\n\n  getOffsetY(){\n    return this.offset.y\n  }\n\n  setOffset(vec: Vector2): void\n  setOffset(x: number, y: number): void\n  setOffset(...args: any[]): void {\n    if(args.length === 1){\n      this.offset.x = args[0].x || 0\n      this.offset.y = args[0].y || 0\n    } else if(args.length === 2){\n      this.offset.x = args[0]\n      this.offset.y = args[1]\n    }\n  }\n\n  setTransform(ctx: RenderingContext2D){\n    ctx.translate(this.getOffsetX(), this.getOffsetY())\n    // apply the scaling factor and inverses\n    ctx.scale(this.inverseX ? -this.pixelsToMeters : this.pixelsToMeters, this.inverseY ? -this.pixelsToMeters : this.pixelsToMeters)\n    // ctx.lineWidth /= this.pixelsToMeters\n  }\n\n  resetTransform(ctx: RenderingContext2D){\n    // ctx.scale(1 / this.getPTM(),1 / this.getPTM())\n    ctx.scale(this.inverseX ? (-1 / this.pixelsToMeters) : (1 / this.pixelsToMeters), this.inverseY ? (-1 / this.pixelsToMeters) : (1 / this.pixelsToMeters))\n    // ctx.lineWidth *= this.pixelsToMeters\n    ctx.translate(-this.getOffsetX(), -this.getOffsetY())\n  }\n\n  isPointInBounds(x: number, y: number, ctx: RenderingContext2D){\n    let inBounds = false\n    ctx.save()\n    ctx.resetTransform()\n    this._generateViewportRect(ctx)\n    inBounds = ctx.isPointInPath(x, y)\n    ctx.restore()\n    return inBounds\n  }\n\n  private _generateViewportRect(ctx: RenderingContext2D){\n    let br = this.getViewportBounds()\n    ctx.beginPath()\n    ctx.moveTo(br.x,br.y)\n    ctx.lineTo(br.w,br.y)\n    ctx.lineTo(br.w,br.h)\n    ctx.lineTo(br.x,br.h)\n    ctx.closePath()\n  }\n}\nexport default Camera\n\nfunction round(val: number, places: number = 0): number {\n  let c = 1\n  for (let i = 0; i < places; i++){\n    c *= 10\n  }\n  return Math.round(val*c)/c\n}\n","import { LudicOptions } from './app'\n\nexport interface CanvasDimensions {\n  width: number\n  height: number\n}\n\nexport class Canvas {\n  dimension: string\n  element: HTMLCanvasElement\n  private _context: CanvasRenderingContext2D\n\n  constructor(el: LudicOptions['el'], dimension='2d') {\n    this.dimension = dimension\n\n    if(typeof el === 'string'){\n      this.element = document.querySelector(el)\n    } else if(el instanceof HTMLCanvasElement) {\n      this.element = el\n    }\n    // window.addEventListener('resize', ()=>{\n    //   this.element.width = window.innerWidth\n    //   this.element.height = window.innerHeight\n    // }, false)\n    this.setDimensions()\n  }\n\n  get context(): CanvasRenderingContext2D {\n    return this.getContext()\n  }\n\n  getContext(dimension = this.dimension, options = {alpha: false}){\n    return this._context || (this._context = <CanvasRenderingContext2D>this.element.getContext(dimension, options))\n  }\n\n  setDimensions(width: number = window.innerWidth, height: number = window.innerHeight): CanvasDimensions {\n    this.element.width = width\n    this.element.height = height\n    return {width, height}\n  }\n\n  /**\n   * Helper function to clear the current context at full width-height\n   * @param {String} clearColor - color to clear the screen with\n   */\n  clear(clearColor = 'white', context = this.context){\n    context.fillStyle = clearColor\n    context.clearRect(0, 0, this.element.width, this.element.height)\n    context.fillRect(0, 0, this.element.width, this.element.height)\n  }\n}\n\nexport default Canvas\n","import InputManager, { InputController, InputState } from '../manager'\nimport GamepadMaps, { GamepadMapConfig } from './maps'\n\n// augment our InputManager to include gamepad\ndeclare module '../manager' {\n  interface InputManager {\n    gamepad: InputState<GamepadState>\n  }\n}\n\ndeclare global {\n  interface Gamepad {\n    readonly vibrationActuator?: ChromeGamepadHapticActuator\n  }\n  interface ChromeGamepadHapticActuator {\n    readonly type: GamepadHapticActuatorType | 'dual-rumble'\n    playEffect(type: ChromeGamepadHapticActuator['type'], params: GamepadEffectParameters): Promise<string>\n    reset(): Promise<any>\n  }\n  interface GamepadEffectParameters {\n    duration: number\n    startDelay?: number\n    strongMagnitude?: number\n    weakMagnitude?: number\n  }\n\n}\n\nlet gamepadsAxisDeadZone = 0.08\nlet gamepadsConfig = {}\n\nconst gamepadMappings: {[key: string]: GamepadMapConfig} = {}\n\nconst getGamepadMap = function getGamepadMap(gamepad: Gamepad): GamepadMapConfig {\n  return gamepadMappings[gamepad.index] || ({} as GamepadMapConfig)\n}\n\nconst mapRange = function mapRange(value, oldBottom, oldTop, newBottom, newTop) {\n  return (value - oldBottom) / (oldTop - oldBottom) * (newTop - newBottom) + newBottom\n}\n\nexport interface GamepadVibrationParams {\n  duration: number\n  type?: ChromeGamepadHapticActuator['type']\n  value?: number\n  weakMagnitude?: number\n  strongMagnitude?: number\n  startDelay?: number\n}\n\nclass GamepadStateButton implements GamepadButton {\n  pressed: boolean;\n  touched: boolean;\n  value: number;\n  last?: GamepadStateButton\n  id?: string\n  constructor({pressed=false, touched=false, value=0}: GamepadButton = {} as any, last?: GamepadStateButton){\n    this.pressed = pressed\n    this.touched = touched\n    this.value = value\n    this.last = last != null ? new GamepadStateButton(last, null) : null\n  }\n  get toggled(){\n    return this.last && this.last.pressed !== this.pressed\n  }\n  get buttonUp(){\n    return this.toggled && !this.pressed\n  }\n  get buttonDown(){\n    return this.toggled && this.pressed\n  }\n}\n\nexport class GamepadState {\n  gamepad: Gamepad\n  // normalized buttons and axes\n  start: GamepadStateButton\n  select: GamepadStateButton\n  home: GamepadStateButton // ps/xb button\n  left: GamepadStateButton\n  right: GamepadStateButton\n  up: GamepadStateButton\n  down: GamepadStateButton\n  l1: GamepadStateButton\n  l2: GamepadStateButton\n  l3: GamepadStateButton\n  r1: GamepadStateButton\n  r2: GamepadStateButton\n  r3: GamepadStateButton\n  triangle: GamepadStateButton\n  square: GamepadStateButton\n  circle: GamepadStateButton\n  cross: GamepadStateButton\n  extra: GamepadStateButton\n  lx: GamepadStateButton\n  ly: GamepadStateButton\n  rx: GamepadStateButton\n  ry: GamepadStateButton\n  constructor(){\n    this.start = new GamepadStateButton()\n    this.select = new GamepadStateButton()\n    this.home = new GamepadStateButton() // ps/xb button\n    this.left = new GamepadStateButton()\n    this.right = new GamepadStateButton()\n    this.up = new GamepadStateButton()\n    this.down = new GamepadStateButton()\n    this.l1 = new GamepadStateButton()\n    this.l2 = new GamepadStateButton()\n    this.l3 = new GamepadStateButton()\n    this.r1 = new GamepadStateButton()\n    this.r2 = new GamepadStateButton()\n    this.r3 = new GamepadStateButton()\n    this.triangle = new GamepadStateButton()\n    this.square = new GamepadStateButton()\n    this.circle = new GamepadStateButton()\n    this.cross = new GamepadStateButton()\n    this.extra = new GamepadStateButton()\n    this.lx = new GamepadStateButton({value: 0, pressed: false, touched: false})\n    this.ly = new GamepadStateButton({value: 0, pressed: false, touched: false})\n    this.rx = new GamepadStateButton({value: 0, pressed: false, touched: false})\n    this.ry = new GamepadStateButton({value: 0, pressed: false, touched: false})\n  }\n  /**\n   * an abstraction for chrome/spec haptic actuators\n   */\n  vibrate(params: GamepadVibrationParams){\n    // make sure we have a gamepad\n    if(this.gamepad != null){\n      // check for chrome property\n      if(this.gamepad.vibrationActuator != null){\n        const weakMagnitude = params.weakMagnitude != null ? params.weakMagnitude : (params.value != null ? params.value : undefined)\n        const strongMagnitude = params.strongMagnitude != null ? params.strongMagnitude : (params.value != null ? params.value : undefined)\n        const type = params.type != null ? params.type : this.gamepad.vibrationActuator.type\n        return this.gamepad.vibrationActuator.playEffect(type, {\n          duration: params.duration,\n          startDelay: params.startDelay,\n          weakMagnitude: weakMagnitude,\n          strongMagnitude: strongMagnitude\n        })\n      } else if(this.gamepad.hapticActuators != null && this.gamepad.hapticActuators.length){\n        const value = params.value != null ? params.value : (params.weakMagnitude != null ? params.weakMagnitude : params.strongMagnitude)\n        let actuators = this.gamepad.hapticActuators\n        if(params.type != null){\n          actuators = actuators.filter(actuator => actuator.type === params.type)\n        }\n        return Promise.all(actuators.map(actuator => actuator.pulse(value, params.duration)))\n      }\n    }\n  }\n}\n\nexport default class GamepadController implements InputController {\n  state: InputState<GamepadState>\n  constructor() {\n    this.state = new InputState(GamepadState)\n    window.addEventListener(\"gamepadconnected\", ({gamepad, ...e}: GamepadEvent)=>{\n      let gp = navigator.getGamepads()[gamepad.index]\n      console.log(gp)\n      let mapping = this.findMappingForGamepad(gamepad)\n      if(!mapping){\n        // log out an unknown gamepad\n        console.warn(\"No mapping found for gamepad at index %d: %s. %d buttons, %d axes.\",\n          gamepad.index, gamepad.id,\n          gamepad.buttons.length, gamepad.axes.length)\n        console.log(gamepad)\n      } else {\n        console.log(`${mapping.name} connected as controller ${gamepad.index}.`)\n        gamepadMappings[gamepad.index] = mapping\n      }\n    })\n    window.addEventListener(\"gamepaddisconnected\", ({gamepad, ...e}: GamepadEvent)=>{\n      console.log('Gamepad disconnected: ', gamepad)\n    })\n\n    // window.addEventListener('gamepadbuttondown', (e)=>{\n    //   console.log('gamepad button down: ',e)\n    // })\n    //\n    // window.addEventListener('gamepadbuttonup', (e)=>{\n    //   console.log('gamepad button up: ',e)\n    // })\n  }\n\n  install(inputManager: InputManager){\n    inputManager.gamepad = this.state\n  }\n\n  findMappingForGamepad(gamepad: Gamepad){\n    return Object.values(GamepadMaps).find((mapping) => mapping.test(gamepad))\n  }\n\n  get gamepads(){\n    // convert this array-like into an array\n    return Array.from(navigator.getGamepads() || [])\n  }\n\n  _parseGamepadState(gamepad: Gamepad, lastState: GamepadState): GamepadState {\n    const gamepadState = new GamepadState()\n\n    if(gamepad != null) {\n      const gamepadMap = this.findMappingForGamepad(gamepad)\n  \n      // set the raw gamepad onto the gamepad state\n      gamepadState.gamepad = gamepad\n      \n      if(gamepadMap){\n        gamepad.buttons.forEach( (button, buttonIndex)=>{\n          // get the name for this button at this index from the mapping\n          const buttonName = gamepadMap.buttons[buttonIndex]\n          // check if this button is actually a button or axis\n          if(gamepadMap.buttonAxes && buttonName in gamepadMap.buttonAxes){\n            // skip this button because the axis will handle it\n            return\n          }\n          let {value, touched, pressed} = button\n          if(gamepadMap.axisButtons && gamepadMap.axisButtons.includes(buttonName)) {\n            // map this button value to an axis value of -1,1\n            // ex: (0,1) -> (-1,1)\n            value = mapRange(value, 0, 1, -1, 1)\n          }\n          // set it on the state\n          gamepadState[buttonName] = new GamepadStateButton({pressed, value, touched}, lastState[buttonName])\n        })\n        // do the same thing for each of the axis (analog sticks)\n        // loop through each and poll state\n        gamepad.axes.forEach( (axisValue,axisIndex)=>{\n          // first determine if this axis is for a stick or a button or a dpad\n          // let axis = new GamepadAxis(gamepad, axisIndex, axisValue)\n          const axisName = gamepadMap.axes[axisIndex]\n          const stick = gamepadMap.sticks[axisName]\n          const buttonIndex = gamepadMap.buttonAxes ? gamepadMap.buttonAxes[axisName] : null\n          const buttonName = buttonIndex != null ? gamepadMap.buttons[buttonIndex] : null\n          const dpad = gamepadMap.dpadAxes ? gamepadMap.dpadAxes[axisName] : null\n\n          if(stick != null){\n            // this is an axis for an analog stick\n            gamepadState[axisName] = new GamepadStateButton({pressed: false, touched: false, value: axisValue}, gamepadState[axisName])\n          } else if(buttonIndex != null) {\n            // this is an axis for a button\n            const button = gamepad.buttons[buttonIndex]\n            gamepadState[buttonName] = new GamepadStateButton(button, lastState[buttonName])\n          } else if(dpad != null) {\n            Object.entries(dpad).forEach(([direction, dpadValue]: [string, number]) => {\n              const button = new GamepadStateButton({pressed: false, value: axisValue, touched: false}, lastState[direction])\n              button.id = direction\n              if(dpadValue == axisValue){\n                button.pressed = true\n              }\n              gamepadState[direction] = button\n            })\n          }\n        })\n      }\n    }\n    return gamepadState\n  }\n\n  update(time: number, delta: number){\n    this.gamepads.forEach((gamepad, index) => {\n      this.state.set(index, this._parseGamepadState(gamepad, this.state.get(index)))\n    })\n  }\n\n  // getDeadZone(gamepadIndex){\n  //   if(gamepadsConfig.hasOwnProperty(gamepadIndex) && gamepadsConfig[gamepadIndex].hasOwnProperty(deadZone)){\n  //     return gamepadsConfig[gamepadIndex].deadZone\n  //   }\n  //   return gamepadsAxisDeadZone\n  // }\n\n  // setDeadZone(deadZone,gamepadIndex){\n  //   if(gamepadIndex !== null && gamepadIndex !== undefined){\n  //     if(gamepadsConfig.hasOwnProperty(gamepadIndex)){\n  //       gamepadsConfig[gamepadIndex].deadZone = deadZone\n  //     } else {\n  //       gamepadsConfig[gamepadIndex] = {deadZone: deadZone}\n  //     }\n  //   } else {\n  //     gamepadsAxisDeadZone = deadZone\n  //   }\n  // }\n\n  // getGamepadMap(gamepad){\n  //   return getGamepadMap(gamepad)\n  // }\n}\n","export type GamepadButtonName = 'cross'|'circle'|'square'|'triangle'|'l1'|'r1'|'l2'|'r2'|'extra'|'start'|'l3'|'r3'|'up'|'down'|'left'|'right'|'home'|'select'|'rx'|'ry'\nexport type GamepadAxisName = 'lx'|'ly'|'rx'|'ry'|'l2'|'r2'|'dpadX'|'dpadY'\nexport interface GamepadMapConfig {\n  name: string\n  buttons: GamepadButtonName[]\n  axes: GamepadAxisName[]\n  buttonAxes?: {[key: string]: number}\n  dpadAxes?: {\n    dpadX: {left: number, right: number},\n    dpadY: {up: number, down: number},\n  }\n  axisButtons?: string[],\n  sticks: {[key: string]: string}\n  test: (gamepad: Gamepad) => boolean\n}\nexport interface GamepadMap {\n  [key: string]: GamepadMapConfig\n}\n\nconst MAPS: GamepadMap = {\n  'ps4-1': {\n    name: 'PS4 Controller (Chrome;macOS)',\n    buttons: ['cross','circle','square','triangle','l1','r1','l2','r2','extra','start','l3','r3','up','down','left','right','home','select'],\n    axes: ['lx','ly','rx','ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick'\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /54c.*5c4/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Chrome') && ua.includes('Mac OS X')\n    },\n  },\n  'ps4-2': {\n    name: 'PS4 Controller (Firefox;macOS)',\n    buttons: ['square','cross','circle','triangle','l1','r1','l2','r2','extra','start','l3','r3','home','select','up','down','left','right'],\n    // axes: ['lx','ly','rx','l2','r2','ry'],\n    axes: ['dpadX','dpadY','rx','l2','r2','ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick',\n    },\n    buttonAxes: {\n      l2:6,\n      r2:7,\n    },\n    dpadAxes: {\n      dpadX: {\n        left: -1,\n        right: 1,\n      },\n      dpadY: {\n        up: -1,\n        down: 1,\n      },\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /54c.*5c4/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Firefox') && ua.includes('Mac OS X')\n    },\n  },\n  'ps4-3': {\n    name: 'PS4 Controller (Firefox;Ubuntu)',\n    buttons: ['cross','circle','triangle','square','l1','r1','l2','r2','extra','start','home','l3','r3'],\n    axes: ['lx','ly','l2','rx','ry','r2','dpadX','dpadY'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick',\n    },\n    buttonAxes: {\n      l2:6,\n      r2:7,\n    },\n    dpadAxes: {\n      dpadX: {\n        left: -1,\n        right: 1,\n      },\n      dpadY: {\n        up: -1,\n        down: 1,\n      },\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /54c/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Firefox') && ua.includes('Ubuntu')\n    },\n  },\n  'ps4-4': {\n    name: 'PS4 Controller (Chrome;Linux;Wired)',\n    buttons: ['cross','circle','square','triangle','l1','r1','l2','r2','extra','start','l3','r3','up','down','left','right','home'],\n    axes: ['lx','ly','rx','ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n      rx:'rightStick',\n      ry:'rightStick'\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /054c/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Chrome') && ua.includes('Linux')\n    },\n  },\n  'ps4-5': {\n    name: 'PS4 Controller (Chrome;Linux;Wireless)',\n    buttons: ['circle', 'triangle', 'cross', 'square', 'l1','r1','rx','ry','select','start','home','l3', 'up','down','left','right','r3', 'extra'],\n    axes: ['lx','ly','l2','r2'],\n    axisButtons: ['rx', 'ry'],\n    sticks: {\n      lx:'leftStick',\n      ly:'leftStick',\n    },\n    test(gamepad){\n      let ua = navigator.userAgent\n      return /054c/.test(gamepad.id)\n        && gamepad.axes.length == this.axes.length\n        && gamepad.buttons.length == this.buttons.length\n        && ua.includes('Chrome') && ua.includes('Linux')\n    },\n  },\n\n}\nexport default MAPS\n","import InputManager, { InputState, InputController } from '../manager'\n\ndeclare module '../manager' {\n  interface InputManager {\n    keyboard: InputState<KeyState>\n  }\n}\n\nexport class KeyState {\n  down: boolean\n  constructor(down: boolean = false){\n    this.down = down\n  }\n}\n\nexport default class KeyboardController implements InputController {\n  state: InputState<KeyState>\n\n  constructor(){\n    this.state = new InputState(KeyState)\n\n    let func = (evt: KeyboardEvent)=>{\n      const {type, key, code} = evt\n\n      let down = type === 'keydown'\n\n      this.state.set(key, { down })\n      // we also want to set the code for this key.\n      // this is a layout independent code.\n      // ie. qwerty: D key -> key='d' -> code='KeyD'\n      //     dvorak: D key -> key='e' -> code='KeyD'\n      this.state.set(code, { down })\n    }\n\n    window.addEventListener('keydown', func, false)\n    window.addEventListener('keyup', func, false)\n  }\n  \n  install(manager: InputManager){\n    manager.keyboard = this.state\n  }\n}","\n// let listeners = []\nlet defaultKeyConfig = {\n  preventDefault: true\n}\nlet ps4Mapping = {\n  buttons: ['cross','circle','square','triangle','l1','r1','l2','r2','extra','start','l3','r3','up','down','left','right','home','select'],\n  axes: ['lx','ly','rx','ry'],\n  sticks: {\n    lx:'leftStick',\n    ly:'leftStick',\n    rx:'rightStick',\n    ry:'rightStick'\n  }\n}\n\nlet gamepadMaps = {\n  'Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 05c4)':ps4Mapping // ps4 controller\n}\n\nlet gamepadsAxisDeadZone = 0.08\nlet gamepadsConfig = {}\n\nlet mousePosPixel = {}\nlet prevMousePosPixel = {}\n// let gamepadTypeMaps = [{id:'054c',type:'ps4'}]\n\n// export class EventState<T> {\n//   event: T\n//   lastEvent: T\n//   set(event: T){\n//     // move current state to last state and set current\n//     this.lastEvent = this.event\n//     this.event = event\n//   }\n// }\n\ninterface IInputState<T> {\n  get(key: string): T\n}\nexport class InputState<T> {\n  state: {[key: string]: T} = {}\n  private _ctor: new ()=>T\n  constructor(ctor: new ()=>T){\n    this._ctor = ctor\n  }\n  get(key: string|number){\n    let val = this.state[key]\n    if(val == null) {\n      val = this.set(key, Reflect.construct(this._ctor, []))\n    }\n    return val\n  }\n  set(key: string|number, val: T): T {\n    return this.state[key] = val\n  }\n}\n\nexport interface InputController {\n  install(inputManager: InputManager): void\n  update?(time: number, delta: number): void\n}\n\nexport class InputManager {\n  inputControllers: InputController[] = []\n\n  constructor(controllers: InputController[] = []) {\n    controllers.forEach(c => this.addController(c))\n  }\n\n  addController(controller: InputController){\n    controller.install(this)\n    this.inputControllers.push(controller)\n  }\n  \n  // initTouch(){\n  //   // touch events\n  //   this.canvas.addEventListener('touchstart', function(evt) {\n  //     this.onMouseEvent('touchStart',this.canvas.el,evt)\n  //   }.bind(this), false)\n  \n  //   this.canvas.addEventListener('touchend', function(evt) {\n  //     this.onMouseEvent('touchEnd',this.canvas.el,evt)\n  //   }.bind(this), false)\n  \n  //   this.canvas.addEventListener('touchmove', function(evt) {\n  //     this.onMouseEvent('touchMove',this.canvas.el,evt)\n  //   }.bind(this), false)\n  \n  //   this.canvas.addEventListener('touchcancel', function(evt) {\n  //     this.onMouseEvent('touchCancel',this.canvas,evt)\n  //   }.bind(this), false)    \n  // }\n\n  update(time: number, delta: number){\n    this.inputControllers.forEach((controller)=>{\n      controller.update && controller.update(time, delta)\n    })\n  }\n\n}\n\nexport default InputManager\n","import InputManager, { InputController, InputState } from '../manager'\n\ndeclare module '../manager' {\n  interface InputManager {\n    mouse: InputState<MouseState>\n  }\n}\n\nexport class MouseState {\n  x: number\n  y: number\n  down: boolean\n  constructor(x: number = 0, y: number = 0, down: boolean = false){\n    this.x = x\n    this.y = y\n    this.down = down\n  }\n}\n\nexport default class MouseController implements InputController {\n  state: InputState<MouseState>\n\n  constructor(){\n    this.state = new InputState(MouseState)\n\n    window.addEventListener('mousemove', (evt: MouseEvent) => {\n      const {which, x, y} = evt\n      this.state.set(which, { x, y, down: false})\n    }, false)\n\n    window.addEventListener('mousedown', (evt: MouseEvent) => {\n      const {which, x, y} = evt\n      this.state.set(which, { x, y, down: true, })\n    }, false)\n    \n    window.addEventListener('mouseup', (evt: MouseEvent) => {\n      const {which, x, y} = evt\n      this.state.set(which, { x, y, down: false, })\n    }, false)\n  }\n\n  install(manager: InputManager){\n    manager.mouse = this.state\n  }\n}\n","declare global {\n  interface Window {\n    mozRequestAnimationFrame: Window['requestAnimationFrame']\n    oRequestAnimationFrame: Window['requestAnimationFrame']\n    msRequestAnimationFrame: Window['requestAnimationFrame']\n  }\n  interface HTMLCanvasElement {\n    transferControlToOffscreen(): OffscreenCanvas;\n  }\n\n  interface OffscreenCanvasRenderingContext2D extends CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath {\n    readonly canvas: OffscreenCanvas;\n  }\n  var OffscreenCanvasRenderingContext2D: {\n    prototype: OffscreenCanvasRenderingContext2D;\n    new(): OffscreenCanvasRenderingContext2D;\n  }\n  interface OffscreenCanvas extends EventTarget {\n    width: number;\n    height: number;\n    getContext(contextId: \"2d\", contextAttributes ? : CanvasRenderingContext2DSettings): OffscreenCanvasRenderingContext2D | null;\n  }\n  var OffscreenCanvas: {\n    prototype: OffscreenCanvas;\n    new(width: number, height: number): OffscreenCanvas;\n  }\n\n  interface Worker {\n    postMessage(message: any, transfer?: Array<Transferable|OffscreenCanvas>): void;\n  }\n}\n\nimport { Ludic } from './core/app'\n\nexport * from './core/app'\nexport * from './core/camera'\nexport * from './core/canvas'\n\nexport * from './render/renderer'\n\nexport * from './screen/screen'\nexport * from './screen/screenManager'\n\nexport * from './input/manager'\nexport * from './input/keyboard/controller'\nexport { default as KeyboardController } from './input/keyboard/controller'\nexport * from './input/mouse/controller'\nexport { default as MouseController } from './input/mouse/controller'\nexport * from './input/gamepad/controller'\nexport { default as GamepadController } from './input/gamepad/controller'\n\nexport * from './reactivity/dep'\nexport * from './reactivity/lambda'\nexport * from './reactivity/state'\n\nexport * from './asset/asset'\nexport * from './asset/assetLoader'\nexport * from './asset/assetManager'\nexport * from './asset/audioAsset'\nexport * from './asset/audioAssetLoader'\nexport * from './asset/imageAsset'\nexport * from './asset/imageAssetLoader'\n\nexport * from './utils/vector2'\n\nexport default Ludic\n","import Lambda from './lambda'\n\nlet id = 0\nconst stack: Array<Lambda> = []\n\nexport function pushLambda(l: Lambda){\n  stack.push(l)\n  Dep.lambda = l\n}\nexport function popLambda(){\n  stack.pop()\n  Dep.lambda = stack[stack.length - 1]\n}\n\nclass Dep {\n  static lambda: Lambda | null\n  id: number = id++\n  lambdas: Array<Lambda> = []\n\n  addLambda(lambda: Lambda){\n    this.lambdas.push(lambda)\n  }\n\n  removeLambda(lambda: Lambda){\n    const ix = this.lambdas.indexOf(lambda)\n    if(ix > -1){\n      this.lambdas.slice(ix, 1)\n    }\n  }\n\n  depend(){\n    if(Dep.lambda){\n      Dep.lambda.addDep(this)\n    }\n  }\n\n  notify(){\n    this.lambdas.forEach(lambda => lambda.update())\n  }\n}\n\nexport { Dep, Dep as default }","import Dep, { pushLambda, popLambda } from './dep'\n\nexport type LambdaFn<O> = (owner: O)=>any\n\n// export class WeakMapArray<T extends object> extends Array<T> {\n//   private _map = new WeakMap<T, Array<T>>()\n//   constructor(){\n//     super()\n//     return new Proxy(this, {\n//       set(this: WeakMapArray<T>, target, prop, value: T){\n//         if(!isNaN(prop as number)){\n//           if(!this._map.has(value)){\n            \n//           }\n//         }\n//         return Reflect.set(target, prop, value)\n//       }\n//     })\n//   }\n//   has(obj: T){\n//     return this._map.has(obj)\n//   }\n// }\n\nclass Lambda<O=any> {\n  owner: O\n  fn: LambdaFn<O>\n  value: any\n  depIds: Set<number> = new Set()\n  newDepIds: Set<number> = new Set()\n  deps: Array<Dep> = []\n  newDeps: Array<Dep> = []\n  \n  constructor(owner: O, fn: LambdaFn<O>){\n    this.owner = owner\n    this.fn = fn\n\n    this.compute()\n  }\n\n  addDep(dep: Dep){\n    if(!this.newDepIds.has(dep.id)){\n      this.newDepIds.add(dep.id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(dep.id)) {\n        dep.addLambda(this)\n      }\n    }\n  }\n\n  compute(){\n    pushLambda(this)\n    this.value = this.fn.call(this.owner, this.owner)\n    popLambda()\n    this.clean()\n  }\n\n  clean(){\n    this.deps.forEach(dep => {\n      if(!this.newDepIds.has(dep.id)){\n        dep.removeLambda(this)\n      }\n    })\n    // Swap Sets and Arrays and clear out new vars\n    let tmp: any = this.depIds\n    this.depIds = this.newDepIds\n    this.newDepIds = tmp\n    this.newDepIds.clear()\n    tmp = this.deps\n    this.deps = this.newDeps\n    this.newDeps = tmp\n    this.newDeps.length = 0\n  }\n\n  update(){\n    this.compute()\n  }\n\n\n}\n\nexport { Lambda, Lambda as default }","import Dep from './dep'\n\ntype Proxify<T> = {\n  [P in keyof T]: T[P];\n}\n\ninterface StateOptions<T> {\n  exclude?: Array<keyof T>\n  dep?: Dep\n}\n\nconst EXCLUDED_OBJECT_KEYS = Object.getOwnPropertyNames(Object.prototype)\nconst EXCLUDED_ARRAY_KEYS = Object.getOwnPropertyNames(Array.prototype)\n\nconst DEP_MAP = new WeakMap()\n\nclass State<T extends object> {\n\n  static create<T extends object>(value: T, opts: StateOptions<T> = {}): Proxify<T> {\n    if(typeof value !== 'object' || value == null || value.hasOwnProperty('__state__')){\n      return value\n    }\n    return new State(value, opts) as Proxify<T>\n  }\n  static dep<T extends object>(state: State<T>): Dep {\n    return DEP_MAP.get(state)\n  }\n\n  private constructor(value: T, opts: StateOptions<T> = {}) {\n    const depMap = new Map<string|number|symbol, Dep>()\n    const getDep = (prop: string|number|symbol)=>{\n      let dep = depMap.get(prop)\n      if(dep) return dep\n      dep = new Dep()\n      depMap.set(prop, dep)\n      return dep\n    }\n\n    const {\n      exclude = [],\n      dep,\n    } = opts\n    \n    const EXCLUDE_KEYS: Set<string|number|symbol> = new Set(exclude)\n\n    if(Array.isArray(value)){\n      EXCLUDED_ARRAY_KEYS.forEach(k => EXCLUDE_KEYS.add(k))\n      value = ReactiveArray.create(value)\n    } else {\n      EXCLUDED_OBJECT_KEYS.forEach(k => EXCLUDE_KEYS.add(k))\n    }\n\n    if(value != null){\n      Object.defineProperty(value, '__state__', { value: this, enumerable: false, configurable: true, writable: true })\n    }\n\n    let proxy = new Proxy(value, {\n      get(target, prop){\n        const value = Reflect.get(target, prop)\n        if(EXCLUDE_KEYS.has(prop)) return value\n        const dep = getDep(prop)\n        if(Dep.lambda){\n          dep.depend()\n        }\n        return State.create(value, {dep})\n      },\n      set(target, prop, newValue){\n        const value = Reflect.get(target, prop)\n        if(EXCLUDE_KEYS.has(prop)){\n          return Reflect.set(target, prop, newValue)\n        }\n        const dep = getDep(prop)\n        if(value === newValue){\n          return true\n        }\n        const didSet = Reflect.set(target, prop, State.create(newValue, {dep}))\n        dep.notify()\n        return didSet\n      }\n    })\n    if(!DEP_MAP.has(proxy) && dep != null){\n      DEP_MAP.set(proxy, dep)\n    }\n    return proxy\n  }\n}\n\nexport { State, State as default }\n\nclass ReactiveArray<T> extends Array<T> {\n  private constructor(...args: any[]) {\n    super(...args)\n    Object.setPrototypeOf(this, Object.create(ReactiveArray.prototype))\n  }\n  static create<V>(value: V): V {\n    return new ReactiveArray(value) as unknown as V\n  }\n  static notify<T>(arr: ReactiveArray<T>){\n    const dep = State.dep(arr)\n    dep && dep.notify()\n  }\n  // static from(...args: any[]){\n  //   let arr = super.from.apply(super, args)\n    \n  // }\n\n  push(...items: T[]){\n    const res = Array.prototype.push.call(this, ...items)\n    ReactiveArray.notify(this)\n    return res\n  }\n  pop(){\n    const res = super.pop()\n    ReactiveArray.notify(this)\n    return res\n  }\n  shift(){\n    const res = super.shift()\n    ReactiveArray.notify(this)\n    return res\n  }\n  unshift(...items: T[]){\n    const res = super.unshift(...items)\n    ReactiveArray.notify(this)\n    return res\n  }\n  splice(start: number, deleteCount: number, ...items: T[]){\n    const res = super.splice(start, deleteCount, ...items)\n    ReactiveArray.notify(this)\n    return res\n  }\n  sort(compareFn?: (a: T, b: T) => number){\n    const res = super.sort(compareFn)\n    ReactiveArray.notify(this)\n    return res\n  }\n  reverse(){\n    const res = super.reverse()\n    ReactiveArray.notify(this)\n    return res\n  }\n}\n","// We omit 'canvas' because it is not assignable\nexport type OffscreenCanvasRenderingContext2DKeys = keyof Pick<OffscreenCanvasRenderingContext2D, Exclude<keyof OffscreenCanvasRenderingContext2D, 'canvas'>>\nexport interface RenderingContextComponent {\n  name: OffscreenCanvasRenderingContext2DKeys\n}\nexport class RenderingContextFunctionComponent implements RenderingContextComponent {\n  name: OffscreenCanvasRenderingContext2DKeys\n  args: any[]\n  constructor(name: OffscreenCanvasRenderingContext2DKeys, args: any[] = []){\n    this.name = name\n    this.args = args\n  }\n}\nexport class RenderingContextPropertyComponent implements RenderingContextComponent {\n  name: OffscreenCanvasRenderingContext2DKeys\n  value: any\n  constructor(name: OffscreenCanvasRenderingContext2DKeys, value: any){\n    this.name = name\n    this.value = value\n  }\n}\n\nexport class RenderingContext implements OffscreenCanvasRenderingContext2D {\n\n  static render(renderingContext: RenderingContext, ctx: OffscreenCanvasRenderingContext2D){\n    renderingContext.$components.forEach((comp) => {\n      if(this.componentIsFunction(comp)){\n        (ctx[comp.name] as ()=>void).apply(ctx, comp.args)\n      } else if(this.componentIsProperty(comp)){\n        ctx[comp.name] = comp.value\n      }\n    })\n  }\n  static componentIsFunction(comp: RenderingContextComponent): comp is RenderingContextFunctionComponent {\n    return comp.hasOwnProperty('args')\n  }\n  static componentIsProperty(comp: RenderingContextComponent): comp is RenderingContextPropertyComponent {\n    return comp.hasOwnProperty('value')\n  }\n\n  $components: RenderingContextComponent[] = []\n  canvas: HTMLCanvasElement;\n\n  restore(): void {\n    this.$components.push(new RenderingContextFunctionComponent('restore'))\n  }\n  save(): void {\n    this.$components.push(new RenderingContextFunctionComponent('save'))\n  }\n  getTransform(): DOMMatrix {\n    throw new Error('Method not implemented.');\n  }\n  resetTransform(): void {\n    throw new Error('Method not implemented.');\n  }\n  rotate(angle: number): void {\n    throw new Error('Method not implemented.');\n  }\n  scale(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;\n  setTransform(transform?: DOMMatrix2DInit): void;\n  setTransform(a?: any, b?: any, c?: any, d?: any, e?: any, f?: any) {\n    throw new Error('Method not implemented.');\n  }\n  transform(a: number, b: number, c: number, d: number, e: number, f: number): void {\n    throw new Error('Method not implemented.');\n  }\n  translate(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  globalAlpha: number;\n  globalCompositeOperation: string;\n  imageSmoothingEnabled: boolean;\n  imageSmoothingQuality: ImageSmoothingQuality;\n  fillStyle: string | CanvasGradient | CanvasPattern;\n  strokeStyle: string | CanvasGradient | CanvasPattern;\n  createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient {\n    throw new Error('Method not implemented.');\n  }\n  createPattern(image: CanvasImageSource, repetition: string): CanvasPattern {\n    throw new Error('Method not implemented.');\n  }\n  createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient {\n    throw new Error('Method not implemented.');\n  }\n  shadowBlur: number;\n  shadowColor: string;\n  shadowOffsetX: number;\n  shadowOffsetY: number;\n  filter: string;\n  clearRect(x: number, y: number, w: number, h: number): void {\n    throw new Error('Method not implemented.');\n  }\n  fillRect(x: number, y: number, w: number, h: number): void {\n    throw new Error('Method not implemented.');\n  }\n  strokeRect(x: number, y: number, w: number, h: number): void {\n    this.$components.push(new RenderingContextFunctionComponent('strokeRect', [x,y,w,h]))\n  }\n  beginPath(): void {\n    throw new Error('Method not implemented.');\n  }\n  clip(fillRule?: CanvasFillRule): void;\n  clip(path: Path2D, fillRule?: CanvasFillRule): void;\n  clip(path?: any, fillRule?: any) {\n    throw new Error('Method not implemented.');\n  }\n  fill(fillRule?: CanvasFillRule): void;\n  fill(path: Path2D, fillRule?: CanvasFillRule): void;\n  fill(path?: any, fillRule?: any) {\n    throw new Error('Method not implemented.');\n  }\n  // @ts-ignore\n  isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;\n  isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;\n  isPointInPath(path: any, x: any, y?: any, fillRule?: any) {\n    this.$components.push(new RenderingContextFunctionComponent('restore'))\n  }\n  // @ts-ignore\n  isPointInStroke(x: number, y: number): boolean;\n  isPointInStroke(path: Path2D, x: number, y: number): boolean;\n  isPointInStroke(path: any, x: any, y?: any) {\n    throw new Error('Method not implemented.');\n  }\n  stroke(): void;\n  stroke(path: Path2D): void;\n  stroke(path?: any) {\n    throw new Error('Method not implemented.');\n  }\n  drawFocusIfNeeded(element: Element): void;\n  drawFocusIfNeeded(path: Path2D, element: Element): void;\n  drawFocusIfNeeded(path: any, element?: any) {\n    throw new Error('Method not implemented.');\n  }\n  scrollPathIntoView(): void;\n  scrollPathIntoView(path: Path2D): void;\n  scrollPathIntoView(path?: any) {\n    throw new Error('Method not implemented.');\n  }\n  fillText(text: string, x: number, y: number, maxWidth?: number): void {\n    throw new Error('Method not implemented.');\n  }\n  measureText(text: string): TextMetrics {\n    throw new Error('Method not implemented.');\n  }\n  strokeText(text: string, x: number, y: number, maxWidth?: number): void {\n    throw new Error('Method not implemented.');\n  }\n  drawImage(image: CanvasImageSource, dx: number, dy: number): void;\n  drawImage(image: CanvasImageSource, dx: number, dy: number, dw: number, dh: number): void;\n  drawImage(image: CanvasImageSource, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\n  drawImage(image: any, sx: any, sy: any, sw?: any, sh?: any, dx?: any, dy?: any, dw?: any, dh?: any) {\n    throw new Error('Method not implemented.');\n  }\n  // @ts-ignore\n  createImageData(sw: number, sh: number): ImageData;\n  createImageData(imagedata: ImageData): ImageData;\n  createImageData(sw: any, sh?: any) {\n    throw new Error('Method not implemented.');\n  }\n  getImageData(sx: number, sy: number, sw: number, sh: number): ImageData {\n    throw new Error('Method not implemented.');\n  }\n  putImageData(imagedata: ImageData, dx: number, dy: number): void;\n  putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;\n  putImageData(imagedata: any, dx: any, dy: any, dirtyX?: any, dirtyY?: any, dirtyWidth?: any, dirtyHeight?: any) {\n    throw new Error('Method not implemented.');\n  }\n  lineCap: CanvasLineCap;\n  lineDashOffset: number;\n  lineJoin: CanvasLineJoin;\n  // lineWidth: number;\n  set lineWidth(val: number){\n    this.$components.push(new RenderingContextPropertyComponent('lineWidth', val))\n  }\n  miterLimit: number;\n  getLineDash(): number[] {\n    throw new Error('Method not implemented.');\n  }\n  setLineDash(segments: number[]): void {\n    throw new Error('Method not implemented.');\n  }\n  direction: CanvasDirection;\n  font: string;\n  textAlign: CanvasTextAlign;\n  textBaseline: CanvasTextBaseline;\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void {\n    throw new Error('Method not implemented.');\n  }\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  closePath(): void {\n    throw new Error('Method not implemented.');\n  }\n  ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n  lineTo(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  moveTo(x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void {\n    throw new Error('Method not implemented.');\n  }\n  rect(x: number, y: number, w: number, h: number): void {\n    throw new Error('Method not implemented.');\n  }\n\n\n}\n","import ScreenManager from './screenManager'\n\nexport class Screen {\n  $id!: number\n  $manager!: ScreenManager\n\n  options: any\n\n  _isFinished: boolean\n  _finalData: any\n\n  constructor(options: any = {}) {\n    this.options = options\n  }\n\n  // _step(delta,...rest){\n  //   if(!this._isFinished){\n  //     this.update.apply(this,arguments)\n  //   }\n  // }\n\n  // override\n  update(delta: any, ...args: any[]){}\n\n  finish(data: any){\n    if(!this._isFinished){\n      this.onDestroy()\n      this._finalData = data || {}\n      this._isFinished = true\n    }\n  }\n\n  onDestroy(){}\n  /**\n   * \n   * @param manager ScreenManager that called this.\n   * @param finalData the final data from the previous screen\n   */\n  onAddedToManager(manager: ScreenManager, finalData?: any){}\n  onRemovedFromManager(manager: ScreenManager){}\n\n  // $mapMethods(component, mapping){\n  //   for(let key in mapping){\n  //     component.$on[mapping[key]] = this[key].bind(this)\n  //   }\n  //   return component\n  // }\n}\n\nexport default Screen","import Screen from './screen'\n\nlet idIncrementer = 1\n\nexport interface ScreenManagerListener {\n  onScreenFinished(screen: Screen, manager: ScreenManager, finalData: Screen['_finalData']): void\n  onScreenAdded(screen: Screen, manager: ScreenManager, replace: boolean): void\n  onScreensRemoved(screens: Screen[], manager: ScreenManager): void\n  onWarnPopScreen(stack: Screen[], manager: ScreenManager): void\n}\nconst LISTENER_METHODS: Array<string> = ['onScreenAdded', 'onScreenFinished', 'onScreensRemoved', 'onWarnPopScreen']\n\nfunction isListenerMethod(prop: string): prop is keyof ScreenManagerListener {\n  return LISTENER_METHODS.includes(prop)\n}\n\nexport class ScreenManager {\n  \n  private _stack: Screen[]\n  private _listeners: ScreenManagerListener[] & ScreenManagerListener\n\n\n  constructor() {\n    // this.$app = app\n\n    // define private properties\n    this._listeners = new Proxy([],{\n      get(target: Array<ScreenManagerListener>, prop: string){\n        if(isListenerMethod(prop)){\n          return (...args: any[])=>{\n            // only call prop if it exists\n            //  this allows for the 'listener' to not be a 'ScreenEventListener' but any object that defines its properties\n            target.forEach((e: ScreenManagerListener) => {\n              e[prop] != null ? e[prop].call(e,...args) : undefined\n            })\n          }\n        }\n        return target[prop as any]\n      }\n    }) as ScreenManagerListener[] & ScreenManagerListener\n    this._stack = []\n  }\n\n  private getNewId(){\n    return idIncrementer++\n  }\n\n  update(delta: number, time: number, ...args: any[]){\n    let stack = this._stack\n    if(stack.length > 0){\n      let screen = stack[stack.length-1]\n\n      if(screen._isFinished){\n        this._listeners.onScreenFinished(screen, this, screen._finalData)\n      } else {\n        screen.update.apply(screen, arguments)\n      }\n    }\n  }\n\n  addScreen(screen: Screen, replace: boolean = false, finalData?: any){\n    let stack = this._stack\n    // give the screen a ref to the manager and the app\n    screen.$manager = this\n    // screen.$app = this.$app\n    // give the screen an id\n    screen.$id = this.getNewId()\n    if(replace){\n      const [rm] = this.popScreen()\n      if(rm != null){\n        finalData = rm._finalData\n      }\n    }\n    stack.push(screen)\n    // call screen's callback\n    screen.onAddedToManager(this, finalData)\n    // call listener methods\n    this._listeners.onScreenAdded(screen, this, replace)\n  }\n\n  popScreen(){\n    let stack = this._stack\n    if(stack.length > 0){\n      let screen = stack.pop()\n      // call screen's callback\n      screen.onRemovedFromManager(this)\n      // call listener methods\n      this._listeners.onScreensRemoved([screen], this)\n      return [screen]\n    } else {\n      // cannot pop the last screen, only replace.\n      this._listeners.onWarnPopScreen(stack, this)\n      return []\n    }\n  }\n\n  popToScreen(screen: Screen){\n    let stack = this._stack\n    if(!screen.hasOwnProperty('$id')){\n      return false\n    }\n    let index = stack.findIndex((s)=>{\n      return s.$id === screen.$id\n    })\n    if(index === -1){\n      return false\n    } else {\n      let screensRemoved = stack.splice(index)\n      // call screen callback method\n      screensRemoved.slice().reverse().forEach(screen => screen.onRemovedFromManager(this))\n      // call listener method\n      this._listeners.onScreensRemoved(screensRemoved, this)\n      return screensRemoved\n    }\n  }\n\n  addScreenEventListener(listener: ScreenManagerListener){\n    this._listeners.push(listener)\n  }\n\n  // getNewScreenEventListener(alsoAdd){\n  //   let listener = new ScreenEventListener()\n  //   if(alsoAdd){\n  //     this.addScreenEventListener(listener)\n  //   }\n  //   return listener\n  // }\n}\n\n// ScreenManager.ScreenEventListener = ScreenEventListener\n\nexport default ScreenManager","class SystemManager {\n  constructor(world) {\n    this._systems = [];\n    this._executeSystems = []; // Systems that have `execute` method\n    this.world = world;\n  }\n\n  registerSystem(System, attributes) {\n    var system = new System(this.world, attributes);\n    if (system.init) system.init();\n    system.order = this._systems.length;\n    this._systems.push(system);\n    if (system.execute) this._executeSystems.push(system);\n    this.sortSystems();\n    return this;\n  }\n\n  sortSystems() {\n    this._executeSystems.sort((a, b) => {\n      return a.priority - b.priority || a.order - b.order;\n    });\n  }\n\n  getSystem(System) {\n    return this._systems.find(s => s instanceof System);\n  }\n\n  getSystems() {\n    return this._systems;\n  }\n\n  removeSystem(System) {\n    var index = this._systems.indexOf(System);\n    if (!~index) return;\n\n    this._systems.splice(index, 1);\n  }\n\n  execute(delta, time) {\n    this._executeSystems.forEach(system => {\n      if (system.enabled && system.initialized) {\n        if (system.canExecute()) {\n          let startTime = performance.now();\n          system.execute(delta, time);\n          system.executeTime = performance.now() - startTime;\n        }\n        system.clearEvents();\n      }\n    });\n  }\n\n  stats() {\n    var stats = {\n      numSystems: this._systems.length,\n      systems: {}\n    };\n\n    for (var i = 0; i < this._systems.length; i++) {\n      var system = this._systems[i];\n      var systemStats = (stats.systems[system.constructor.name] = {\n        queries: {}\n      });\n      for (var name in system.ctx) {\n        systemStats.queries[name] = system.ctx[name].stats();\n      }\n    }\n\n    return stats;\n  }\n}\n\n/**\n * @private\n * @class EventDispatcher\n */\nclass EventDispatcher {\n  constructor() {\n    this._listeners = {};\n    this.stats = {\n      fired: 0,\n      handled: 0\n    };\n  }\n\n  /**\n   * Add an event listener\n   * @param {String} eventName Name of the event to listen\n   * @param {Function} listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName, listener) {\n    let listeners = this._listeners;\n    if (listeners[eventName] === undefined) {\n      listeners[eventName] = [];\n    }\n\n    if (listeners[eventName].indexOf(listener) === -1) {\n      listeners[eventName].push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param {String} eventName Name of the event to check\n   * @param {Function} listener Callback for the specified event\n   */\n  hasEventListener(eventName, listener) {\n    return (\n      this._listeners[eventName] !== undefined &&\n      this._listeners[eventName].indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param {String} eventName Name of the event to remove\n   * @param {Function} listener Callback for the specified event\n   */\n  removeEventListener(eventName, listener) {\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {String} eventName Name of the event to dispatch\n   * @param {Entity} entity (Optional) Entity to emit\n   * @param {Component} component\n   */\n  dispatchEvent(eventName, entity, component) {\n    this.stats.fired++;\n\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var array = listenerArray.slice(0);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i].call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n\n/**\n * Return the name of a component\n * @param {Component} Component\n * @private\n */\nfunction getName(Component) {\n  return Component.name;\n}\n\n/**\n * Return a valid property name for the Component\n * @param {Component} Component\n * @private\n */\nfunction componentPropertyName(Component) {\n  var name = getName(Component);\n  return name.charAt(0).toLowerCase() + name.slice(1);\n}\n\n/**\n * Get a key from a list of components\n * @param {Array(Component)} Components Array of components to generate the key\n * @private\n */\nfunction queryKey(Components) {\n  var names = [];\n  for (var n = 0; n < Components.length; n++) {\n    var T = Components[n];\n    if (typeof T === \"object\") {\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\n      names.push(operator + getName(T.Component));\n    } else {\n      names.push(getName(T));\n    }\n  }\n\n  return names\n    .map(function(x) {\n      return x.toLowerCase();\n    })\n    .sort()\n    .join(\"-\");\n}\n\nclass Query {\n  /**\n   * @param {Array(Component)} Components List of types of components to query\n   */\n  constructor(Components, manager) {\n    this.Components = [];\n    this.NotComponents = [];\n\n    Components.forEach(component => {\n      if (typeof component === \"object\") {\n        this.NotComponents.push(component.Component);\n      } else {\n        this.Components.push(component);\n      }\n    });\n\n    if (this.Components.length === 0) {\n      throw new Error(\"Can't create a query without components\");\n    }\n\n    this.entities = [];\n\n    this.eventDispatcher = new EventDispatcher();\n\n    // This query is being used by a reactive system\n    this.reactive = false;\n\n    this.key = queryKey(Components);\n\n    // Fill the query with the existing entities\n    for (var i = 0; i < manager._entities.length; i++) {\n      var entity = manager._entities[i];\n      if (this.match(entity)) {\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   * @param {Entity} entity\n   */\n  removeEntity(entity) {\n    let index = this.entities.indexOf(entity);\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(\n        Query.prototype.ENTITY_REMOVED,\n        entity\n      );\n    }\n  }\n\n  match(entity) {\n    return (\n      entity.hasAllComponents(this.Components) &&\n      !entity.hasAnyComponents(this.NotComponents)\n    );\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.Components.length,\n      numEntities: this.entities.length\n    };\n  }\n}\n\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\n\nvar nextId = 0;\n\nclass Entity {\n  constructor(world) {\n    this._world = world || null;\n\n    // Unique ID for this entity\n    this.id = nextId++;\n\n    // List of components types the entity has\n    this._ComponentTypes = [];\n\n    // Instance of the components\n    this._components = {};\n\n    this._componentsToRemove = {};\n\n    // Queries where the entity is added\n    this.queries = [];\n\n    // Used for deferred removal\n    this._ComponentTypesToRemove = [];\n\n    this.alive = false;\n  }\n\n  // COMPONENTS\n\n  getComponent(Component) {\n    var component = this._components[Component.name];\n    return  component;\n  }\n\n  getRemovedComponent(Component) {\n    return this._componentsToRemove[Component.name];\n  }\n\n  getComponents() {\n    return this._components;\n  }\n\n  getComponentsToRemove() {\n    return this._componentsToRemove;\n  }\n\n  getComponentTypes() {\n    return this._ComponentTypes;\n  }\n\n  getMutableComponent(Component) {\n    var component = this._components[Component.name];\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n      // @todo accelerate this check. Maybe having query._Components as an object\n      if (query.reactive && query.Components.indexOf(Component) !== -1) {\n        query.eventDispatcher.dispatchEvent(\n          Query.prototype.COMPONENT_CHANGED,\n          this,\n          component\n        );\n      }\n    }\n    return component;\n  }\n\n  addComponent(Component, values) {\n    this._world.entityAddComponent(this, Component, values);\n    return this;\n  }\n\n  removeComponent(Component, forceRemove) {\n    this._world.entityRemoveComponent(this, Component, forceRemove);\n    return this;\n  }\n\n  hasComponent(Component) {\n    return !!~this._ComponentTypes.indexOf(Component);\n  }\n\n  hasRemovedComponent(Component) {\n    return !!~this._ComponentTypesToRemove.indexOf(Component);\n  }\n\n  hasAllComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (!this.hasComponent(Components[i])) return false;\n    }\n    return true;\n  }\n\n  hasAnyComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (this.hasComponent(Components[i])) return true;\n    }\n    return false;\n  }\n\n  removeAllComponents(forceRemove) {\n    return this._world.entityRemoveAllComponents(this, forceRemove);\n  }\n\n  // EXTRAS\n\n  // Initialize the entity. To be used when returning an entity to the pool\n  reset() {\n    this.id = nextId++;\n    this._world = null;\n    this._ComponentTypes.length = 0;\n    this.queries.length = 0;\n    this._components = {};\n  }\n\n  remove(forceRemove) {\n    return this._world.removeEntity(this, forceRemove);\n  }\n}\n\nclass ObjectPool {\n  // @todo Add initial size\n  constructor(T, initialSize) {\n    this.freeList = [];\n    this.count = 0;\n    this.T = T;\n\n    var extraArgs = null;\n    if (arguments.length > 1) {\n      extraArgs = Array.prototype.slice.call(arguments);\n      extraArgs.shift();\n    }\n\n    this.createElement = extraArgs\n      ? () => {\n          return new T(...extraArgs);\n        }\n      : () => {\n          return new T();\n        };\n\n    if (typeof initialSize !== \"undefined\") {\n      this.expand(initialSize);\n    }\n  }\n\n  aquire() {\n    // Grow the list by 20%ish if we're out\n    if (this.freeList.length <= 0) {\n      this.expand(Math.round(this.count * 0.2) + 1);\n    }\n\n    var item = this.freeList.pop();\n\n    return item;\n  }\n\n  release(item) {\n    item.reset();\n    this.freeList.push(item);\n  }\n\n  expand(count) {\n    for (var n = 0; n < count; n++) {\n      this.freeList.push(this.createElement());\n    }\n    this.count += count;\n  }\n\n  totalSize() {\n    return this.count;\n  }\n\n  totalFree() {\n    return this.freeList.length;\n  }\n\n  totalUsed() {\n    return this.count - this.freeList.length;\n  }\n}\n\n/**\n * @private\n * @class QueryManager\n */\nclass QueryManager {\n  constructor(world) {\n    this._world = world;\n\n    // Queries indexed by a unique identifier for the components it has\n    this._queries = {};\n  }\n\n  onEntityRemoved(entity) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n      if (entity.queries.indexOf(query) !== -1) {\n        query.removeEntity(entity);\n      }\n    }\n  }\n\n  /**\n   * Callback when a component is added to an entity\n   * @param {Entity} entity Entity that just got the new component\n   * @param {Component} Component Component added to the entity\n   */\n  onEntityComponentAdded(entity, Component) {\n    // @todo Use bitmask for checking components?\n\n    // Check each indexed query to see if we need to add this entity to the list\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        ~query.entities.indexOf(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n\n      // Add the entity only if:\n      // Component is in the query\n      // and Entity has ALL the components of the query\n      // and Entity is not already in the query\n      if (\n        !~query.Components.indexOf(Component) ||\n        !query.match(entity) ||\n        ~query.entities.indexOf(entity)\n      )\n        continue;\n\n      query.addEntity(entity);\n    }\n  }\n\n  /**\n   * Callback when a component is removed from an entity\n   * @param {Entity} entity Entity to remove the component from\n   * @param {Component} Component Component to remove from the entity\n   */\n  onEntityComponentRemoved(entity, Component) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        !~query.entities.indexOf(entity) &&\n        query.match(entity)\n      ) {\n        query.addEntity(entity);\n        continue;\n      }\n\n      if (\n        !!~query.Components.indexOf(Component) &&\n        !!~query.entities.indexOf(entity) &&\n        !query.match(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n    }\n  }\n\n  /**\n   * Get a query for the specified components\n   * @param {Component} Components Components that the query should have\n   */\n  getQuery(Components) {\n    var key = queryKey(Components);\n    var query = this._queries[key];\n    if (!query) {\n      this._queries[key] = query = new Query(Components, this._world);\n    }\n    return query;\n  }\n\n  /**\n   * Return some stats from this class\n   */\n  stats() {\n    var stats = {};\n    for (var queryName in this._queries) {\n      stats[queryName] = this._queries[queryName].stats();\n    }\n    return stats;\n  }\n}\n\nclass SystemStateComponent {}\n\n/**\n * @private\n * @class EntityManager\n */\nclass EntityManager {\n  constructor(world) {\n    this.world = world;\n    this.componentsManager = world.componentsManager;\n\n    // All the entities in this instance\n    this._entities = [];\n\n    this._queryManager = new QueryManager(this);\n    this.eventDispatcher = new EventDispatcher();\n    this._entityPool = new ObjectPool(Entity);\n\n    // Deferred deletion\n    this.entitiesWithComponentsToRemove = [];\n    this.entitiesToRemove = [];\n\n    this.numStateComponents = 0;\n  }\n\n  /**\n   * Create a new entity\n   */\n  createEntity() {\n    var entity = this._entityPool.aquire();\n    entity.alive = true;\n    entity._world = this;\n    this._entities.push(entity);\n    this.eventDispatcher.dispatchEvent(ENTITY_CREATED, entity);\n    return entity;\n  }\n\n  // COMPONENTS\n\n  /**\n   * Add a component to an entity\n   * @param {Entity} entity Entity where the component will be added\n   * @param {Component} Component Component to be added to the entity\n   * @param {Object} values Optional values to replace the default attributes\n   */\n  entityAddComponent(entity, Component, values) {\n    if (~entity._ComponentTypes.indexOf(Component)) return;\n\n    entity._ComponentTypes.push(Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      this.numStateComponents++;\n    }\n\n    var componentPool = this.world.componentsManager.getComponentsPool(\n      Component\n    );\n    var component = componentPool.aquire();\n\n    entity._components[Component.name] = component;\n\n    if (values) {\n      if (component.copy) {\n        component.copy(values);\n      } else {\n        for (var name in values) {\n          component[name] = values[name];\n        }\n      }\n    }\n\n    this._queryManager.onEntityComponentAdded(entity, Component);\n    this.world.componentsManager.componentAddedToEntity(Component);\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_ADDED, entity, Component);\n  }\n\n  /**\n   * Remove a component from an entity\n   * @param {Entity} entity Entity which will get removed the component\n   * @param {*} Component Component to remove from the entity\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  entityRemoveComponent(entity, Component, immediately) {\n    var index = entity._ComponentTypes.indexOf(Component);\n    if (!~index) return;\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE, entity, Component);\n\n    if (immediately) {\n      this._entityRemoveComponentSync(entity, Component, index);\n    } else {\n      if (entity._ComponentTypesToRemove.length === 0)\n        this.entitiesWithComponentsToRemove.push(entity);\n\n      entity._ComponentTypes.splice(index, 1);\n      entity._ComponentTypesToRemove.push(Component);\n\n      var componentName = getName(Component);\n      entity._componentsToRemove[componentName] =\n        entity._components[componentName];\n      delete entity._components[componentName];\n    }\n\n    // Check each indexed query to see if we need to remove it\n    this._queryManager.onEntityComponentRemoved(entity, Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      this.numStateComponents--;\n\n      // Check if the entity was a ghost waiting for the last system state component to be removed\n      if (this.numStateComponents === 0 && !entity.alive) {\n        entity.remove();\n      }\n    }\n  }\n\n  _entityRemoveComponentSync(entity, Component, index) {\n    // Remove T listing on entity and property ref, then free the component.\n    entity._ComponentTypes.splice(index, 1);\n    var propName = componentPropertyName(Component);\n    var componentName = getName(Component);\n    var component = entity._components[componentName];\n    delete entity._components[componentName];\n    this.componentsManager._componentPool[propName].release(component);\n    this.world.componentsManager.componentRemovedFromEntity(Component);\n  }\n\n  /**\n   * Remove all the components from an entity\n   * @param {Entity} entity Entity from which the components will be removed\n   */\n  entityRemoveAllComponents(entity, immediately) {\n    let Components = entity._ComponentTypes;\n\n    for (let j = Components.length - 1; j >= 0; j--) {\n      if (Components[j].__proto__ !== SystemStateComponent)\n        this.entityRemoveComponent(entity, Components[j], immediately);\n    }\n  }\n\n  /**\n   * Remove the entity from this manager. It will clear also its components\n   * @param {Entity} entity Entity to remove from the manager\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  removeEntity(entity, immediately) {\n    var index = this._entities.indexOf(entity);\n\n    if (!~index) throw new Error(\"Tried to remove entity not in list\");\n\n    entity.alive = false;\n\n    if (this.numStateComponents === 0) {\n      // Remove from entity list\n      this.eventDispatcher.dispatchEvent(ENTITY_REMOVED, entity);\n      this._queryManager.onEntityRemoved(entity);\n      if (immediately === true) {\n        this._releaseEntity(entity, index);\n      } else {\n        this.entitiesToRemove.push(entity);\n      }\n    }\n\n    this.entityRemoveAllComponents(entity, immediately);\n  }\n\n  _releaseEntity(entity, index) {\n    this._entities.splice(index, 1);\n\n    // Prevent any access and free\n    entity._world = null;\n    this._entityPool.release(entity);\n  }\n\n  /**\n   * Remove all entities from this manager\n   */\n  removeAllEntities() {\n    for (var i = this._entities.length - 1; i >= 0; i--) {\n      this.removeEntity(this._entities[i]);\n    }\n  }\n\n  processDeferredRemoval() {\n    for (let i = 0; i < this.entitiesToRemove.length; i++) {\n      let entity = this.entitiesToRemove[i];\n      let index = this._entities.indexOf(entity);\n      this._releaseEntity(entity, index);\n    }\n    this.entitiesToRemove.length = 0;\n\n    for (let i = 0; i < this.entitiesWithComponentsToRemove.length; i++) {\n      let entity = this.entitiesWithComponentsToRemove[i];\n      while (entity._ComponentTypesToRemove.length > 0) {\n        let Component = entity._ComponentTypesToRemove.pop();\n\n        var propName = componentPropertyName(Component);\n        var componentName = getName(Component);\n        var component = entity._componentsToRemove[componentName];\n        delete entity._componentsToRemove[componentName];\n        this.componentsManager._componentPool[propName].release(component);\n        //this.world.componentsManager.componentRemovedFromEntity(Component);\n\n        //this._entityRemoveComponentSync(entity, Component, index);\n      }\n    }\n\n    this.entitiesWithComponentsToRemove.length = 0;\n  }\n\n  /**\n   * Get a query based on a list of components\n   * @param {Array(Component)} Components List of components that will form the query\n   */\n  queryComponents(Components) {\n    return this._queryManager.getQuery(Components);\n  }\n\n  // EXTRAS\n\n  /**\n   * Return number of entities\n   */\n  count() {\n    return this._entities.length;\n  }\n\n  /**\n   * Return some stats\n   */\n  stats() {\n    var stats = {\n      numEntities: this._entities.length,\n      numQueries: Object.keys(this._queryManager._queries).length,\n      queries: this._queryManager.stats(),\n      numComponentPool: Object.keys(this.componentsManager._componentPool)\n        .length,\n      componentPool: {},\n      eventDispatcher: this.eventDispatcher.stats\n    };\n\n    for (var cname in this.componentsManager._componentPool) {\n      var pool = this.componentsManager._componentPool[cname];\n      stats.componentPool[cname] = {\n        used: pool.totalUsed(),\n        size: pool.count\n      };\n    }\n\n    return stats;\n  }\n}\n\nconst ENTITY_CREATED = \"EntityManager#ENTITY_CREATE\";\nconst ENTITY_REMOVED = \"EntityManager#ENTITY_REMOVED\";\nconst COMPONENT_ADDED = \"EntityManager#COMPONENT_ADDED\";\nconst COMPONENT_REMOVE = \"EntityManager#COMPONENT_REMOVE\";\n\nclass DummyObjectPool {\n  constructor(T) {\n    this.count = 0;\n    this.used = 0;\n    this.T = T;\n  }\n\n  aquire() {\n    this.used++;\n    this.count++;\n    return new this.T();\n  }\n\n  release() {\n    this.used--;\n  }\n\n  totalSize() {\n    return this.count;\n  }\n\n  totalFree() {\n    return Infinity;\n  }\n\n  totalUsed() {\n    return this.used;\n  }\n}\n\nclass ComponentManager {\n  constructor() {\n    this.Components = {};\n    this._componentPool = {};\n    this.numComponents = {};\n  }\n\n  registerComponent(Component) {\n    this.Components[Component.name] = Component;\n    this.numComponents[Component.name] = 0;\n  }\n\n  componentAddedToEntity(Component) {\n    if (!this.numComponents[Component.name]) {\n      this.numComponents[Component.name] = 1;\n    } else {\n      this.numComponents[Component.name]++;\n    }\n  }\n\n  componentRemovedFromEntity(Component) {\n    this.numComponents[Component.name]--;\n  }\n\n  getComponentsPool(Component) {\n    var componentName = componentPropertyName(Component);\n\n    if (!this._componentPool[componentName]) {\n      if (Component.prototype.reset) {\n        this._componentPool[componentName] = new ObjectPool(Component);\n      } else {\n        console.warn(\n          `Component '${Component.name}' won't benefit from pooling because 'reset' method was not implemeneted.`\n        );\n        this._componentPool[componentName] = new DummyObjectPool(Component);\n      }\n    }\n\n    return this._componentPool[componentName];\n  }\n}\n\nclass World {\n  constructor() {\n    this.componentsManager = new ComponentManager(this);\n    this.entityManager = new EntityManager(this);\n    this.systemManager = new SystemManager(this);\n\n    this.enabled = true;\n\n    this.eventQueues = {};\n\n    if (typeof CustomEvent !== \"undefined\") {\n      var event = new CustomEvent(\"ecsy-world-created\", { detail: this });\n      window.dispatchEvent(event);\n    }\n  }\n\n  registerComponent(Component) {\n    this.componentsManager.registerComponent(Component);\n    return this;\n  }\n\n  registerSystem(System, attributes) {\n    this.systemManager.registerSystem(System, attributes);\n    return this;\n  }\n\n  getSystem(SystemClass) {\n    return this.systemManager.getSystem(SystemClass);\n  }\n\n  getSystems() {\n    return this.systemManager.getSystems();\n  }\n\n  execute(delta, time) {\n    if (this.enabled) {\n      this.systemManager.execute(delta, time);\n      this.entityManager.processDeferredRemoval();\n    }\n  }\n\n  stop() {\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  createEntity() {\n    return this.entityManager.createEntity();\n  }\n\n  stats() {\n    var stats = {\n      entities: this.entityManager.stats(),\n      system: this.systemManager.stats()\n    };\n\n    console.log(JSON.stringify(stats, null, 2));\n  }\n}\n\nclass System {\n  canExecute() {\n    if (this._mandatoryQueries.length === 0) return true;\n\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\n      var query = this._mandatoryQueries[i];\n      if (query.entities.length === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  constructor(world, attributes) {\n    this.world = world;\n    this.enabled = true;\n\n    // @todo Better naming :)\n    this._queries = {};\n    this.queries = {};\n\n    this.priority = 0;\n\n    // Used for stats\n    this.executeTime = 0;\n\n    if (attributes && attributes.priority) {\n      this.priority = attributes.priority;\n    }\n\n    this._mandatoryQueries = [];\n\n    this.initialized = true;\n\n    if (this.constructor.queries) {\n      for (var queryName in this.constructor.queries) {\n        var queryConfig = this.constructor.queries[queryName];\n        var Components = queryConfig.components;\n        if (!Components || Components.length === 0) {\n          throw new Error(\"'components' attribute can't be empty in a query\");\n        }\n        var query = this.world.entityManager.queryComponents(Components);\n        this._queries[queryName] = query;\n        if (queryConfig.mandatory === true) {\n          this._mandatoryQueries.push(query);\n        }\n        this.queries[queryName] = {\n          results: query.entities\n        };\n\n        // Reactive configuration added/removed/changed\n        var validEvents = [\"added\", \"removed\", \"changed\"];\n\n        const eventMapping = {\n          added: Query.prototype.ENTITY_ADDED,\n          removed: Query.prototype.ENTITY_REMOVED,\n          changed: Query.prototype.COMPONENT_CHANGED // Query.prototype.ENTITY_CHANGED\n        };\n\n        if (queryConfig.listen) {\n          validEvents.forEach(eventName => {\n            // Is the event enabled on this system's query?\n            if (queryConfig.listen[eventName]) {\n              let event = queryConfig.listen[eventName];\n\n              if (eventName === \"changed\") {\n                query.reactive = true;\n                if (event === true) {\n                  // Any change on the entity from the components in the query\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    entity => {\n                      // Avoid duplicates\n                      if (eventList.indexOf(entity) === -1) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else if (Array.isArray(event)) {\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    (entity, changedComponent) => {\n                      // Avoid duplicates\n                      if (\n                        event.indexOf(changedComponent.constructor) !== -1 &&\n                        eventList.indexOf(entity) === -1\n                      ) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                }\n              } else {\n                let eventList = (this.queries[queryName][eventName] = []);\n\n                query.eventDispatcher.addEventListener(\n                  eventMapping[eventName],\n                  entity => {\n                    // @fixme overhead?\n                    if (eventList.indexOf(entity) === -1)\n                      eventList.push(entity);\n                  }\n                );\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  stop() {\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  // @question rename to clear queues?\n  clearEvents() {\n    for (let queryName in this.queries) {\n      var query = this.queries[queryName];\n      if (query.added) query.added.length = 0;\n      if (query.removed) query.removed.length = 0;\n      if (query.changed) {\n        if (Array.isArray(query.changed)) {\n          query.changed.length = 0;\n        } else {\n          for (let name in query.changed) {\n            query.changed[name].length = 0;\n          }\n        }\n      }\n    }\n  }\n\n  toJSON() {\n    var json = {\n      name: this.constructor.name,\n      enabled: this.enabled,\n      executeTime: this.executeTime,\n      priority: this.priority,\n      queries: {}\n    };\n\n    /*\n    if (this.config) {\n      var queries = this.queries;\n      for (let queryName in queries) {\n        let query = queries[queryName];\n        json.queries[queryName] = {\n          key: this._queries[queryName].key\n        };\n        if (query.events) {\n          let events = (json.queries[queryName][\"events\"] = {});\n          for (let eventName in query.events) {\n            let event = query.events[eventName];\n            events[eventName] = {\n              eventName: event.event,\n              numEntities: this.events[queryName][eventName].length\n            };\n            if (event.components) {\n              events[eventName].components = event.components.map(c => c.name);\n            }\n          }\n        }\n      }\n    }\n*/\n\n    return json;\n  }\n}\n\nfunction Not(Component) {\n  return {\n    operator: \"not\",\n    Component: Component\n  };\n}\n\nclass Component {}\n\nclass TagComponent {\n  reset() {}\n}\n\nfunction createType(typeDefinition) {\n  var mandatoryFunctions = [\n    \"create\",\n    \"reset\",\n    \"clear\"\n    /*\"copy\"*/\n  ];\n\n  var undefinedFunctions = mandatoryFunctions.filter(f => {\n    return !typeDefinition[f];\n  });\n\n  if (undefinedFunctions.length > 0) {\n    throw new Error(\n      `createType expect type definition to implements the following functions: ${undefinedFunctions.join(\n        \", \"\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n  return typeDefinition;\n}\n\n/**\n * Standard types\n */\nvar Types = {};\n\nTypes.Number = createType({\n  baseType: Number,\n  isSimpleType: true,\n  create: defaultValue => {\n    return typeof defaultValue !== \"undefined\" ? defaultValue : 0;\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue;\n    } else {\n      src[key] = 0;\n    }\n  },\n  clear: (src, key) => {\n    src[key] = 0;\n  }\n});\n\nTypes.Boolean = createType({\n  baseType: Boolean,\n  isSimpleType: true,\n  create: defaultValue => {\n    return typeof defaultValue !== \"undefined\" ? defaultValue : false;\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue;\n    } else {\n      src[key] = false;\n    }\n  },\n  clear: (src, key) => {\n    src[key] = false;\n  }\n});\n\nTypes.String = createType({\n  baseType: String,\n  isSimpleType: true,\n  create: defaultValue => {\n    return typeof defaultValue !== \"undefined\" ? defaultValue : \"\";\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue;\n    } else {\n      src[key] = \"\";\n    }\n  },\n  clear: (src, key) => {\n    src[key] = \"\";\n  }\n});\n\nTypes.Array = createType({\n  baseType: Array,\n  create: defaultValue => {\n    if (typeof defaultValue !== \"undefined\") {\n      return defaultValue.slice();\n    }\n\n    return [];\n  },\n  reset: (src, key, defaultValue) => {\n    if (typeof defaultValue !== \"undefined\") {\n      src[key] = defaultValue.slice();\n    } else {\n      src[key].length = 0;\n    }\n  },\n  clear: (src, key) => {\n    src[key].length = 0;\n  },\n  copy: (src, dst, key) => {\n    src[key] = dst[key].slice();\n  }\n});\n\nvar standardTypes = {\n  number: Types.Number,\n  boolean: Types.Boolean,\n  string: Types.String\n};\n\n/**\n * Try to infer the type of the value\n * @param {*} value\n * @return {String} Type of the attribute\n * @private\n */\nfunction inferType(value) {\n  if (Array.isArray(value)) {\n    return Types.Array;\n  }\n\n  if (standardTypes[typeof value]) {\n    return standardTypes[typeof value];\n  } else {\n    return null;\n  }\n}\n\nfunction createComponentClass(schema, name) {\n  //var Component = new Function(`return function ${name}() {}`)();\n  for (let key in schema) {\n    let type = schema[key].type;\n    if (!type) {\n      schema[key].type = inferType(schema[key].default);\n    }\n  }\n\n  var Component = function() {\n    for (let key in schema) {\n      var attr = schema[key];\n      let type = attr.type;\n      if (type && type.isType) {\n        this[key] = type.create(attr.default);\n      } else {\n        this[key] = attr.default;\n      }\n    }\n  };\n\n  if (typeof name !== \"undefined\") {\n    Object.defineProperty(Component, \"name\", { value: name });\n  }\n\n  Component.prototype.schema = schema;\n\n  var knownTypes = true;\n  for (let key in schema) {\n    var attr = schema[key];\n    if (!attr.type) {\n      attr.type = inferType(attr.default);\n    }\n\n    var type = attr.type;\n    if (!type) {\n      console.warn(`Unknown type definition for attribute '${key}'`);\n      knownTypes = false;\n    }\n  }\n\n  if (!knownTypes) {\n    console.warn(\n      `This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'`\n    );\n\n    for (var key in schema) {\n      let attr = schema[key];\n      Component.prototype[key] = attr.default;\n    }\n  } else {\n    Component.prototype.copy = function(src) {\n      for (let key in schema) {\n        if (src[key]) {\n          let type = schema[key].type;\n          if (type.isSimpleType) {\n            this[key] = src[key];\n          } else if (type.copy) {\n            type.copy(this, src, key);\n          } else {\n            // @todo Detect that it's not possible to copy all the attributes\n            // and just avoid creating the copy function\n            console.warn(\n              `Unknown copy function for attribute '${key}' data type`\n            );\n          }\n        }\n      }\n    };\n\n    Component.prototype.reset = function() {\n      for (let key in schema) {\n        let attr = schema[key];\n        let type = attr.type;\n        if (type.reset) type.reset(this, key, attr.default);\n      }\n    };\n\n    Component.prototype.clear = function() {\n      for (let key in schema) {\n        let type = schema[key].type;\n        if (type.clear) type.clear(this, key);\n      }\n    };\n\n    for (let key in schema) {\n      let attr = schema[key];\n      let type = attr.type;\n      Component.prototype[key] = attr.default;\n\n      if (type.reset) {\n        type.reset(Component.prototype, key, attr.default);\n      }\n    }\n  }\n\n  return Component;\n}\n\nexport { Component, Not, System, SystemStateComponent, TagComponent, Types, World, createComponentClass, createType };\n","import Ludic, { Camera, Vector2 } from '@ludic/ludic'\nimport { Component, TagComponent, SystemStateComponent } from 'ecsy'\n\nimport TowerMenu from './ui/towerMenu'\n\nimport { EnemyWave, EnemyGroup } from './utils/Waves'\n\nimport Color from './utils/Color'\n\nimport Player from './entities/Player'\nimport Tile from './entities/Tile'\n\nexport class CameraComponent  extends Component {\n  value: Camera\n  constructor(){\n    super()\n    this.value = null\n  }\n}\n\n// TODO break this up into multiple components and a component flag isEnemy\nexport class EnemyStateComponent extends Component {\n  health: number\n  speed: number\n  color: string\n  size: number\n  type: string\n  wave: EnemyWave\n  group: EnemyGroup\n\n  constructor(wave: EnemyWave, group: EnemyGroup, type: string = \"1\", speed: number = .1, health: number = 10, size: number = 1){\n    super()\n    this.wave = wave\n    this.group = group\n    this.type = type\n    this.speed = speed\n    this.health = health\n    this.color = 'red'\n    this.size = size\n  }\n}\n\n\n// TODO break this up into multiple components and a component flag isPlayer\nexport class PlayerStateComponent extends Component {\n  vibrating: boolean\n  boosting: boolean\n  boostMultiplier = 1.2\n  building: boolean = false\n\n  private _speed = 0.5\n\n  constructor(){\n    super()\n    this.vibrating = false\n  }\n\n  get speed(): number {\n    return this.boosting ? this._speed * this.boostMultiplier : this._speed\n  }\n}\n\n\nexport class FillComponent extends Component {\n  fillStyle: string | CanvasGradient | CanvasPattern\n  constructor(fillStyle: FillComponent['fillStyle']){\n    super()\n    this.fillStyle = fillStyle\n  }\n}\n\nexport class GamepadComponent extends Component {\n  index: number\n  constructor(){\n    super()\n    this.index = -1\n  }\n}\n\nexport class InputFocus extends TagComponent { }\n\nexport class MechComponent extends Component {\n  type: string\n\n  constructor(){\n    super()\n    this.type = ''\n  }\n}\n\nexport class MovementComponent extends Component {\n\tpublic velocity: Vector2 = new Vector2()\n\tpublic accel: Vector2 = new Vector2()\n\n  constructor(velocity: Vector2, accel: Vector2){\n    super()\n    this.velocity = velocity\n    this.accel = accel\n  }\n}\n\nexport class PositionComponent extends Component {\n\tx: number\n\ty: number\n\n  constructor(){\n    super()\n    this.x = 0\n    this.y = 0\n  }\n}\n\nexport type RenderFn = (ctx: CanvasRenderingContext2D, ...args: any[]) => void\n\nexport class RenderComponent  extends Component {\n\tpublic renderFn: RenderFn\n\n  constructor(renderFn: RenderFn){\n    super()\n    this.renderFn = renderFn\n  }\n}\n\nexport class TowerMenuStateComponent extends SystemStateComponent {\n  index: number\n  constructor(){\n    super()\n    this.reset()\n  }\n  reset(){\n    this.index = 0\n  }\n}\n\nexport class isTowerMenu extends TagComponent {}\n\nexport class isPlayerComponent extends TagComponent {}\nexport class isTowerComponent extends TagComponent {}\nexport class isTileComponent extends TagComponent {}\nexport class isCastleComponent extends TagComponent {}\nexport class isEnemyComponent extends TagComponent {}\n\nexport class MapConfigComponent extends Component {\n  value: any\n  constructor(){\n    super()\n  }\n\n  reset(){\n    this.value = null\n  }\n}\n\nexport class EnemyConfigComponent extends Component {\n  value: any\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.value = null\n  }\n}\n\nexport class PlayerConfigComponent extends Component {\n  value: any\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.value = null\n  }\n}\n\nexport class SizeComponent extends Component {\n  value: number\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.value = 0\n  }\n}\n\nexport class SpeedComponent extends Component {\n  value: number\n  constructor(){\n    super()\n    this.reset()\n  }\n  reset(){\n    this.value = 0\n  }\n}\n\nexport class HealthComponent extends Component {\n  value: number\n  constructor(){\n    super()\n  }\n\n  reset(){\n    this.value = 0\n  }\n}\n\nexport class DestinationCubeComponent extends Component {\n  x: number\n  y: number\n  z: number\n\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.x = 0\n    this.y = 0\n    this.z = 0\n  }\n}\n\nexport class PreviousCubeComponent extends Component {\n  x: number\n  y: number\n  z: number\n\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.x = 0\n    this.y = 0\n    this.z = 0\n  }\n}\n\n\nexport class CubeCoordinateComponent extends Component {\n  x: number\n  y: number\n  z: number\n\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.x = 0\n    this.y = 0\n    this.z = 0\n  }\n}\n\n\nexport class TileStateComponent extends Component {\n  status: string\n  playersOn: number\n\n  constructor(){\n    super()\n    this.reset()\n  }\n\n  reset(){\n    this.status = \"inactive\"\n    this.playersOn = 0\n  }\n}\n","import { Vector2 } from '@ludic/ludic'\n\nexport class Hex {\n  q: number\n  r: number\n  s: number\n  x: number\n  y: number\n  z: number\n  sideLength: number\n\n  constructor(x: number, y: number, z: number, sideLength: number){\n    if((x + y + z) !== 0){ throw \"x + y + z needs to = 0\"}\n    this.x = x\n    this.y = y\n    this.z = z\n    this.q = x\n    this.r = z\n    this.sideLength = sideLength\n  }\n\n  get position(): Vector2 {\n    return cube_to_vector2({x: this.x, y: this.y, z: this.z}, this.sideLength)\n  }\n\n  get cubeCoordinate(): CubeCoordinate {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z\n    }\n  }\n\n  get offsetCoordinate(): OffsetCoordinate {\n    return cubeToOffset(this.cubeCoordinate)\n  }\n}\n\nexport interface OffsetCoordinate {\n  q: number\n  r: number\n}\n\nexport interface AxialCoordinate {\n  q: number\n  r: number\n  s: number\n}\n\nexport interface CubeCoordinate {\n  x: number\n  y: number\n  z: number\n}\n\nexport const diagonals: Hex[] = [\n  new Hex(2, -1, -1, 0),\n  new Hex(1, -2, 1, 0),\n  new Hex(-1, -1, 2, 0),\n  new Hex(-2, 1, 1, 0),\n  new Hex(-1, 2, -1, 0),\n  new Hex(1, 1, -2, 0),\n]\n\nexport const cubeDirections: CubeCoordinate[] = [\n  {x:  1,  y: -1,  z:  0},\n  {x:  1,  y:  0,  z: -1},\n  {x:  0,  y:  1,  z: -1},\n  {x:  0,  y: -1,  z:  1},\n  {x: -1,  y:  1,  z:  0},\n  {x: -1,  y:  0,  z:  1},\n]\n\nexport function add(a: Hex, b:Hex): Hex {\n  return new Hex(a.x + b.x, a.y + b.y, a.z + b.z, a.sideLength + b.sideLength)\n}\n\nexport function cube_add(a: CubeCoordinate, b:CubeCoordinate): CubeCoordinate {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y,\n    z: a.z + b.z\n  }\n}\n\nexport function subtract(a: Hex, b: Hex): Hex {\n  return new Hex(a.x - b.x, a.y - b.y, a.z - b.z, a.sideLength - b.sideLength)\n}\n\nexport function equal(a: Hex, b: Hex): boolean {\n  if(a.x == b.x && a.y == b.y && a.z == b.z){\n    return true\n  } else {\n    return false\n  }\n}\n\nexport function scale(hex: Hex, k:number): Hex {\n  return new Hex(hex.x * k, hex.y * k, hex.z * k, hex.sideLength * k)\n}\n\nexport function rotateLeft(hex: Hex): Hex {\n  return new Hex(-hex.x, -hex.y, -hex.z, hex.sideLength)\n}\n\nexport function rotateRight(hex: Hex): Hex {\n  return new Hex(-hex.x, -hex.y, -hex.z, hex.sideLength)\n}\n\nexport function direction(direction: number): CubeCoordinate {\n  return cubeDirections[direction]\n}\n\nexport function allNeighbors(hex: Hex): Hex[] {\n  return cubeDirections.map((d: CubeCoordinate) => {\n    return add(hex, new Hex(d.x, d.y, d.z, 0))\n  })\n}\n\nexport function cube_all_neighbors(cube: CubeCoordinate): CubeCoordinate[] {\n  return cubeDirections.map((d: CubeCoordinate) => {\n    return cube_add(cube, d)\n  })\n}\n\nexport function diagonalNeighbor(hex: Hex, direction: number): Hex {\n  return add(hex, diagonals[direction])\n}\n\nexport function len(hex: Hex): number {\n  return (Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2\n}\n\nexport function distance(a: Hex, b:Hex): number {\n  return len(subtract(a, b))\n}\n\nexport function area_from_side_length(sideLength: number): number {\n  return ((3 * Math.sqrt(3)) / 2) * Math.pow(sideLength, 2)\n}\n\nexport function side_length_from_area(area: number): number {\n  return Math.pow(3, 1/4) * Math.sqrt(2 * (area / 9))\n}\n\nexport function offset_to_cube(offsetCoordinate: OffsetCoordinate): CubeCoordinate {\n  var x = offsetCoordinate.q\n  var z = offsetCoordinate.r - (offsetCoordinate.q - (offsetCoordinate.q&1)) / 2\n  var y = -x-z\n  return {x, y, z}\n}\n\nexport function cubeToOffset(cube: CubeCoordinate): OffsetCoordinate{\n  return {\n    q:cube.x,\n    r: cube.z + (cube.x - (cube.x&1)) / 2\n  }\n}\n\nexport function cube_to_vector2(coordinate: CubeCoordinate, size: number): Vector2 {\n  var x = size * (3/2 * coordinate.x)\n  var y = size * (Math.sqrt(3)/2 * coordinate.x  +  Math.sqrt(3) * coordinate.y)\n\n  return new Vector2(x, y)\n}\n\nexport function cubeToAxial(x: number, y: number, z: number): AxialCoordinate {\n  return {\n    q: x,\n    r: y,\n    s: -x - y\n  }\n}\n\nexport function axialToCube(q: number, r: number): CubeCoordinate {\n  return {\n    x: q,\n    y: r,\n    z: -q - r\n  }\n}\n\nexport function vector2_to_cube(point: Vector2, sideLength: number): CubeCoordinate {\n  let q: number = (2./3 * point.x) / sideLength\n  let r: number = (-1./3 * point.x + Math.sqrt(3)/3 * point.y) / sideLength\n  return cube_round(axialToCube(q, r))\n}\n\nexport function cube_round(cube: CubeCoordinate): CubeCoordinate {\n  var rx = Math.round(cube.x)\n  var ry = Math.round(cube.y)\n  var rz = Math.round(cube.z)\n\n  var x_diff = Math.abs(rx - cube.x)\n  var y_diff = Math.abs(ry - cube.y)\n  var z_diff = Math.abs(rz - cube.z)\n\n  if(x_diff > y_diff && x_diff > z_diff){\n    rx = -ry-rz\n  }\n  else if(y_diff > z_diff) {\n    ry = -rx-rz\n  } else {\n    rz = -rx-ry\n  }\n\n  return {\n    x: rx,\n    y: ry,\n    z: rz\n  }\n}\n","import { Vector2 } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport { Map, MapTile } from '../utils/Map'\nimport { MapConfigComponent,\n         PlayerConfigComponent,\n         isPlayerComponent,\n         isTileComponent,\n         PositionComponent,\n         MovementComponent,\n         PlayerStateComponent,\n         CubeCoordinateComponent,\n         SizeComponent,\n         GamepadComponent,\n         InputFocus,\n         MechComponent\n       } from '../components'\nimport { Hex, vector2_to_cube, cube_to_vector2, CubeCoordinate } from '../utils/Hex'\n\n\nexport default class PlayerInitSystem extends System {\n  enabled: boolean\n  world: World\n\n  queries: {\n    playerConfig: QueryType\n    mapConfig: QueryType\n    tiles:  QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const playerConfig = this.queries.playerConfig.results[0].getComponent(PlayerConfigComponent).value\n    const mapConfig: Map = this.queries.mapConfig.results[0].getComponent(MapConfigComponent).value\n    const tileSize: number = this.queries.tiles.results[0].getComponent(SizeComponent).value\n    const playerSize: number = tileSize / 3\n\n\n    Object.entries(playerConfig).forEach(([index, type]) => {\n      let spawnPoint: Vector2 = new Vector2(0, 0)\n      if(mapConfig.playerSpawnPoints.length > parseInt(index)){\n        let coords = mapConfig.playerSpawnPoints[parseInt(index)]\n        spawnPoint = cube_to_vector2({x: coords.x, y: coords.y, z: coords.z}, tileSize)\n      }\n\n      const player = this.world.createEntity()\n      player.addComponent(PositionComponent, spawnPoint)\n      player.addComponent(SizeComponent, {value: playerSize})\n      player.addComponent(MovementComponent)\n      player.addComponent(CubeCoordinateComponent, vector2_to_cube(spawnPoint, tileSize))\n      player.addComponent(PlayerStateComponent)\n      player.addComponent(isPlayerComponent)\n      player.addComponent(GamepadComponent, {index: parseInt(index)})\n      player.addComponent(InputFocus)\n      player.addComponent(MechComponent, {type})\n    })\n\n\n    this.enabled = false\n  }\n}\n\n// @ts-ignore\nPlayerInitSystem.queries = {\n  playerConfig: { components: [PlayerConfigComponent], mandatory: true},\n  mapConfig: { components: [MapConfigComponent], mandatory: true},\n  tiles:  { components: [isTileComponent], mandatory: true},\n}\n","import Ludic from '@ludic/ludic'\nimport { PositionComponent,\n         RenderComponent,\n         PlayerStateComponent,\n         CameraComponent,\n         MechComponent,\n         SizeComponent\n       } from '../components'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\n\nexport default class PlayerRenderSystem extends System {\n\n  engine: World\n\n  queries: {\n    entities: QueryType\n    camera: QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n\n    ctx.save()\n    const camera = this.queries.camera.results[0].getComponent(CameraComponent).value\n    camera.drawAxes(ctx)\n    this.queries.entities.results.forEach((entity: Entity) => {\n      ctx.save()\n      this.renderPlayer(ctx, entity)\n      ctx.restore()\n    })\n    ctx.restore()\n  }\n\n  renderPlayer(ctx: CanvasRenderingContext2D, player: Entity){\n    const pos = player.getComponent(PositionComponent)\n    const size: number = player.getComponent(SizeComponent).value\n    const mechComp = player.getComponent(MechComponent)\n\n    ctx.fillStyle = mechComp.type\n    ctx.translate(pos.x, pos.y)\n    ctx.beginPath()\n    ctx.arc(0, 0, size, 0, Math.PI * 2)\n    ctx.fill()\n  }\n}\n\n// @ts-ignore\nPlayerRenderSystem.queries = {\n  entities: { components: [PlayerStateComponent]},\n  camera: { components: [CameraComponent]},\n}\n","import { GamepadComponent,\n         CubeCoordinateComponent,\n         PositionComponent,\n         SizeComponent,\n         PlayerStateComponent,\n         isTowerMenu,\n         InputFocus,\n         CameraComponent\n       } from '../components'\nimport Ludic, { Vector2 } from '@ludic/ludic'\nimport { System, Entity, World, Not } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport TowerMenu from '../ui/towerMenu'\nimport { Hex, vector2_to_cube, cube_to_vector2, CubeCoordinate } from '../utils/Hex'\n/**\n * This system is in charge of translating gamepad inputs into\n * player movement.\n */\nexport default class PlayerControlSystem extends System {\n  world!: World\n\n  gamepadDeadzone = 0.3\n\n  queries!: {\n    players: QueryType\n    playersWithoutFocus: QueryType\n    towerMenusWithoutFocus: QueryType\n  }\n\n  execute(deltaTime: number) {\n    this.queries.players.results.forEach((ent: Entity, ix: number) => {\n      const p = ent.getMutableComponent(PositionComponent)\n      const size: number = ent.getMutableComponent(SizeComponent).value\n      const g = ent.getComponent(GamepadComponent)\n      const tileSize: number = size * 3 // Player is 1/3 tileSize\n      const currentCube: CubeCoordinateComponent = ent.getComponent(CubeCoordinateComponent)\n      const state = ent.getComponent(PlayerStateComponent)\n      const gamepad = Ludic.input.gamepad.get(g.index)\n\n      if(p){\n\n        // player can only move if they are not building\n        if(!state.building){\n          const playerVector = new Vector2(0,0)\n          // Update the position based on gamepad actions\n          if(gamepad.lx.value >= this.gamepadDeadzone) {\n            playerVector.x = gamepad.lx.value\n          } else if(gamepad.lx.value <= -this.gamepadDeadzone) {\n            playerVector.x = gamepad.lx.value\n          }\n          if(gamepad.ly.value >= this.gamepadDeadzone) {\n            playerVector.y = -gamepad.ly.value\n          } else if(gamepad.ly.value <= -this.gamepadDeadzone) {\n            playerVector.y = -gamepad.ly.value\n          }\n\n          // speed boost\n          if(gamepad.circle.buttonDown){\n            state.boosting = true\n          } else if(gamepad.circle.buttonUp){\n            state.boosting = false\n          }\n\n          // normalize the player vector and apply speed multiplier\n          playerVector.scale(state.speed)\n          p.x += playerVector.x\n          p.y += playerVector.y\n\n          // Update current cube\n          const nowCube = vector2_to_cube(new Vector2(p.x, p.y), tileSize)\n          if(nowCube.x != currentCube.x || nowCube.z != currentCube.z || nowCube.z != currentCube.z){\n            let cube: CubeCoordinateComponent = ent.getMutableComponent(CubeCoordinateComponent)\n            cube.x = nowCube.x\n            cube.y = nowCube.y\n            cube.z = nowCube.z\n          }\n        }\n\n        if(gamepad.cross.buttonUp){\n          // state.building = true\n          // create the tower menu and give it player control\n          this.world.createEntity()\n            .addComponent(InputFocus)\n            .addComponent(isTowerMenu)\n            .addComponent(GamepadComponent, g)\n            .addComponent(PositionComponent, p)\n\n          ent.removeComponent(InputFocus)\n        }\n      }\n    })\n\n    // whenever a tower menu loses we want to give it back to the player\n    this.queries.towerMenusWithoutFocus.added.forEach((ent: Entity) => {\n      // find a player without focus and assign focus back\n      const gamepadIndex = ent.getComponent(GamepadComponent).index\n      const player = this.queries.playersWithoutFocus.results.find((ent: Entity) => ent.getComponent(GamepadComponent).index == gamepadIndex)\n      if(player != null){\n        player.addComponent(InputFocus)\n      }\n    })\n  }\n}\n\n// @ts-ignore\nPlayerControlSystem.queries = {\n  players: {components: [GamepadComponent, PositionComponent, PlayerStateComponent, InputFocus]},\n  playersWithoutFocus: {components: [PlayerStateComponent, GamepadComponent, Not(InputFocus)]},\n  towerMenusWithoutFocus: {\n    components: [isTowerMenu, GamepadComponent, Not(InputFocus)],\n    listen: {\n      added: true,\n    },\n  },\n}\n","import { Camera } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport { Map, MapCastle } from '../utils/Map'\nimport { CameraComponent,\n         MapConfigComponent,\n         isCastleComponent,\n         isTileComponent,\n         SizeComponent,\n         HealthComponent,\n         CubeCoordinateComponent,\n       } from '../components'\n\nexport default class CastleInitSystem extends System {\n  enabled: boolean\n  world: World\n\n  queries: {\n    map: QueryType\n    camera: QueryType\n    tiles: QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const map: Map = this.queries.map.results[0].getComponent(MapConfigComponent).value\n    const camera: Camera = this.queries.camera.results[0].getComponent(CameraComponent).value\n\n    const ptm: number = camera.pixelsToMeters\n    const mapH: number = Math.ceil(camera.height / ptm)\n    const mapW: number = Math.ceil(camera.width / ptm)\n    const mapArea: number = mapH * mapW\n\n    const tileSize: number = this.queries.tiles.results[0].getComponent(SizeComponent).value\n    const size: number = tileSize / 1.5\n\n    map.castles.forEach((castle: MapCastle) => {\n      this.world.createEntity()\n        .addComponent(isCastleComponent)\n        .addComponent(SizeComponent, {value: size})\n        .addComponent(CubeCoordinateComponent, castle.coords)\n    })\n\n    // this System only runs once\n    this.enabled = false\n  }\n}\n\n// @ts-ignore\nCastleInitSystem.queries = {\n  map: { components: [MapConfigComponent], mandatory: true},\n  camera: { components: [CameraComponent], mandatory: true},\n  tiles:  { components: [isTileComponent], mandatory: true},\n}\n","import Ludic, { Camera, Vector2 } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport {\n  isCastleComponent,\n  isTileComponent,\n  SizeComponent,\n  CubeCoordinateComponent,\n} from '../components'\n\nimport { QueryType } from '/src/ecsy'\nimport { Hex, cube_to_vector2, CubeCoordinate } from '../utils/Hex'\n\n\nexport default class CastleRenderSystem extends System {\n  queries: {\n    castles: QueryType\n    tiles: QueryType\n  }\n\n\n  execute(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    const tileSize: number = this.queries.tiles.results[0].getComponent(SizeComponent).value\n    ctx.save()\n\n    this.queries.castles.results.forEach((castle: Entity) => {\n      ctx.save()\n      this.render(ctx, castle, tileSize)\n      ctx.restore()\n    })\n\n    ctx.restore()\n  }\n\n  render(ctx: CanvasRenderingContext2D, castle: Entity, tileSize: number): void {\n    const size: number = castle.getComponent(SizeComponent).value\n    const coords: CubeCoordinate = castle.getComponent(CubeCoordinateComponent)\n    const pos: Vector2 = cube_to_vector2({x: coords.x, y: coords.y, z: coords.z}, tileSize)\n    const x: number = pos.x\n    const y: number = pos.y\n\n    ctx.fillStyle = \"rgba(67, 211, 35, 1)\"\n\n    ctx.beginPath();\n    ctx.moveTo(pos.x - (size / 2), pos.y - (size / 2))\n    ctx.lineTo(pos.x, pos.y + (size / 2))\n    ctx.lineTo(pos.x + (size / 2), pos.y - (size / 2))\n    ctx.fill()\n  }\n}\n\n\n// @ts-ignore\nCastleRenderSystem.queries = {\n  castles: { components: [isCastleComponent]},\n  tiles: { components: [isTileComponent], mandatory: true},\n}\n","import { Camera, Vector2 } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport { Map, MapTile } from '../utils/Map'\nimport { PositionComponent,\n         MovementComponent,\n         isTileComponent,\n         isEnemyComponent,\n         SizeComponent,\n         SpeedComponent,\n         DestinationCubeComponent,\n         PreviousCubeComponent,\n         EnemyConfigComponent\n       } from '../components'\n\nimport { Hex, CubeCoordinate, OffsetCoordinate, cube_all_neighbors, vector2_to_cube, cube_to_vector2 } from '../utils/Hex'\n\nexport default class EnemySpawnSystem extends System {\n  enabled: boolean\n  world: World\n\n  queries: {\n    enemyConfig: QueryType\n    tiles:  QueryType\n\n  }\n\n  spawns = [1, 2, 3, 4, 5]\n\n  execute(deltaTime: number, time: number): void {\n    const enemyConfig: Map = this.queries.enemyConfig.results[0].getComponent(EnemyConfigComponent).value\n    const tileSize: number = this.queries.tiles.results[0].getComponent(SizeComponent).value\n\n    // Just spawn a random enemy every 10 seconds\n    if(this.spawns.indexOf(Math.round(time / 5000)) > -1){\n      this.spawnRandomEnemy(tileSize)\n      this.spawns.splice(0, 1)\n    }\n  }\n\n  spawnRandomEnemy(tileSize: number){\n    let pos: Vector2 = new Vector2(-tileSize * 8, tileSize * 5)\n    let cube: CubeCoordinate = vector2_to_cube(pos, tileSize)\n    this.world.createEntity()\n      .addComponent(PositionComponent, pos)\n      .addComponent(MovementComponent)\n      .addComponent(SizeComponent, {value: tileSize / 4})\n      .addComponent(SpeedComponent, {value: .1})\n      .addComponent(DestinationCubeComponent, cube)\n      .addComponent(PreviousCubeComponent, cube)\n      .addComponent(isEnemyComponent)\n  }\n}\n\n\n// @ts-ignore\nEnemySpawnSystem.queries = {\n  enemyConfig: { components: [EnemyConfigComponent], mandatory: true},\n  tiles:  { components: [isTileComponent], mandatory: true},\n}\n","import Ludic from '@ludic/ludic'\nimport { PositionComponent,\n         CameraComponent,\n         isEnemyComponent,\n         SizeComponent,\n       } from '../components'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\n\nexport default class EnemyRenderSystem extends System {\n  engine: World\n\n  queries: {\n    enemies: QueryType\n    camera: QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const ctx = Ludic.canvas.context\n    const camera = this.queries.camera.results[0].getComponent(CameraComponent).value\n\n    ctx.save()\n    this.queries.enemies.results.forEach((entity: Entity) => {\n      ctx.save()\n      this.render(ctx, entity)\n      ctx.restore()\n    })\n    ctx.restore()\n  }\n\n  render(ctx: CanvasRenderingContext2D, enemy: Entity){\n    const pos = enemy.getComponent(PositionComponent)\n    const size: number = enemy.getComponent(SizeComponent).value\n\n    ctx.fillStyle = \"red\"\n    ctx.beginPath()\n    ctx.arc(pos.x + (size / 2), pos.y + (size / 2), size, 0, Math.PI * 2)\n    ctx.fill()\n  }\n}\n\n// @ts-ignore\nEnemyRenderSystem.queries = {\n  enemies: { components: [isEnemyComponent]},\n  camera: { components: [CameraComponent]},\n}\n","import { Vector2 } from '@ludic/ludic'\n\nexport const Vector2Distance = function(p1: Vector2, p2: Vector2): number {\n  return Math.sqrt((Math.pow((p2.x - p1.x), 2) + Math.pow((p2.y - p1.y), 2)))\n}\n\nexport const Vector2Normalize = function(vec: Vector2): Vector2 {\n  const length = Math.sqrt(vec.x * vec.x + vec.y * vec.y)\n  return new Vector2(vec.x / length, vec.y / length)\n}\n","import Ludic, { Vector2 } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport { PositionComponent,\n         MovementComponent,\n         isTileComponent,\n         isEnemyComponent,\n         SizeComponent,\n         EnemyConfigComponent,\n         isCastleComponent,\n         SpeedComponent,\n         DestinationCubeComponent,\n         CurrentCubeComponent,\n         PreviousCubeComponent,\n         CubeCoordinateComponent,\n       } from '../components'\n\nimport { Vector2Normalize } from '../utils/Euclid'\nimport { Hex, CubeCoordinate, OffsetCoordinate, cube_all_neighbors, vector2_to_cube, cube_to_vector2 } from '../utils/Hex'\n\nexport default class EnemyMovementSystem extends System {\n  enabled: boolean\n  world: World\n\n  queries: {\n    enemies: QueryType\n    tiles:  QueryType\n    castles: QueryType\n  }\n\n  pathMap: any = null\n\n  getNeighborTiles(tiles: Entity[], current: CubeCoordinate): Entity[] {\n    const neighborCubeCoords: CubeCoordinate[] = cube_all_neighbors(current)\n\n    // console.log(\"neighborCubeCoords: \", neighborCubeCoords)\n    return tiles.filter((tile: Entity) => {\n      let found = false\n      neighborCubeCoords.forEach((coord: CubeCoordinate) => {\n        const tileCoord: CubeCoordinate = tile.getComponent(CubeCoordinateComponent)\n        if(coord.x == tileCoord.x && coord.y == tileCoord.y && coord.z == tileCoord.z){\n          found = true\n        }\n      })\n      return found\n    })\n  }\n\n  cubeToString(cube: CubeCoordinate): string {\n    return '' + cube.x + cube.y + cube.z\n  }\n\n\n  generatePathMap(tiles: Entity[], castleCoords: CubeCoordinate): any {\n    let frontier: CubeCoordinate[] = [castleCoords]\n    this.pathMap = new Map()\n    this.pathMap.set(this.cubeToString(castleCoords), null)\n\n    while(frontier.length){\n      const current: CubeCoordinate = frontier.shift()\n      const neighborTiles: Entity[] = this.getNeighborTiles(tiles, current)\n\n      neighborTiles.forEach((tile: Entity) => {\n        const tileCoordComponent: CubeCoordinateComponent = tile.getComponent(CubeCoordinateComponent)\n        const tileCoord: CubeCoordinate = {x: tileCoordComponent.x, y: tileCoordComponent.y, z: tileCoordComponent.z}\n        if(!this.pathMap.has(this.cubeToString(tileCoord))){\n          frontier.push(tileCoord)\n          this.pathMap.set(this.cubeToString(tileCoord), current)\n        }\n      })\n    }\n    return this.pathMap\n  }\n\n  moveToHexCenter(currentPosition: Vector2, hex: Hex, speed: number): Vector2 {\n    let diffVec = new Vector2(hex.position.x - currentPosition.x, hex.position.y - currentPosition.y)\n    diffVec = Vector2Normalize(diffVec)\n    return new Vector2(diffVec.x * speed, diffVec.y * speed)\n  }\n\n  execute(deltaTime: number): void {\n    const enemies: Entity[] = this.queries.enemies.results\n    const castles: Entity[] = this.queries.castles.results\n    const tiles: Entity[] = this.queries.tiles.results\n\n    const castle: Entity = castles[0]\n    const castleCoordsComponent = castle.getComponent(CubeCoordinateComponent)\n    const castleCube = {x: castleCoordsComponent.x, y: castleCoordsComponent.y, z: castleCoordsComponent.z}\n\n    if(!this.pathMap) this.generatePathMap(tiles, castleCube)\n\n    const tileSize: number = tiles[0].getComponent(SizeComponent).value\n\n    enemies.forEach((enemy: Entity) => {\n      const enemySpeed: number = enemy.getComponent(SpeedComponent).value\n      let enemyPositionComponent = enemy.getMutableComponent(PositionComponent)\n      let enemyPosition: Vector2 = new Vector2(enemyPositionComponent.x, enemyPositionComponent.y)\n      let destinationCube: CubeCoordinate = enemy.getMutableComponent(DestinationCubeComponent)\n      let previousCube: CubeCoordinate = enemy.getMutableComponent(PreviousCubeComponent)\n\n      // If the Enemy is not in the center of our current Tile, go there\n      let tileCenter: Vector2 = cube_to_vector2(destinationCube, tileSize)\n      if(Math.abs(tileCenter.x - enemyPosition.x) > .05 || Math.abs(tileCenter.y - enemyPosition.y) > .05){\n        let diffVec = new Vector2(tileCenter.x - enemyPosition.x, tileCenter.y - enemyPosition.y)\n        diffVec = Vector2Normalize(diffVec)\n        diffVec = new Vector2(diffVec.x * enemySpeed, diffVec.y * enemySpeed)\n        enemyPositionComponent.x += diffVec.x\n        enemyPositionComponent.y += diffVec.y\n      } else {\n        previousCube.x = destinationCube.x\n        previousCube.y = destinationCube.y\n        previousCube.z = destinationCube.z\n\n        let nextCube = this.pathMap.get(this.cubeToString(previousCube))\n        if(nextCube){\n          destinationCube.x = nextCube.x\n          destinationCube.y = nextCube.y\n          destinationCube.z = nextCube.z\n        }\n      }\n    })\n  }\n}\n\n// @ts-ignore\nEnemyMovementSystem.queries = {\n  enemies: { components: [isEnemyComponent], mandatory: true},\n  tiles:  { components: [isTileComponent], mandatory: true},\n  castles:  { components: [isCastleComponent], mandatory: true},\n}\n","import { Camera } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport { Map, MapTile } from '../utils/Map'\nimport { CameraComponent,\n         MapConfigComponent,\n         isTileComponent,\n         TileStateComponent,\n         SizeComponent,\n         CubeCoordinateComponent,\n       } from '../components'\n\nimport { side_length_from_area, area_from_side_length, offset_to_cube, OffsetCoordinate, CubeCoordinate } from '../utils/Hex'\n\nexport default class TileInitSystem extends System {\n  enabled: boolean\n  world: World\n\n  queries: {\n    map: QueryType\n    camera: QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const map: Map = this.queries.map.results[0].getComponent(MapConfigComponent).value\n    const camera: Camera = this.queries.camera.results[0].getComponent(CameraComponent).value\n\n    const ptm: number = camera.pixelsToMeters\n    const h: number = Math.ceil(camera.height / ptm)\n    const w: number = Math.ceil(camera.width / ptm)\n    const area: number = h * w\n\n    const totalTiles: number = 250\n    const tileArea: number = area / totalTiles\n    const sideLength: number = side_length_from_area(tileArea)\n\n    // console.log(\"area: \", area)\n    // console.log(\"tileArea: \", tileArea)\n    // console.log(\"sideLength: \", sideLength)\n\n    let tileH = Math.sqrt(3) * sideLength\n    let tileW = sideLength * 2\n    let maxX = Math.ceil(w / (tileW * (3/4) + tileW)) + 1\n    let maxY = Math.ceil((h / tileH) / 2)\n\n    // console.log(\"maxX\", maxX)\n    // console.log(\"maxY\", maxY)\n\n    let actualTiles = 0\n    for(let q=-maxX; q <= maxX; q++){\n      for(let r=maxY; r >= -maxY; r--){\n        const cube: CubeCoordinate = offset_to_cube({q, r})\n        actualTiles++\n        this.world.createEntity()\n          .addComponent(isTileComponent)\n          .addComponent(TileStateComponent)\n          .addComponent(SizeComponent, {value: sideLength})\n          .addComponent(CubeCoordinateComponent, cube)\n      }\n    }\n\n    // console.log(\"actual: \", actualTiles)\n    // map.tiles.forEach((tile: MapTile) => {\n    //   this.world.createEntity()\n    //     .addComponent(isTileComponent)\n    //     .addComponent(SizeComponent, {value: sideLength})\n    //     .addComponent(CubeCoordinateComponent, tile.coords)\n    // })\n\n    this.enabled = false\n  }\n}\n\n// @ts-ignore\nTileInitSystem.queries = {\n  map: { components: [MapConfigComponent], mandatory: true},\n  camera: { components: [CameraComponent], mandatory: true},\n}\n","import Ludic, { Vector2 }from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport {\n  isTileComponent,\n  SizeComponent,\n  TileStateComponent,\n  CubeCoordinateComponent,\n  CameraComponent,\n} from '../components'\n\nimport { QueryType } from '/src/ecsy'\nimport { Hex, cube_to_vector2, CubeCoordinate } from '../utils/Hex'\n\nexport default class TileRenderSystem extends System {\n  queries: {\n    tiles: QueryType\n    camera: QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const camera = this.queries.camera.results[0].getComponent(CameraComponent).value\n    const ctx = Ludic.canvas.context\n\n    ctx.save()\n\n    this.queries.tiles.results.forEach((tile: Entity) => {\n      ctx.save()\n      this.renderTile(ctx, tile)\n      ctx.restore()\n    })\n\n    ctx.restore()\n  }\n\n  renderTile(ctx: CanvasRenderingContext2D, tile: Entity): void {\n    const state: TileStateComponent = tile.getComponent(TileStateComponent)\n    const size: number = tile.getComponent(SizeComponent).value\n    const coords: CubeCoordinate = tile.getComponent(CubeCoordinateComponent)\n    const pos: Vector2 = cube_to_vector2({x: coords.x, y: coords.y, z: coords.z}, size)\n    const x: number = pos.x\n    const y: number = pos.y\n\n    ctx.lineWidth = .15\n\n    ctx.fillStyle = \"#6EB5FF\"\n    if(state.status == 'active'){\n      ctx.fillStyle = \"#AFF8DB\"\n    }\n\n    ctx.strokeStyle = \"#FFFFFF\"\n\n\n    ctx.beginPath()\n    ctx.moveTo(x + size * Math.cos(0), y + size * Math.sin(0))\n    for(let side = 0; side < 7; side++) {\n      ctx.lineTo(x + size * Math.cos(side * 2 * Math.PI / 6), y + size * Math.sin(side * 2 * Math.PI / 6))\n    }\n    ctx.fill()\n    ctx.stroke()\n\n\n    if(Ludic.debug){\n      ctx.save()\n      ctx.font = '1px serif'\n      ctx.fillStyle = 'white'\n      ctx.scale(1, -1)\n      ctx.fillText(`${coords.x}  ${coords.y}  ${coords.z}`, x - 1.5, -y)\n      // ctx.fillText(`q: ${state.hex.offsetCoordinate.q}  r: ${state.hex.offsetCoordinate.r}`, x - 1.5, -y)\n      // ctx.fillText(`q: ${state.hex.q} r:${state.hex.r}`, x - 1.5, -y)\n      ctx.restore()\n    }\n  }\n}\n\n// @ts-ignore\nTileRenderSystem.queries = {\n  tiles: { components: [isTileComponent]},\n  camera: { components: [CameraComponent], mandatory: true},\n}\n","import Ludic, { Vector2 } from '@ludic/ludic'\nimport { System, World, Entity } from 'ecsy'\nimport { QueryType } from '/src/ecsy'\nimport { PositionComponent,\n         MovementComponent,\n         isTileComponent,\n         isPlayerComponent,\n         SizeComponent,\n         EnemyConfigComponent,\n         isCastleComponent,\n         SpeedComponent,\n         PreviousCubeComponent,\n         TileStateComponent,\n         CubeCoordinateComponent,\n       } from '../components'\n\nimport { Vector2Normalize } from '../utils/Euclid'\nimport { Hex, CubeCoordinate, OffsetCoordinate, cube_all_neighbors, vector2_to_cube, cube_to_vector2 } from '../utils/Hex'\n\nexport default class TileActivationSystem extends System {\n  enabled: boolean\n  world: World\n\n  queries: {\n    players: QueryType\n    tiles:  QueryType\n  }\n\n  execute(deltaTime: number): void {\n    const players: Entity[] = this.queries.players.changed\n    if(!players.length) return\n\n    const tiles: Entity[] = this.queries.tiles.results\n    const tileSize: number = tiles[0].getComponent(SizeComponent).value\n\n    let playerCubes: CubeCoordinate[] = []\n    players.forEach((player: Entity) => {\n      const playerPositionComponent = player.getComponent(PositionComponent)\n      const playerPosition: Vector2 = new Vector2(playerPositionComponent.x, playerPositionComponent.y)\n      playerCubes.push(vector2_to_cube(playerPosition, tileSize))\n    })\n\n    tiles.forEach((tile: Entity) => {\n      let state: TileStateComponent = tile.getMutableComponent(TileStateComponent)\n      let cube: CubeCoordinateComponent = tile.getComponent(CubeCoordinateComponent)\n\n      state.status = \"inactive\"\n      state.playersOn = 0\n      playerCubes.forEach(c => {\n        if(c.x == cube.x && c.y == cube.y && c.z == cube.z){\n          state.status = \"active\"\n          state.playersOn++\n        }\n      })\n    })\n  }\n}\n\n// @ts-ignore\nTileActivationSystem.queries = {\n  players: {\n    components: [isPlayerComponent, CubeCoordinateComponent],\n    listen: {\n      changed: [ CubeCoordinateComponent ]\n    },\n    mandatory: true\n  },\n  tiles:  { components: [TileStateComponent], mandatory: true},\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst styleMapCache = new WeakMap<AttributePart, StyleInfo>();\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS propertes. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo: StyleInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `styleMap` directive must be used in the style attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {style} = committer.element as HTMLElement;\n\n  // Handle static styles the first time we see a Part\n  if (!styleMapCache.has(part)) {\n    style.cssText = committer.strings.join(' ');\n  }\n\n  // Remove old properties that no longer exist in styleInfo\n  const oldInfo = styleMapCache.get(part);\n  for (const name in oldInfo) {\n    if (!(name in styleInfo)) {\n      if (name.indexOf('-') === -1) {\n        // tslint:disable-next-line:no-any\n        (style as any)[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  }\n\n  // Add or update properties\n  for (const name in styleInfo) {\n    if (name.indexOf('-') === -1) {\n      // tslint:disable-next-line:no-any\n      (style as any)[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n  styleMapCache.set(part, styleInfo);\n});\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n\nexport interface ClassInfo {\n  readonly [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {element} = committer;\n\n  // handle static classes\n  if (!classMapCache.has(part)) {\n    element.className = committer.strings.join(' ');\n  }\n\n  const {classList} = element;\n\n  // remove old classes that no longer apply\n  const oldInfo = classMapCache.get(part);\n  for (const name in oldInfo) {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n    }\n  }\n\n  // add new classes\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (!oldInfo || value !== oldInfo[name]) {\n      // We explicitly want a loose truthy check here because\n      // it seems more convenient that '' and 0 are skipped.\n      const method = value ? 'add' : 'remove';\n      classList[method](name);\n    }\n  }\n  classMapCache.set(part, classInfo);\n});\n","import { System, World, Entity, Not } from 'ecsy'\nimport { isTowerMenu, GamepadComponent, PlayerStateComponent, PositionComponent, CameraComponent, InputFocus, TowerMenuStateComponent } from '../components'\nimport { QueryType } from '/src/ecsy'\nimport Ludic, { Vector2 } from '@ludic/ludic'\nimport { render, html } from 'lit-html'\nimport { styleMap } from 'lit-html/directives/style-map'\nimport { classMap } from 'lit-html/directives/class-map'\n\nexport default class TowerMenuRenderSystem extends System {\n\n\n\n  world!: World\n  queries!: {\n    camera: QueryType\n    components: QueryType\n    added: QueryType\n  }\n\n  containerId = '#tower-menu-render-container'\n  container: HTMLDivElement\n\n  towers = ['a', 'b', 'c']\n\n  init(){\n    // initialize our rendering container\n    this.container = document.body.querySelector(this.containerId)\n    if(!this.container){\n      const uiContainer = document.body.querySelector(\"#ui-container\")\n      this.container = document.createElement('div')\n      this.container.id = this.containerId\n      uiContainer.appendChild(this.container)\n    }\n  }\n  \n  execute(){\n    // init state components\n    this.queries.added.results.forEach(ent => {\n      ent.addComponent(TowerMenuStateComponent)\n    })\n    this.renderMenus()\n  }\n\n  renderMenus(){\n    const templates = this.queries.components.results.map(ent => this.menuTemplate(ent))\n    render(html`${templates}`, this.container)\n  }\n\n  menuTemplate(ent: Entity){\n    return html`\n      <style>\n        .tower-menu {\n          display: flex;\n        }\n        .tower {\n          width: 20px;\n          height: 20px;\n          background: blue;\n          border: 1px solid blue;\n          margin-right: 8px;\n        }\n        .tower.active {\n          border-color: red;\n        }\n      </style>\n      <div class=\"${this.menuClass(ent)}\" style=${this.menuStyle(ent)}>\n        ${this.towers.map((name, ix) => html`\n          <div class=\"${this.towerItemClass(ent, ix)}\">${name}</div>\n        `)}\n      </div>\n    `\n  }\n\n  menuStyle(ent: Entity){\n    const {value: camera} = this.queries.camera.results[0].getComponent(CameraComponent)\n    const pos = ent.getComponent(PositionComponent)\n    const position = camera.getPixelPointFromWorldPoint(new Vector2(pos.x, pos.y))\n    return styleMap({\n      position: 'absolute',\n      left: `${position.x-40}px`,\n      top: `${position.y-50}px`,\n    })\n  }\n\n  menuClass(ent: Entity){\n    return classMap({\n      'tower-menu': true,\n    })\n  }\n\n  towerItemClass(ent: Entity, ix: number){\n    const state = ent.getComponent(TowerMenuStateComponent)\n    return classMap({\n      'tower': true,\n      'active': state.index == ix,\n    })\n  }\n}\n\n// @ts-ignore\nTowerMenuRenderSystem.queries = {\n  camera: {components: [CameraComponent]},\n  added: {\n    components: [isTowerMenu, Not(TowerMenuStateComponent)],\n  },\n  components: {\n    components: [isTowerMenu, InputFocus, TowerMenuStateComponent],\n    listen: {\n      added: true,\n      removed: true,\n    }\n  }\n}","// Player\n// export { default as PlayerCreate } from './PlayerCreate'\nexport { default as PlayerInitSystem } from './PlayerInitSystem'\nexport { default as PlayerRenderSystem } from './PlayerRenderSystem'\nexport { default as PlayerControlSystem } from './PlayerControlSystem'\n// export { default as PlayerMapControlSystem } from './PlayerMapControlSystem'\n\n\n// Castle\nexport { default as CastleInitSystem } from './CastleInitSystem'\nexport { default as CastleRenderSystem } from './CastleRenderSystem'\n// export { default as CastleDamageSystem } from './CastleDamageSystem'\n\n\n\n// Enemy\nexport { default as EnemySpawnSystem } from './EnemySpawnSystem'\nexport { default as EnemyRenderSystem } from './EnemyRenderSystem'\nexport { default as EnemyMovementSystem } from './EnemyMovementSystem'\n\n\n// Tile\nexport { default as TileInitSystem } from './TileInitSystem'\nexport { default as TileRenderSystem } from './TileRenderSystem'\nexport { default as TileActivationSystem } from './TileActivationSystem'\n\n// Tower\n// export { default as TowerRenderSystem } from './TowerRenderSystem'\nexport { default as TowerMenuRenderSystem } from './TowerMenuRenderSystem'\n\n// Misc\n// export { default as PositionSystem } from './PositionSystem'\n// export { default as MovementSystem } from './MovementSystem'\n// export { default as CameraRenderSystem } from './CameraRenderSystem'\n// export { default as CharacterSelectRenderer } from './characterSelect/CharacterSelectRenderer'\n// export { default as CharacterSelectSystem } from './characterSelect/CharacterSelectSystem'\n// export { default as BackgroundRenderSystem } from './BackgroundRenderSystem'\n","import {\n  GamepadComponent,\n  PositionComponent,\n  PlayerStateComponent,\n  isTowerMenu,\n  CameraComponent,\n  InputFocus,\n  TowerMenuStateComponent\n} from '../components'\n\nimport Ludic, { Vector2 } from '@ludic/ludic'\nimport TowerMenu from '../ui/towerMenu'\nimport { System, Entity } from 'ecsy'\nimport { UIComponent } from '@ludic/ludic-ui'\nimport { QueryType } from '/src/ecsy'\n\nexport default class TowerMenuControlSystem extends System {\n\n  queries: {\n    menus: QueryType\n  }\n\n  totalTowers = 3\n\n  execute(){\n    this.queries.menus.results.forEach((ent: Entity) => {\n      const g = ent.getComponent(GamepadComponent)\n      const gamepad = Ludic.input.gamepad.get(g.index)\n\n      if(gamepad.circle.buttonUp){\n        this.closeMenu(ent)\n      } else if(gamepad.left.buttonDown){\n        this.moveLeft(ent)\n      } else if(gamepad.right.buttonDown){\n        this.moveRight(ent)\n      } else if(gamepad.cross.buttonUp){\n        const { index } = ent.getComponent(TowerMenuStateComponent)\n        console.log('create tower', index)\n        this.closeMenu(ent)\n      }\n    })\n  }\n\n  closeMenu(ent: Entity){\n    ent.removeComponent(InputFocus)\n  }\n\n  moveLeft(ent: Entity){\n    const state = ent.getMutableComponent(TowerMenuStateComponent)\n    state.index--\n    if(state.index < 0){\n      state.index = this.totalTowers - 1\n    }\n  }\n  moveRight(ent: Entity){\n    const state = ent.getMutableComponent(TowerMenuStateComponent)\n    state.index++\n    if(state.index >= this.totalTowers){\n      state.index = 0\n    }\n  }\n}\n\n// @ts-ignore\nTowerMenuControlSystem.queries = {\n  menus: {components: [isTowerMenu, GamepadComponent, InputFocus, TowerMenuStateComponent]}\n}\n","import { EnemyWave, EnemyGroup } from '../../utils/Waves'\n\nconst WavesConfig: EnemyWave[] = [\n  {\n    start: 1000,\n    enemyGroups: [\n      {\n        start: 0,\n        type: '1',\n        count: 1,\n        spawnInterval: 1000,\n        spawnCoordinate: {x:14, y: 0, z: -14}\n      }\n    ]\n  },\n  {\n    start: 10000,\n    enemyGroups: [\n      {\n        start: 0,\n        type: '2',\n        count: 2,\n        spawnInterval: 1000,\n        spawnCoordinate: {x:8, y: 3, z: -11}\n      }\n    ]\n  },\n  {\n    start: 20000,\n    enemyGroups: [\n      {\n        start: 0,\n        type: '1',\n        count: 2,\n        spawnInterval: 1000,\n        spawnCoordinate: {x:7, y: 1, z: -8}\n      }\n    ]\n  },\n]\n\nexport default WavesConfig\n","module.exports={tiles:[{coords:{x:0,y:0,z:0},tileType:\"1\"},{coords:{x:0,y:1,z:-1},tileType:\"1\"},{coords:{x:1,y:0,z:-1},tileType:\"1\"},{coords:{x:1,y:-1,z:0},tileType:\"1\"},{coords:{x:0,y:-1,z:1},tileType:\"1\"},{coords:{x:-1,y:0,z:1},tileType:\"1\"},{coords:{x:-1,y:1,z:0},tileType:\"1\"},{coords:{x:0,y:2,z:-2},tileType:\"1\"},{coords:{x:1,y:1,z:-2},tileType:\"1\"},{coords:{x:2,y:0,z:-2},tileType:\"1\"},{coords:{x:2,y:-1,z:-1},tileType:\"1\"},{coords:{x:2,y:-2,z:0},tileType:\"1\"},{coords:{x:1,y:-2,z:1},tileType:\"1\"},{coords:{x:0,y:-2,z:2},tileType:\"1\"},{coords:{x:-1,y:-1,z:2},tileType:\"1\"},{coords:{x:-2,y:0,z:2},tileType:\"1\"},{coords:{x:-2,y:1,z:1},tileType:\"1\"},{coords:{x:-2,y:2,z:0},tileType:\"1\"},{coords:{x:-1,y:2,z:-1},tileType:\"1\"}],castles:[{coords:{x:2,y:2,z:-4}}],playerSpawnPoints:[{x:1,y:1,z:-2},{x:3,y:-1,z:2}]};","import Ludic, {Screen, Camera} from '@ludic/ludic'\n\n// Player Systems\nimport { PlayerInitSystem, PlayerControlSystem, PlayerRenderSystem } from '../../systems'\n\n// Tile Systems\nimport { TileInitSystem, TileRenderSystem, TileActivationSystem } from '../../systems'\n\n// Castle Systems\nimport { CastleInitSystem, CastleRenderSystem } from '../../systems'\nimport CastleDamageSystem from '../../systems/CastleDamageSystem'\n\n// Enemy Systems\nimport { EnemySpawnSystem, EnemyRenderSystem, EnemyMovementSystem } from '../../systems'\n\n// Tower Systems\nimport TowerMenuControlSystem from '../../systems/TowerMenuControlSystem'\nimport TowerMenuRenderSystem from '../../systems/TowerMenuRenderSystem'\n\nimport BackgroundRenderSystem from '../../systems/BackgroundRenderSystem'\n\nimport {\n  GamepadComponent,\n  MechComponent,\n  PositionComponent,\n  MovementComponent,\n  PlayerStateComponent,\n  PlayerConfigComponent,\n  MapConfigComponent,\n  EnemyConfigComponent,\n  CameraComponent,\n  InputFocus,\n} from '../../components'\n\n// Map and Waves\nimport WavesConfig from './wavesConfig'\nimport mapConfig from './mapConfig'\nimport { World } from 'ecsy'\n\n\ninterface LevelOptions {\n  playerMap: {[key: string]: string}\n}\n\nexport default class Level1 {\n  engine: World\n\n  constructor(engine: World){\n    this.engine = engine\n\n    // Hack for now\n    Ludic.debug = false\n  }\n\n  init(options: LevelOptions){\n\n    // Add the player config\n    this.engine.createEntity().addComponent(PlayerConfigComponent, {value: options.playerMap})\n\n    // Add the map config\n    this.engine.createEntity().addComponent(MapConfigComponent, {value: mapConfig})\n\n    // Add the enemy config\n    this.engine.createEntity().addComponent(EnemyConfigComponent, {value: WavesConfig})\n\n    this.initSystems()\n  }\n\n  initSystems(){\n    // Init\n    this.engine.registerSystem(TileInitSystem)\n    this.engine.registerSystem(CastleInitSystem)\n    this.engine.registerSystem(PlayerInitSystem)\n    this.engine.registerSystem(EnemySpawnSystem)\n\n    // Render\n    // this.engine.addSystem(new BackgroundRenderSystem())\n    // this.engine.addSystem(new TowerRenderSystem())\n    this.engine.registerSystem(TileRenderSystem)\n    this.engine.registerSystem(CastleRenderSystem)\n    this.engine.registerSystem(EnemyRenderSystem)\n    this.engine.registerSystem(PlayerRenderSystem)\n\n\n    this.engine.registerSystem(TowerMenuControlSystem)\n    this.engine.registerSystem(PlayerControlSystem)\n    this.engine.registerSystem(TowerMenuRenderSystem)\n    this.engine.registerSystem(EnemyMovementSystem)\n\n    this.engine.registerSystem(TileActivationSystem)\n\n    // this.engine.addSystem(new CastleDamageSystem())\n  }\n}\n","import Ludic from '@ludic/ludic';\nimport { System } from 'ecsy'\nimport { CameraComponent } from '../components'\nimport { QueryType } from '/src/ecsy'\n\nclass CameraRenderSystem extends System {\n\n  queries!: {\n    camera: QueryType\n  }\n\n  execute(){\n    // const {camera} = this.engine.getSingletonComponent(CameraComponentMapper)\n    this.queries.camera.results.forEach(ent => {\n      const camera = ent.getComponent(CameraComponent).value\n      camera.update(Ludic.canvas.context)\n    })\n  }\n}\n\n// @ts-ignore\nCameraRenderSystem.queries = {\n  camera: {components: [CameraComponent]},\n}\n\nexport default CameraRenderSystem\n","import Ludic, {Screen, Camera, ScreenManager, Vector2} from '@ludic/ludic'\n\nimport Level1 from '../levels/level1/level'\nimport Player from '../entities/Player'\nimport BaseLevel from '../levels/BaseLevel'\nimport { CameraComponent } from '../components'\nimport CameraRenderSystem from '../systems/CameraRenderSystem'\nimport { World } from 'ecsy'\n\nexport default class GameScreen extends Screen {\n  engine: World\n  player: Player\n  level: BaseLevel\n\n  constructor() {\n    super()\n    this.engine = new World()\n    // this.camera = new Camera(Ludic.canvas)\n\n    // this.camera.centerWorldToCamera()\n    this.createCamera()\n    this.level = new Level1(this.engine)\n  }\n\n  createCamera(){\n    const camera = new Camera(Ludic.canvas)\n    camera.offset = new Vector2(0, camera.height)\n    camera.pixelsToMeters = 20\n\n    const cameraEntity = this.engine.createEntity()\n    cameraEntity.addComponent(CameraComponent, {value: camera})\n    camera.centerWorldToCamera()\n    // console.log(this.engine)\n    // this.engine.addSingletonComponent(new CameraComponent(camera))\n    // this.engine.addSystem(new CameraRenderSystem())\n    this.engine.registerSystem(CameraRenderSystem)\n    // this.engine.addSystem(new TowerMenuSystem())\n  }\n\n  public onAddedToManager(manager: ScreenManager, finalData?: {[key: number]: string}) {\n    this.level.init({\n      playerMap: finalData\n    })\n  }\n\n  update(delta: number, time: number){\n    Ludic.canvas.context.save()\n    Ludic.canvas.clear()\n    this.engine.execute(delta, time)\n    Ludic.canvas.context.restore()\n  }\n}\n","import Ludic, { LudicOptions, ScreenManager, ScreenManagerListener, Screen, GamepadController } from '@ludic/ludic'\nimport GameScreen from './screens/GameScreen'\nimport MapGeneratorScreen from './screens/MapGeneratorScreen'\n// import CharacterSelectScreen from './screens/CharacterSelectScreen'\n\nexport default class Arce extends Ludic implements ScreenManagerListener {\n  public screenManager: ScreenManager\n\n  constructor(opts: LudicOptions){\n    super(opts)\n\n    Ludic.input.addController(new GamepadController())\n\n    this.screenManager = new ScreenManager()\n    this.screenManager.addScreenEventListener(this)\n    this.screenManager.addScreen(new GameScreen(), false, {\n      0: 'orange',\n      1: 'blue',\n      2: 'green',\n    })\n    // this.screenManager.addScreen(new CharacterSelectScreen())\n  }\n\n  onScreenFinished(screen: Screen, manager: ScreenManager, finalData: Screen['_finalData']): void {\n    // if(screen instanceof CharacterSelectScreen){\n    //   // replace this screen with a game screen\n    //   this.screenManager.addScreen(new GameScreen(), true)\n    //   // this.screenManager.addScreen(new MapGeneratorScreen(), true)\n    // }\n  }\n  onScreenAdded(screen: Screen, manager: ScreenManager, replace: boolean): void {\n\n  }\n  onScreensRemoved(screens: Screen[], manager: ScreenManager): void {\n\n  }\n\n  onWarnPopScreen(stack: Screen[], manager: ScreenManager): void {\n\n  }\n\n  update(time: number, delta: number){\n    super.update(time, delta)\n    this.screenManager.update(delta, time)\n  }\n}\n","import Game from '/src/game/game'\n\nnew Game({\n  el: '#game',\n}).start()"]}